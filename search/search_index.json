{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0418\u0418 \u0432 \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0435 \u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u043e\u043c \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0418\u0418 \u0432 \u0442\u043e\u043c \u0438\u043b\u0438 \u0438\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u0418\u043b\u0438 \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0432\u043e\u043a\u0440\u0443\u0433 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0418\u0418. \u0418\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442 \u2014 \u044d\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0432\u0437\u044f\u043b\u0438 \u0431\u0435\u0437\u0434\u0443\u0448\u043d\u044b\u0439 \u043a\u0430\u043c\u0435\u043d\u044c (\u043a\u0440\u0435\u043c\u043d\u0438\u0439), \u043f\u0440\u0438\u043a\u0440\u0443\u0442\u0438\u043b\u0438 \u043a \u043d\u0435\u043c\u0443 \u043a\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438, \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043d\u0443\u043b\u0438 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446\u044b, \u0430 \u043f\u043e\u0442\u043e\u043c \u043d\u0430\u0447\u0430\u043b\u0438 \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c \u0441\u0435\u0440\u044c\u0451\u0437\u0435 \u0441\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c \u0443 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u0441\u043e\u0432\u0435\u0442\u0430 \u043f\u043e \u0436\u0438\u0437\u043d\u0438. \u0427\u0442\u043e \u0434\u0430\u0451\u0442 \u0418\u0418 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435: \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 (\u0437\u0440\u0435\u043d\u0438\u0435, \u0441\u043b\u0443\u0445 \u0438 \u0442.\u0434.) \u043f\u043b\u044e\u0441 \u043a \u043f\u0440\u0435\u0441\u0442\u0438\u0436\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0418\u0418 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u043e\u043d\u043e: \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u0440\u043e\u0436\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u043d\u0438\u044f python \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u043a\u0438 \u0418\u0418 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043c\u043e\u0449\u043d\u043e\u0435 \u0436\u0435\u043b\u0435\u0437\u043e \u041a\u0430\u043a\u0438\u0435 \u0418\u0418 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445? \u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0432 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0430\u0445 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f: - 95% \u2014 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435 (CV) - 4% \u2014 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 - 1% \u2014 \u0443\u0437\u043a\u043e\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0418\u0418 (ANI) \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435 - \u044d\u0442\u043e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0418\u0418, \u0433\u0434\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0432\u0438\u0434\u0435\u043e \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0435\u0451 \u0434\u043b\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0412\u0445\u043e\u0434: \u043a\u0430\u0434\u0440\u044b \u043a\u0430\u043c\u0435\u0440, \u0444\u043e\u0442\u043e, \u0433\u043b\u0443\u0431\u0438\u043d\u0430, LiDAR. \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f: \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u0435\u0442\u0438, \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440\u044b, \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u044f. \u0412\u044b\u0445\u043e\u0434: \u0447\u0442\u043e \u0438 \u0433\u0434\u0435 \u043d\u0430 \u0441\u0446\u0435\u043d\u0435, \u043a\u0430\u043a \u044d\u0442\u043e \u0434\u0432\u0438\u0436\u0435\u0442\u0441\u044f, \u043a\u0430\u043a \u0441 \u044d\u0442\u0438\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c. \u041f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f - YOLO . \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 \u2014 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435). \u0423\u0437\u043a\u043e\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0418\u0418 \u2014 \u044d\u0442\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u0434\u043d\u0443 \u0447\u0451\u0442\u043a\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0434\u043d\u043e\u043c \u0434\u043e\u043c\u0435\u043d\u0435 \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0437\u0430 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0435\u043b\u044b. \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430 \u0418\u0418 \u0432 \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0435 \u0420\u0430\u0431\u043e\u0442\u0430 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0412\u0430\u0436\u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0430\u0436\u043d\u0435\u0435 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438. \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u0436\u0435\u043b\u0435\u0437\u0430. \u0427\u0430\u0441\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u043d\u0430 \u0441\u043b\u0430\u0431\u043e\u043c \u0436\u0435\u043b\u0435\u0437\u0435. \u0420\u0430\u0431\u043e\u0442\u0430 \u043e\u0444\u0444\u043b\u0430\u0439\u043d. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u043a\u0430\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u0435\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e API. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 \u043f\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u043c \u0441\u0435\u0442\u044f\u043c \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0432\u0438\u0434\u0435\u043e \u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 https://www.3blue1brown.com/topics/neural-networks \u041a\u0443\u0440\u0441\u044b \u043d\u0430 beyond curriculum https://school.bc-pf.org/ \u041a\u0443\u0440\u0441\u044b \u043d\u0430 stepik https://stepik.org/catalog \u041b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e LLM \u0410\u043d\u0434\u0440\u0435\u044f \u041a\u0430\u0440\u043f\u0430\u0442\u043e\u0433\u043e https://www.youtube.com/andrejkarpathy \u0422\u0435\u0440\u043c\u0438\u043d\u043e\u043b\u043e\u0433\u0438\u044f: \u0418\u0418-\u043c\u043e\u0434\u0435\u043b\u044c \u2014 \u044d\u0442\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u0432\u0435\u0441\u043e\u0432) \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u043f\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0432\u044b\u0445\u043e\u0434. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432. \u0424\u043e\u0440\u043c\u0430\u0442\u044b \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0430\u0439\u043b\u043e\u0432: - PyTorch: .pt, .bin, .safetensors - TensorFlow: SavedModel, .h5 - ONNX: .onnx - \u041c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0435/\u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0435: .tflite, CoreML - LLM-\u0438\u043d\u0444\u0435\u0440\u0435\u043d\u0441: .gguf, .ggml \u0427\u0430\u0442\u0431\u043e\u0442 - \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043f\u043e\u0432\u0435\u0440\u0445 \u0418\u0418-\u043c\u043e\u0434\u0435\u043b\u0438. \u0420\u0435\u0430\u043a\u0442\u0438\u0432\u0435\u043d: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041e\u0431\u044b\u0447\u043d\u043e \u0431\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0434\u043e\u043b\u0433\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u00ab\u0432\u043e\u043f\u0440\u043e\u0441 \u2192 \u043e\u0442\u0432\u0435\u0442\u00bb. \u0410\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442 - \u0447\u0430\u0442\u0431\u043e\u0442 \u0441 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0435\u0439. \u0418\u043c\u0435\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b (\u0444\u0443\u043d\u043a\u0446\u0438\u0438/API/\u0444\u0430\u0439\u043b\u044b), RAG-\u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043c\u043d\u043e\u0433\u043e\u0448\u0430\u0433\u043e\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u043d\u043e \u043d\u0435 \u0441\u0442\u0430\u0432\u0438\u0442 \u0446\u0435\u043b\u0438 \u0441\u0430\u043c. \u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u00ab\u0437\u0430\u0434\u0430\u0447\u0430 \u2192 \u043f\u043b\u0430\u043d \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u2192 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u00bb. \u0410\u0433\u0435\u043d\u0442 - \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441 \u0446\u0435\u043b\u044c\u044e \u0438 \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0421\u0430\u043c \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0438, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b, \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442, \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043b\u0430\u043d. \u041c\u043e\u0436\u0435\u0442 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0448\u0430\u0433\u0438 \u0431\u0435\u0437 \u043d\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043f\u0440\u0430\u0432\u0438\u043b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u00ab\u0446\u0435\u043b\u044c \u2192 \u043f\u043b\u0430\u043d \u2192 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u2192 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u2192 \u043d\u043e\u0432\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f\u00bb. \u0410\u0432\u0442\u043e\u0440 \u041f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430 aztechell@gmail.com \u0438\u043b\u0438 https://t.me/aztechell","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"#_1","text":"\u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u043e\u043c \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0418\u0418 \u0432 \u0442\u043e\u043c \u0438\u043b\u0438 \u0438\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u0418\u043b\u0438 \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0432\u043e\u043a\u0440\u0443\u0433 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0418\u0418. \u0418\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442 \u2014 \u044d\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0432\u0437\u044f\u043b\u0438 \u0431\u0435\u0437\u0434\u0443\u0448\u043d\u044b\u0439 \u043a\u0430\u043c\u0435\u043d\u044c (\u043a\u0440\u0435\u043c\u043d\u0438\u0439), \u043f\u0440\u0438\u043a\u0440\u0443\u0442\u0438\u043b\u0438 \u043a \u043d\u0435\u043c\u0443 \u043a\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438, \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043d\u0443\u043b\u0438 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446\u044b, \u0430 \u043f\u043e\u0442\u043e\u043c \u043d\u0430\u0447\u0430\u043b\u0438 \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c \u0441\u0435\u0440\u044c\u0451\u0437\u0435 \u0441\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c \u0443 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u0441\u043e\u0432\u0435\u0442\u0430 \u043f\u043e \u0436\u0438\u0437\u043d\u0438.","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0418\u0418 \u0432 \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0435"},{"location":"#_2","text":"\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 (\u0437\u0440\u0435\u043d\u0438\u0435, \u0441\u043b\u0443\u0445 \u0438 \u0442.\u0434.) \u043f\u043b\u044e\u0441 \u043a \u043f\u0440\u0435\u0441\u0442\u0438\u0436\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","title":"\u0427\u0442\u043e \u0434\u0430\u0451\u0442 \u0418\u0418 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435:"},{"location":"#_3","text":"\u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u0440\u043e\u0436\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u043d\u0438\u044f python \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u043a\u0438 \u0418\u0418 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043c\u043e\u0449\u043d\u043e\u0435 \u0436\u0435\u043b\u0435\u0437\u043e","title":"\u0418\u0418 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u043e\u043d\u043e:"},{"location":"#_4","text":"\u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0432 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0430\u0445 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f: - 95% \u2014 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435 (CV) - 4% \u2014 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 - 1% \u2014 \u0443\u0437\u043a\u043e\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0418\u0418 (ANI) \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435 - \u044d\u0442\u043e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0418\u0418, \u0433\u0434\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0432\u0438\u0434\u0435\u043e \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0435\u0451 \u0434\u043b\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0412\u0445\u043e\u0434: \u043a\u0430\u0434\u0440\u044b \u043a\u0430\u043c\u0435\u0440, \u0444\u043e\u0442\u043e, \u0433\u043b\u0443\u0431\u0438\u043d\u0430, LiDAR. \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f: \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u0435\u0442\u0438, \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440\u044b, \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u044f. \u0412\u044b\u0445\u043e\u0434: \u0447\u0442\u043e \u0438 \u0433\u0434\u0435 \u043d\u0430 \u0441\u0446\u0435\u043d\u0435, \u043a\u0430\u043a \u044d\u0442\u043e \u0434\u0432\u0438\u0436\u0435\u0442\u0441\u044f, \u043a\u0430\u043a \u0441 \u044d\u0442\u0438\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c. \u041f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f - YOLO . \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 \u2014 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435). \u0423\u0437\u043a\u043e\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0418\u0418 \u2014 \u044d\u0442\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u0434\u043d\u0443 \u0447\u0451\u0442\u043a\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0434\u043d\u043e\u043c \u0434\u043e\u043c\u0435\u043d\u0435 \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0437\u0430 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0435\u043b\u044b.","title":"\u041a\u0430\u043a\u0438\u0435 \u0418\u0418 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445?"},{"location":"#_5","text":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0412\u0430\u0436\u043d\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0430\u0436\u043d\u0435\u0435 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438. \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u0436\u0435\u043b\u0435\u0437\u0430. \u0427\u0430\u0441\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u043d\u0430 \u0441\u043b\u0430\u0431\u043e\u043c \u0436\u0435\u043b\u0435\u0437\u0435. \u0420\u0430\u0431\u043e\u0442\u0430 \u043e\u0444\u0444\u043b\u0430\u0439\u043d. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u043a\u0430\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u0435\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e API.","title":"\u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430 \u0418\u0418 \u0432 \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0435"},{"location":"#_6","text":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 \u043f\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u043c \u0441\u0435\u0442\u044f\u043c \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0432\u0438\u0434\u0435\u043e \u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 https://www.3blue1brown.com/topics/neural-networks \u041a\u0443\u0440\u0441\u044b \u043d\u0430 beyond curriculum https://school.bc-pf.org/ \u041a\u0443\u0440\u0441\u044b \u043d\u0430 stepik https://stepik.org/catalog \u041b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e LLM \u0410\u043d\u0434\u0440\u0435\u044f \u041a\u0430\u0440\u043f\u0430\u0442\u043e\u0433\u043e https://www.youtube.com/andrejkarpathy","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b:"},{"location":"#_7","text":"\u0418\u0418-\u043c\u043e\u0434\u0435\u043b\u044c \u2014 \u044d\u0442\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u0432\u0435\u0441\u043e\u0432) \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u043f\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0432\u044b\u0445\u043e\u0434. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432. \u0424\u043e\u0440\u043c\u0430\u0442\u044b \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0430\u0439\u043b\u043e\u0432: - PyTorch: .pt, .bin, .safetensors - TensorFlow: SavedModel, .h5 - ONNX: .onnx - \u041c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0435/\u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0435: .tflite, CoreML - LLM-\u0438\u043d\u0444\u0435\u0440\u0435\u043d\u0441: .gguf, .ggml \u0427\u0430\u0442\u0431\u043e\u0442 - \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043f\u043e\u0432\u0435\u0440\u0445 \u0418\u0418-\u043c\u043e\u0434\u0435\u043b\u0438. \u0420\u0435\u0430\u043a\u0442\u0438\u0432\u0435\u043d: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041e\u0431\u044b\u0447\u043d\u043e \u0431\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0434\u043e\u043b\u0433\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u00ab\u0432\u043e\u043f\u0440\u043e\u0441 \u2192 \u043e\u0442\u0432\u0435\u0442\u00bb. \u0410\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442 - \u0447\u0430\u0442\u0431\u043e\u0442 \u0441 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0435\u0439. \u0418\u043c\u0435\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b (\u0444\u0443\u043d\u043a\u0446\u0438\u0438/API/\u0444\u0430\u0439\u043b\u044b), RAG-\u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043c\u043d\u043e\u0433\u043e\u0448\u0430\u0433\u043e\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u043d\u043e \u043d\u0435 \u0441\u0442\u0430\u0432\u0438\u0442 \u0446\u0435\u043b\u0438 \u0441\u0430\u043c. \u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u00ab\u0437\u0430\u0434\u0430\u0447\u0430 \u2192 \u043f\u043b\u0430\u043d \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u2192 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u00bb. \u0410\u0433\u0435\u043d\u0442 - \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441 \u0446\u0435\u043b\u044c\u044e \u0438 \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0421\u0430\u043c \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0438, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b, \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442, \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043b\u0430\u043d. \u041c\u043e\u0436\u0435\u0442 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0448\u0430\u0433\u0438 \u0431\u0435\u0437 \u043d\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043f\u0440\u0430\u0432\u0438\u043b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u00ab\u0446\u0435\u043b\u044c \u2192 \u043f\u043b\u0430\u043d \u2192 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u2192 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u2192 \u043d\u043e\u0432\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f\u00bb.","title":"\u0422\u0435\u0440\u043c\u0438\u043d\u043e\u043b\u043e\u0433\u0438\u044f:"},{"location":"#_8","text":"\u041f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430 aztechell@gmail.com \u0438\u043b\u0438 https://t.me/aztechell","title":"\u0410\u0432\u0442\u043e\u0440"},{"location":"KWS/","text":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432 \u041f\u043e\u0438\u0441\u043a \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432 \u0438\u043b\u0438 Keyword spotting (KWS) \u2014 \u044d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0438\u043b\u0438 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043d\u044b\u0435 \u0444\u0440\u0430\u0437\u044b \u0432 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u043c \u0430\u0443\u0434\u0438\u043e\u043f\u043e\u0442\u043e\u043a\u0435. openWakeWord openWakeWord \u2014 \u044d\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0432-\u0431\u0443\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0441 \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u044b\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c. \u041e\u043d\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0438 \u0444\u0440\u0430\u0437, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445. GitHub , openWakeWord \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u043c\u0438 .onnx \u0438 .tflite. \u0414\u043b\u044f Windows \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f .onnx, \u0430 \u0434\u043b\u044f Linux .tflite. \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 > pip install openwakeword, sounddevice \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 hey_jarvis \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 https://github.com/dscripka/openWakeWord/releases/tag/v0.5.1 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u0434: import numpy as np import sounddevice as sd from openwakeword.model import Model import time SAMPLE_RATE = 16000 FRAME_MS = 80 FRAME_SAMPLES = SAMPLE_RATE * FRAME_MS // 1000 # 1280 THRESHOLD = 0.5 # tune for your room COOLDOWN_SEC = 1.0 # suppress duplicate prints # load only the \u201chey jarvis\u201d model; omit arg to load all built-ins model = Model(wakeword_models=[\"./hey_jarvis_v0.1.onnx\"], vad_threshold=0.0) # set >0 to enable VAD _last_fired = 0.0 def on_audio(indata, frames, t, status): global _last_fired if status: print(status, flush=True) audio = indata.reshape(-1).astype(np.int16) # 16-bit PCM scores = model.predict(audio) # dict: {model_name: score 0..1} for name, s in scores.items(): if s >= THRESHOLD and (time.time() - _last_fired) >= COOLDOWN_SEC: print(f\"[wake] {name}: {s:.2f}\") _last_fired = time.time() if __name__ == \"__main__\": print(\"Listening at 16 kHz\u2026 Ctrl+C to exit\") with sd.InputStream( channels=1, samplerate=SAMPLE_RATE, dtype=\"int16\", blocksize=FRAME_SAMPLES, callback=on_audio ): while True: sd.sleep(1000) \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432: https://github.com/fwartner/home-assistant-wakewords-collection/tree/main/en \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 Google Colab: https://colab.research.google.com/drive/1q1oe2zOyZp7UsB3jJiQ1IFn8z5YfjwEb?usp=sharing \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 jarvis.wav Jarvis sound import os import numpy as np import sounddevice as sd from openwakeword.model import Model import time import winsound SAMPLE_RATE = 16000 FRAME_MS = 80 FRAME_SAMPLES = SAMPLE_RATE * FRAME_MS // 1000 # 1280 THRESHOLD = 0.5 COOLDOWN_SEC = 1.0 model = Model(wakeword_models=[\"./hey_jarvis_v0.1.onnx\"], vad_threshold=0.0) #[\"./hey_jarvis_v0.1.onnx\", \"./yo_bitch.onnx\"] _last_fired = 0.0 JARVIS_WAV = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"jarvis.wav\") def play_jarvis(): if os.path.isfile(JARVIS_WAV): winsound.PlaySound(JARVIS_WAV, winsound.SND_FILENAME | winsound.SND_ASYNC) else: print(f\"[warn] WAV not found: {JARVIS_WAV}\") def on_audio(indata, frames, t, status): global _last_fired if status: print(status, flush=True) audio = indata.reshape(-1).astype(np.int16) scores = model.predict(audio) for name, s in scores.items(): if s >= THRESHOLD and (time.time() - _last_fired) >= COOLDOWN_SEC: print(f\"[wake] {name}: {s:.2f}\") play_jarvis() _last_fired = time.time() if __name__ == \"__main__\": print(\"Listening at 16 kHz\u2026 Ctrl+C to exit\") with sd.InputStream( channels=1, samplerate=SAMPLE_RATE, dtype=\"int16\", blocksize=FRAME_SAMPLES, callback=on_audio ): while True: sd.sleep(1000) Jarvis sound + arduino import os import time import numpy as np import sounddevice as sd from openwakeword.model import Model import winsound import serial from serial.tools import list_ports COM_PORT = None COM_VID = \"1A86\" COM_PID = \"7523\" BAUD = 9600 SEND_BYTE = b\"1\" SEND_BYTE2 = b\"2\" def _to_int_hex(x): if isinstance(x, str): return int(x, 16) return x def com_ports_by_vid_pid(vid, pid, serial_substr=None): \"\"\"Adapted from your 0.py.\"\"\" vid = _to_int_hex(vid) pid = _to_int_hex(pid) out = [] for p in list_ports.comports(): if p.vid == vid and p.pid == pid: if serial_substr and (not p.serial_number or serial_substr not in p.serial_number): continue out.append(p.device) return out _ser = None def _open_serial(): global _ser if _ser and _ser.is_open: return _ser port_candidates = [COM_PORT] if COM_PORT else com_ports_by_vid_pid(COM_VID, COM_PID) for port in filter(None, port_candidates): try: _ser = serial.Serial(port, BAUD, timeout=0) print(f\"[serial] connected {port} @ {BAUD}\") return _ser except Exception as e: print(f\"[serial] open failed on {port}: {e}\") print(\"[serial] no port\") _ser = None return None def send_one(): s = _open_serial() if not s: return try: s.write(SEND_BYTE) print(\"[serial] sent 1\") time.sleep(2) s.write(SEND_BYTE2) s.flush() print(\"[serial] sent 2\") except Exception as e: print(f\"[serial] write error: {e}\") try: s.close() except: pass SAMPLE_RATE = 16000 FRAME_MS = 80 FRAME_SAMPLES = SAMPLE_RATE * FRAME_MS // 1000 THRESHOLD = 0.5 COOLDOWN_SEC = 1.0 model = Model(wakeword_models=[\"./hey_jarvis_v0.1.onnx\"], vad_threshold=0.0) _last_fired = 0.0 JARVIS_WAV = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"jarvis.wav\") def play_jarvis(): if os.path.isfile(JARVIS_WAV): winsound.PlaySound(JARVIS_WAV, winsound.SND_FILENAME | winsound.SND_ASYNC) else: print(f\"[warn] WAV not found: {JARVIS_WAV}\") def on_audio(indata, frames, t, status): global _last_fired if status: print(status, flush=True) audio = indata.reshape(-1).astype(np.int16) scores = model.predict(audio) for name, s in scores.items(): if s >= THRESHOLD and (time.time() - _last_fired) >= COOLDOWN_SEC: print(f\"[wake] {name}: {s:.2f}\") # Only act on \"jarvis\" wakewords if \"jarvis\" in str(name).lower(): play_jarvis() send_one() _last_fired = time.time() if __name__ == \"__main__\": _open_serial() # try early; will retry on demand print(\"Listening at 16 kHz\u2026 Ctrl+C to exit\") with sd.InputStream( channels=1, samplerate=SAMPLE_RATE, dtype=\"int16\", blocksize=FRAME_SAMPLES, callback=on_audio ): while True: sd.sleep(1000)","title":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432"},{"location":"KWS/#_1","text":"\u041f\u043e\u0438\u0441\u043a \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432 \u0438\u043b\u0438 Keyword spotting (KWS) \u2014 \u044d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0438\u043b\u0438 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043d\u044b\u0435 \u0444\u0440\u0430\u0437\u044b \u0432 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u043c \u0430\u0443\u0434\u0438\u043e\u043f\u043e\u0442\u043e\u043a\u0435.","title":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432"},{"location":"KWS/#openwakeword","text":"openWakeWord \u2014 \u044d\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0432-\u0431\u0443\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0441 \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u044b\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c. \u041e\u043d\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0438 \u0444\u0440\u0430\u0437, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445. GitHub , openWakeWord \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u043c\u0438 .onnx \u0438 .tflite. \u0414\u043b\u044f Windows \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f .onnx, \u0430 \u0434\u043b\u044f Linux .tflite.","title":"openWakeWord"},{"location":"KWS/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 > pip install openwakeword, sounddevice \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 hey_jarvis \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 https://github.com/dscripka/openWakeWord/releases/tag/v0.5.1 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u0434: import numpy as np import sounddevice as sd from openwakeword.model import Model import time SAMPLE_RATE = 16000 FRAME_MS = 80 FRAME_SAMPLES = SAMPLE_RATE * FRAME_MS // 1000 # 1280 THRESHOLD = 0.5 # tune for your room COOLDOWN_SEC = 1.0 # suppress duplicate prints # load only the \u201chey jarvis\u201d model; omit arg to load all built-ins model = Model(wakeword_models=[\"./hey_jarvis_v0.1.onnx\"], vad_threshold=0.0) # set >0 to enable VAD _last_fired = 0.0 def on_audio(indata, frames, t, status): global _last_fired if status: print(status, flush=True) audio = indata.reshape(-1).astype(np.int16) # 16-bit PCM scores = model.predict(audio) # dict: {model_name: score 0..1} for name, s in scores.items(): if s >= THRESHOLD and (time.time() - _last_fired) >= COOLDOWN_SEC: print(f\"[wake] {name}: {s:.2f}\") _last_fired = time.time() if __name__ == \"__main__\": print(\"Listening at 16 kHz\u2026 Ctrl+C to exit\") with sd.InputStream( channels=1, samplerate=SAMPLE_RATE, dtype=\"int16\", blocksize=FRAME_SAMPLES, callback=on_audio ): while True: sd.sleep(1000) \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432: https://github.com/fwartner/home-assistant-wakewords-collection/tree/main/en \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 Google Colab: https://colab.research.google.com/drive/1q1oe2zOyZp7UsB3jJiQ1IFn8z5YfjwEb?usp=sharing","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f"},{"location":"KWS/#_3","text":"\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 jarvis.wav Jarvis sound import os import numpy as np import sounddevice as sd from openwakeword.model import Model import time import winsound SAMPLE_RATE = 16000 FRAME_MS = 80 FRAME_SAMPLES = SAMPLE_RATE * FRAME_MS // 1000 # 1280 THRESHOLD = 0.5 COOLDOWN_SEC = 1.0 model = Model(wakeword_models=[\"./hey_jarvis_v0.1.onnx\"], vad_threshold=0.0) #[\"./hey_jarvis_v0.1.onnx\", \"./yo_bitch.onnx\"] _last_fired = 0.0 JARVIS_WAV = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"jarvis.wav\") def play_jarvis(): if os.path.isfile(JARVIS_WAV): winsound.PlaySound(JARVIS_WAV, winsound.SND_FILENAME | winsound.SND_ASYNC) else: print(f\"[warn] WAV not found: {JARVIS_WAV}\") def on_audio(indata, frames, t, status): global _last_fired if status: print(status, flush=True) audio = indata.reshape(-1).astype(np.int16) scores = model.predict(audio) for name, s in scores.items(): if s >= THRESHOLD and (time.time() - _last_fired) >= COOLDOWN_SEC: print(f\"[wake] {name}: {s:.2f}\") play_jarvis() _last_fired = time.time() if __name__ == \"__main__\": print(\"Listening at 16 kHz\u2026 Ctrl+C to exit\") with sd.InputStream( channels=1, samplerate=SAMPLE_RATE, dtype=\"int16\", blocksize=FRAME_SAMPLES, callback=on_audio ): while True: sd.sleep(1000) Jarvis sound + arduino import os import time import numpy as np import sounddevice as sd from openwakeword.model import Model import winsound import serial from serial.tools import list_ports COM_PORT = None COM_VID = \"1A86\" COM_PID = \"7523\" BAUD = 9600 SEND_BYTE = b\"1\" SEND_BYTE2 = b\"2\" def _to_int_hex(x): if isinstance(x, str): return int(x, 16) return x def com_ports_by_vid_pid(vid, pid, serial_substr=None): \"\"\"Adapted from your 0.py.\"\"\" vid = _to_int_hex(vid) pid = _to_int_hex(pid) out = [] for p in list_ports.comports(): if p.vid == vid and p.pid == pid: if serial_substr and (not p.serial_number or serial_substr not in p.serial_number): continue out.append(p.device) return out _ser = None def _open_serial(): global _ser if _ser and _ser.is_open: return _ser port_candidates = [COM_PORT] if COM_PORT else com_ports_by_vid_pid(COM_VID, COM_PID) for port in filter(None, port_candidates): try: _ser = serial.Serial(port, BAUD, timeout=0) print(f\"[serial] connected {port} @ {BAUD}\") return _ser except Exception as e: print(f\"[serial] open failed on {port}: {e}\") print(\"[serial] no port\") _ser = None return None def send_one(): s = _open_serial() if not s: return try: s.write(SEND_BYTE) print(\"[serial] sent 1\") time.sleep(2) s.write(SEND_BYTE2) s.flush() print(\"[serial] sent 2\") except Exception as e: print(f\"[serial] write error: {e}\") try: s.close() except: pass SAMPLE_RATE = 16000 FRAME_MS = 80 FRAME_SAMPLES = SAMPLE_RATE * FRAME_MS // 1000 THRESHOLD = 0.5 COOLDOWN_SEC = 1.0 model = Model(wakeword_models=[\"./hey_jarvis_v0.1.onnx\"], vad_threshold=0.0) _last_fired = 0.0 JARVIS_WAV = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"jarvis.wav\") def play_jarvis(): if os.path.isfile(JARVIS_WAV): winsound.PlaySound(JARVIS_WAV, winsound.SND_FILENAME | winsound.SND_ASYNC) else: print(f\"[warn] WAV not found: {JARVIS_WAV}\") def on_audio(indata, frames, t, status): global _last_fired if status: print(status, flush=True) audio = indata.reshape(-1).astype(np.int16) scores = model.predict(audio) for name, s in scores.items(): if s >= THRESHOLD and (time.time() - _last_fired) >= COOLDOWN_SEC: print(f\"[wake] {name}: {s:.2f}\") # Only act on \"jarvis\" wakewords if \"jarvis\" in str(name).lower(): play_jarvis() send_one() _last_fired = time.time() if __name__ == \"__main__\": _open_serial() # try early; will retry on demand print(\"Listening at 16 kHz\u2026 Ctrl+C to exit\") with sd.InputStream( channels=1, samplerate=SAMPLE_RATE, dtype=\"int16\", blocksize=FRAME_SAMPLES, callback=on_audio ): while True: sd.sleep(1000)","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"assistants/","text":"\u0418\u0418 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0438 \u0418\u0418 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0438 \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442 \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0421\u0430\u0439\u0442 \u0441\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 https://lmarena.ai/ \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f https://lmarena.ai/leaderboard . \u0415\u0449\u0435 \u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f https://scale.com/leaderboard \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0418\u0418 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0438: Name iOS Android \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 ChatGPT (OpenAI) Yes Yes \u0421\u0430\u043c\u044b\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Perplexity Yes Yes DeepSeek Yes Yes Qwen AI (Alibaba) Yes Yes Claude (Anthropic) Yes Yes Gemini (Google) Yes Yes GitHub Copilot (Free) Via GitHub Mobile Via GitHub Mobile Microsoft Copilot Yes Yes Grok (xAI) Yes Yes Meta AI (xAI) Yes Yes Mistral AI Yes Yes Windsurf No No \u041d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u041a\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043d\u0435 Continue.dev No No \u041f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f IDE Cursor No No \u0420\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u043a\u043e\u0434\u0430 Amazon Q Developer No No Qodo No No GPT4All No No \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043e\u0444\u0444\u043b\u0430\u0439\u043d Tabby No No Code GPT No No \u041f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f IDE ruGPT No No \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041f\u043b\u0430\u0442\u043d\u043e\u0435. higgesfield No No \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0411\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a.","title":"\u0418\u0418 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0438"},{"location":"assistants/#_1","text":"\u0418\u0418 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0438 \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442 \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0421\u0430\u0439\u0442 \u0441\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 https://lmarena.ai/ \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f https://lmarena.ai/leaderboard . \u0415\u0449\u0435 \u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f https://scale.com/leaderboard","title":"\u0418\u0418 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0438"},{"location":"assistants/#_2","text":"Name iOS Android \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 ChatGPT (OpenAI) Yes Yes \u0421\u0430\u043c\u044b\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Perplexity Yes Yes DeepSeek Yes Yes Qwen AI (Alibaba) Yes Yes Claude (Anthropic) Yes Yes Gemini (Google) Yes Yes GitHub Copilot (Free) Via GitHub Mobile Via GitHub Mobile Microsoft Copilot Yes Yes Grok (xAI) Yes Yes Meta AI (xAI) Yes Yes Mistral AI Yes Yes Windsurf No No \u041d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u041a\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043d\u0435 Continue.dev No No \u041f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f IDE Cursor No No \u0420\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u043a\u043e\u0434\u0430 Amazon Q Developer No No Qodo No No GPT4All No No \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043e\u0444\u0444\u043b\u0430\u0439\u043d Tabby No No Code GPT No No \u041f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f IDE ruGPT No No \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041f\u043b\u0430\u0442\u043d\u043e\u0435. higgesfield No No \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0411\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a.","title":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0418\u0418 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0438:"},{"location":"cams/","text":"\u0418\u0418\u2011\u043a\u0430\u043c\u0435\u0440\u044b \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0433\u043e\u0434\u044b \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u043a\u0430\u043c\u0435\u0440\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 \u0438 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f. \u0422\u0430\u043a\u0438\u0435 \u0418\u0418\u2011\u043a\u0430\u043c\u0435\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446, \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0441\u0446\u0435\u043d \u0431\u0435\u0437 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430. ESP32\u2011CAM \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. ESP32\u2011CAM \u2014 \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u043e\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 ESP32 \u0441 \u043a\u0430\u043c\u0435\u0440\u043e\u0439 OV2640. \u041c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 USB\u2011\u0440\u0430\u0437\u044a\u0451\u043c\u0430, \u0437\u0430\u0442\u043e \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d \u0441\u043b\u043e\u0442\u043e\u043c microSD \u0438 \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f Wi\u2011Fi\u2011\u043a\u0430\u043c\u0435\u0440\u0430. \u0423\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 802.11b/g/n, \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 520\u041a\u0411 SRAM, 4\u041c\u0411 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 PSRAM \u0438 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u0446\u0430. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u041c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b UART, SPI, I\u00b2C, PWM \u0438 ADC. \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e Wi\u2011Fi, \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0445 \u043d\u0430 microSD\u2011\u043a\u0430\u0440\u0442\u0435, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0436\u0438\u043c\u044b \u0441\u043d\u0430 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u0438\u0432\u043a\u0438 \u043f\u043e OTA. \u0421\u0441\u044b\u043b\u043a\u0438 : AlexGyver https://alexgyver.ru/lessons/esp32-cam-board/ ESP32-CAM: \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f https://habr.com/ru/articles/951838/ \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c RandomNerdTutorials . GitHub https://github.com/espressif/esp32-camera Pixy(Pixy2) \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. Pixy (CMUcam5)\u2014 \u043a\u0430\u043c\u0435\u0440\u0430 \u0441 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043d\u044b\u043c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435\u043c \u0446\u0432\u0435\u0442\u0430 \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0412\u0435\u0440\u0441\u0438\u044f Pixy2 \u0441\u0442\u0430\u043b\u0430 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0435\u0435: \u043e\u043d\u0430 \u0443\u043c\u0435\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043b\u0438\u043d\u0438\u0438 \u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u0451\u0441\u0442\u043a\u0438 \u0434\u043b\u044f \u0440\u043e\u0431\u043e\u0442\u043e\u0432\u2011\u043b\u0438\u043d\u0435\u0439\u0449\u0438\u043a\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u0443 60\u043a/\u0441, \u0438 \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0430 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u0441\u0432\u0435\u0442\u0430. \u041a\u0430\u043c\u0435\u0440\u0430 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u00ab\u0432\u0438\u0434\u0435\u0442\u044c\u00bb \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u0446\u0432\u0435\u0442\u0443, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. Pixy2 \u0445\u0440\u0430\u043d\u0438\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f Arduino, LEGOMindstormsEV3 \u0438 RaspberryPi; \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b SPI, I\u00b2C, UART \u0438 USB; \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\u043c\u0438 \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 PixyMon \u043d\u0430Windows/Mac/Linux. \u0421\u0441\u044b\u043b\u043a\u0438 : \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u044b \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 Pixycam . \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u043e\u043f\u0438\u0441\u0430\u043d \u0432 Quick\u2011StartGuide forPixy2 : \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 PixyMon, \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a Arduino \u0438\u043b\u0438 RaspberryPi. HuskyLens \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. HuskyLens \u043e\u0442 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 DFRobot \u2014 \u043a\u0430\u043c\u0435\u0440\u0430 \u0441 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043e\u043c KendryteK210 \u0438 2\u2011\u0434\u044e\u0439\u043c\u043e\u0432\u044b\u043c IPS\u2011\u044d\u043a\u0440\u0430\u043d\u043e\u043c. \u041e\u043d\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u0435\u043c\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 (\u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0446, \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430 \u043b\u0438\u043d\u0438\u0435\u0439, \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u0430, \u0447\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u043e\u0432 \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432). \u041a\u0430\u043c\u0435\u0440\u0430 \u0443\u0447\u0438\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u043d\u0430\u0436\u0430\u0442\u0438\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e UART \u0438\u043b\u0438 I\u00b2C \u0432 Arduino \u0438\u043b\u0438 micro:bit. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0423\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043e\u0441\u043d\u0430\u0449\u0435\u043d\u043e 2\u2011\u043c\u0435\u0433\u0430\u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u0435\u043d\u0441\u043e\u0440\u043e\u043c OV2640/GC0328, 8\u041c\u0411 \u043f\u0430\u043c\u044f\u0442\u0438 PSRAM/Flash, \u0434\u0438\u0441\u043f\u043b\u0435\u0435\u043c 320\u00d7240px \u0438 \u043a\u043d\u043e\u043f\u043a\u0430\u043c\u0438 \u00ab\u0424\u0443\u043d\u043a\u0446\u0438\u044f\u00bb \u0438 \u00ab\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u00bb \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0436\u0438\u043c\u043e\u0432 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041f\u0438\u0442\u0430\u043d\u0438\u0435 3,3\u20135\u0412, \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b UART/I\u00b2C, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u0438\u0432\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 USB. \u0421\u0441\u044b\u043b\u043a\u0438 : \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 \u0432\u0438\u043a\u0438DFRobot: HuskyLens V1.0 SKUSEN0305/SEN0336 . OpenMVCam \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. OpenMV Cam \u2014 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043d\u0430\u044f \u043a\u0430\u043c\u0435\u0440\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u00abArduino \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f\u00bb: \u043a\u0430\u043c\u0435\u0440\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043d\u0430 MicroPython \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438 \u0446\u0432\u0435\u0442\u043e\u0432. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412 \u0432\u0435\u0440\u0441\u0438\u0438 OpenMVRT1062 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440 ARMCortex\u2011M7 600\u041c\u0413\u0446, \u0441\u0435\u043d\u0441\u043e\u0440 OV5640 (5\u041c\u041f), 32\u041c\u0411 SDRAM, 1\u041c\u0411 SRAM \u0438 16\u041c\u0411 Flash; \u0435\u0441\u0442\u044c \u0441\u043b\u043e\u0442 microSD (25\u041c\u0411/\u0441), Wi\u2011Fi802.11a/b/g/n, Bluetooth5.1, Ethernet 10/100\u041c\u0431\u0438\u0442/\u0441 \u0438 \u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u0440.\u041a\u0430\u043c\u0435\u0440\u044b OpenMV \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 IDE \u043f\u043e\u0434 Windows/Mac/Linux. \u0421\u0441\u044b\u043b\u043a\u0438 : \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 openmv.io . ArduinoNiclaVision \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. NiclaVision \u2014 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u043e\u0442 Arduino \u0441 \u0434\u0432\u0443\u0445\u043c\u0435\u0433\u0430\u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u0430\u043c\u0435\u0440\u043e\u0439 GC2145, \u0434\u0432\u0443\u043c\u044f \u044f\u0434\u0440\u0430\u043c\u0438 STM32H747AII6 (Cortex\u2011M7\u0434\u043e480\u041c\u0413\u0446 \u0438 Cortex\u2011M4\u0434\u043e240\u041c\u0413\u0446) \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u0442\u0447\u0438\u043a\u0430\u043c\u0438: \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d, \u0434\u0430\u0442\u0447\u0438\u043a \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f, 6\u2011\u043e\u0441\u0435\u0432\u043e\u0439 IMU. \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f Wi\u2011Fi \u0438 BluetoothLE \u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0431\u043b\u0430\u043a\u043e. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0423\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 MicroPython, \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u043e \u0441\u043b\u043e\u0442\u043e\u043c microSD, \u043c\u043e\u0436\u0435\u0442 \u043f\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u0439\u043d\u044b\u0435 \u043f\u043e\u0440\u0442\u044b \u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0447\u0435\u0440\u0435\u0437 ArduinoIDE, \u0442\u0430\u043a \u0438 \u0447\u0435\u0440\u0435\u0437 OpenMVIDE. \u0421\u0441\u044b\u043b\u043a\u0438 : \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 Arduino . ESP32\u2011S3\u2011EYE \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. ESP32\u2011S3\u2011EYE\u2014 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f AI\u2011\u043f\u043b\u0430\u0442\u0430 \u043e\u0442 Espressif, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 SoC ESP32\u2011S3 \u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435 ESP\u2011WHO.\u041e\u043d\u0430 \u043e\u0441\u043d\u0430\u0449\u0435\u043d\u0430 2\u2011\u043c\u0435\u0433\u0430\u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u0430\u043c\u0435\u0440\u043e\u0439, LCD\u2011\u0434\u0438\u0441\u043f\u043b\u0435\u0435\u043c \u0438 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d\u043e\u043c.\u041c\u043e\u0434\u0443\u043b\u044c \u0438\u043c\u0435\u0435\u0442 8\u041c\u0411 OctalPSRAM \u0438 8\u041c\u0411 \u0444\u043b\u0435\u0448\u2011\u043f\u0430\u043c\u044f\u0442\u0438; \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e Wi\u2011Fi \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 Micro\u2011USB. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f \u0438 \u0430\u0443\u0434\u0438\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0434\u0435\u043c\u043e\u2011\u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u0441\u044b\u043b\u043a\u0438 : \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u044b \u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u044b \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 Espressif: ESP32\u2011S3\u2011EYE Overview .","title":"\u0418\u0418 \u043a\u0430\u043c\u0435\u0440\u044b"},{"location":"cams/#_1","text":"\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0433\u043e\u0434\u044b \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u043a\u0430\u043c\u0435\u0440\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 \u0438 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f. \u0422\u0430\u043a\u0438\u0435 \u0418\u0418\u2011\u043a\u0430\u043c\u0435\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446, \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0441\u0446\u0435\u043d \u0431\u0435\u0437 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430.","title":"\u0418\u0418\u2011\u043a\u0430\u043c\u0435\u0440\u044b"},{"location":"cams/#esp32cam","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. ESP32\u2011CAM \u2014 \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u043e\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 ESP32 \u0441 \u043a\u0430\u043c\u0435\u0440\u043e\u0439 OV2640. \u041c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 USB\u2011\u0440\u0430\u0437\u044a\u0451\u043c\u0430, \u0437\u0430\u0442\u043e \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d \u0441\u043b\u043e\u0442\u043e\u043c microSD \u0438 \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f Wi\u2011Fi\u2011\u043a\u0430\u043c\u0435\u0440\u0430. \u0423\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 802.11b/g/n, \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 520\u041a\u0411 SRAM, 4\u041c\u0411 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 PSRAM \u0438 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u0446\u0430. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u041c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b UART, SPI, I\u00b2C, PWM \u0438 ADC. \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e Wi\u2011Fi, \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0445 \u043d\u0430 microSD\u2011\u043a\u0430\u0440\u0442\u0435, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0436\u0438\u043c\u044b \u0441\u043d\u0430 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u0438\u0432\u043a\u0438 \u043f\u043e OTA. \u0421\u0441\u044b\u043b\u043a\u0438 : AlexGyver https://alexgyver.ru/lessons/esp32-cam-board/ ESP32-CAM: \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f https://habr.com/ru/articles/951838/ \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c RandomNerdTutorials . GitHub https://github.com/espressif/esp32-camera","title":"ESP32\u2011CAM"},{"location":"cams/#pixypixy2","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. Pixy (CMUcam5)\u2014 \u043a\u0430\u043c\u0435\u0440\u0430 \u0441 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043d\u044b\u043c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435\u043c \u0446\u0432\u0435\u0442\u0430 \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0412\u0435\u0440\u0441\u0438\u044f Pixy2 \u0441\u0442\u0430\u043b\u0430 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0435\u0435: \u043e\u043d\u0430 \u0443\u043c\u0435\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043b\u0438\u043d\u0438\u0438 \u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u0451\u0441\u0442\u043a\u0438 \u0434\u043b\u044f \u0440\u043e\u0431\u043e\u0442\u043e\u0432\u2011\u043b\u0438\u043d\u0435\u0439\u0449\u0438\u043a\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u0443 60\u043a/\u0441, \u0438 \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0430 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u0441\u0432\u0435\u0442\u0430. \u041a\u0430\u043c\u0435\u0440\u0430 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u00ab\u0432\u0438\u0434\u0435\u0442\u044c\u00bb \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u0446\u0432\u0435\u0442\u0443, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. Pixy2 \u0445\u0440\u0430\u043d\u0438\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f Arduino, LEGOMindstormsEV3 \u0438 RaspberryPi; \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b SPI, I\u00b2C, UART \u0438 USB; \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\u043c\u0438 \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 PixyMon \u043d\u0430Windows/Mac/Linux. \u0421\u0441\u044b\u043b\u043a\u0438 : \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u044b \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 Pixycam . \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u043e\u043f\u0438\u0441\u0430\u043d \u0432 Quick\u2011StartGuide forPixy2 : \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 PixyMon, \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a Arduino \u0438\u043b\u0438 RaspberryPi.","title":"Pixy(Pixy2)"},{"location":"cams/#huskylens","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. HuskyLens \u043e\u0442 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 DFRobot \u2014 \u043a\u0430\u043c\u0435\u0440\u0430 \u0441 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043e\u043c KendryteK210 \u0438 2\u2011\u0434\u044e\u0439\u043c\u043e\u0432\u044b\u043c IPS\u2011\u044d\u043a\u0440\u0430\u043d\u043e\u043c. \u041e\u043d\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u0435\u043c\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 (\u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0446, \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430 \u043b\u0438\u043d\u0438\u0435\u0439, \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u0430, \u0447\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u043e\u0432 \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432). \u041a\u0430\u043c\u0435\u0440\u0430 \u0443\u0447\u0438\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u043d\u0430\u0436\u0430\u0442\u0438\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e UART \u0438\u043b\u0438 I\u00b2C \u0432 Arduino \u0438\u043b\u0438 micro:bit. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0423\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043e\u0441\u043d\u0430\u0449\u0435\u043d\u043e 2\u2011\u043c\u0435\u0433\u0430\u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u0435\u043d\u0441\u043e\u0440\u043e\u043c OV2640/GC0328, 8\u041c\u0411 \u043f\u0430\u043c\u044f\u0442\u0438 PSRAM/Flash, \u0434\u0438\u0441\u043f\u043b\u0435\u0435\u043c 320\u00d7240px \u0438 \u043a\u043d\u043e\u043f\u043a\u0430\u043c\u0438 \u00ab\u0424\u0443\u043d\u043a\u0446\u0438\u044f\u00bb \u0438 \u00ab\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u00bb \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0436\u0438\u043c\u043e\u0432 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041f\u0438\u0442\u0430\u043d\u0438\u0435 3,3\u20135\u0412, \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b UART/I\u00b2C, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u0438\u0432\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 USB. \u0421\u0441\u044b\u043b\u043a\u0438 : \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 \u0432\u0438\u043a\u0438DFRobot: HuskyLens V1.0 SKUSEN0305/SEN0336 .","title":"HuskyLens"},{"location":"cams/#openmvcam","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. OpenMV Cam \u2014 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043d\u0430\u044f \u043a\u0430\u043c\u0435\u0440\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u00abArduino \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f\u00bb: \u043a\u0430\u043c\u0435\u0440\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043d\u0430 MicroPython \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438 \u0446\u0432\u0435\u0442\u043e\u0432. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412 \u0432\u0435\u0440\u0441\u0438\u0438 OpenMVRT1062 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440 ARMCortex\u2011M7 600\u041c\u0413\u0446, \u0441\u0435\u043d\u0441\u043e\u0440 OV5640 (5\u041c\u041f), 32\u041c\u0411 SDRAM, 1\u041c\u0411 SRAM \u0438 16\u041c\u0411 Flash; \u0435\u0441\u0442\u044c \u0441\u043b\u043e\u0442 microSD (25\u041c\u0411/\u0441), Wi\u2011Fi802.11a/b/g/n, Bluetooth5.1, Ethernet 10/100\u041c\u0431\u0438\u0442/\u0441 \u0438 \u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u0440.\u041a\u0430\u043c\u0435\u0440\u044b OpenMV \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 IDE \u043f\u043e\u0434 Windows/Mac/Linux. \u0421\u0441\u044b\u043b\u043a\u0438 : \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 openmv.io .","title":"OpenMVCam"},{"location":"cams/#arduinoniclavision","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. NiclaVision \u2014 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u043e\u0442 Arduino \u0441 \u0434\u0432\u0443\u0445\u043c\u0435\u0433\u0430\u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u0430\u043c\u0435\u0440\u043e\u0439 GC2145, \u0434\u0432\u0443\u043c\u044f \u044f\u0434\u0440\u0430\u043c\u0438 STM32H747AII6 (Cortex\u2011M7\u0434\u043e480\u041c\u0413\u0446 \u0438 Cortex\u2011M4\u0434\u043e240\u041c\u0413\u0446) \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u0442\u0447\u0438\u043a\u0430\u043c\u0438: \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d, \u0434\u0430\u0442\u0447\u0438\u043a \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f, 6\u2011\u043e\u0441\u0435\u0432\u043e\u0439 IMU. \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f Wi\u2011Fi \u0438 BluetoothLE \u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0431\u043b\u0430\u043a\u043e. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0423\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 MicroPython, \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u043e \u0441\u043b\u043e\u0442\u043e\u043c microSD, \u043c\u043e\u0436\u0435\u0442 \u043f\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u0439\u043d\u044b\u0435 \u043f\u043e\u0440\u0442\u044b \u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0447\u0435\u0440\u0435\u0437 ArduinoIDE, \u0442\u0430\u043a \u0438 \u0447\u0435\u0440\u0435\u0437 OpenMVIDE. \u0421\u0441\u044b\u043b\u043a\u0438 : \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 Arduino .","title":"ArduinoNiclaVision"},{"location":"cams/#esp32s3eye","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. ESP32\u2011S3\u2011EYE\u2014 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f AI\u2011\u043f\u043b\u0430\u0442\u0430 \u043e\u0442 Espressif, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 SoC ESP32\u2011S3 \u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435 ESP\u2011WHO.\u041e\u043d\u0430 \u043e\u0441\u043d\u0430\u0449\u0435\u043d\u0430 2\u2011\u043c\u0435\u0433\u0430\u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u0430\u043c\u0435\u0440\u043e\u0439, LCD\u2011\u0434\u0438\u0441\u043f\u043b\u0435\u0435\u043c \u0438 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d\u043e\u043c.\u041c\u043e\u0434\u0443\u043b\u044c \u0438\u043c\u0435\u0435\u0442 8\u041c\u0411 OctalPSRAM \u0438 8\u041c\u0411 \u0444\u043b\u0435\u0448\u2011\u043f\u0430\u043c\u044f\u0442\u0438; \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e Wi\u2011Fi \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 Micro\u2011USB. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f \u0438 \u0430\u0443\u0434\u0438\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0434\u0435\u043c\u043e\u2011\u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u0441\u044b\u043b\u043a\u0438 : \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u044b \u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u044b \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 Espressif: ESP32\u2011S3\u2011EYE Overview .","title":"ESP32\u2011S3\u2011EYE"},{"location":"face_recognition/","text":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0446 \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0446 \u2013 \u044d\u0442\u043e \u0431\u0438\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043f\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c \u0435\u0433\u043e \u043b\u0438\u0446\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430 \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b: \u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u043b\u0438\u0446. \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u043f\u0430\u043f\u043a\u0430 \u0441 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f\u043c\u0438 \u043f\u043e \u0442\u0438\u043f\u0443: ./database/person1/1.jpg, 2.jpg ./database/person2/1.jpg, 2.jpg (\u042d\u0442\u0438 \u043b\u0438\u0446\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0438\u043b\u0438 \u0432 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430) \u0414\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043b\u0438\u0446 (mediapipe, mtcnn \u0438 \u0442\u0434.) \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043b\u0438\u0446\u043e \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u0446\u0430 \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u041b\u0438\u0446\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (vector embedding) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (SFace, ArcFace \u0438 \u0442\u0434.) \u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0431\u044b\u0447\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 Cosine_similarity . \u0412\u044b\u0445\u043e\u0434\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 -1 \u0434\u043e 1. \u0427\u0435\u043c \u0432\u044b\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u0435\u043c \u043b\u0438\u0446\u0430 \u043f\u043e\u0445\u043e\u0436\u0435\u0435 \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0448\u0435 \u043f\u043e\u0440\u043e\u0433\u0430, \u0442\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d \u041d\u0415 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b: \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 InsightFace - \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u0432\u0435\u0440\u0441\u0438\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043f\u043b\u043e\u0445\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 DeepFace - \u043a\u0440\u0438\u0432\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043b\u043e\u0445\u043e \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 face_recognition - \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 Windows \u0420\u0430\u0431\u043e\u0447\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0427\u0438\u0441\u0442\u044b\u0439 OpenCV (YuNet + sface) YuNet \u2014 \u044d\u0442\u043e \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043b\u0438\u0446 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 (CNN), \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u0441\u0432\u043e\u0435\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u0440\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0438 \u043b\u0438\u0446 \u043f\u043e\u0434 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0443\u0433\u043b\u0430\u043c\u0438 \u0438 \u0441 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0442\u0438\u044f\u043c\u0438. SFace \u2014 \u044d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 OpenCV. \u042d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446. \u041e\u0431\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 OpenCV, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432\u043c\u0435\u0441\u0442\u0435. \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c python (\u043d\u0435 \u0432\u044b\u0448\u0435 3.13) \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 pip install opencv-contrib-python numpy \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c face_recognition_sface_2021dec.onnx \u0438 face_detection_yunet_2023mar.onnx \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443, \u0433\u0434\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434. (\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0417\u043e\u043e\u043f\u0430\u0440\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439 OpenCV ) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 db. \u0412\u043d\u0443\u0442\u0440\u0438 \u043d\u0435\u0451 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: db/ \u251c\u2500 Azat/ \u2502 \u2514\u2500 1.jpg \u251c\u2500 Diana \u2502 \u251c\u2500 lol.jpg \u2502 \u2514\u2500 kek.png \u2514\u2500 Obama \u251c\u2500 obama.jpg \u2514\u2500 barak.png \u041f\u0438\u0448\u0435\u043c \u043a\u043e\u0434: YuNet+SFace import os, time, cv2, numpy as np from pathlib import Path DB_PATH = \"./db\" SFACE_ONNX = \"./face_recognition_sface_2021dec.onnx\" YUNET_ONNX = \"./face_detection_yunet_2023mar.onnx\" THRESH = 0.363 recognizer = cv2.FaceRecognizerSF_create(SFACE_ONNX, \"\") detector = cv2.FaceDetectorYN_create(YUNET_ONNX, \"\", (320,320), score_threshold=0.6, nms_threshold=0.3, top_k=5000) def list_images(root): exts = (\".jpg\",\".jpeg\",\".png\",\".bmp\",\".webp\") for d in sorted(Path(root).iterdir()): if d.is_dir(): for p in d.rglob(\"*\"): if p.suffix.lower() in exts: yield d.name, str(p) def embed_from_img(img): h, w = img.shape[:2] detector.setInputSize((w, h)) ok, faces = detector.detect(img) out = [] if ok and faces is not None and len(faces): for f in faces: x, y, wb, hb = f[:4].astype(int) row = f[:14].astype(np.float32).reshape(1, 14) # box + 5 keypoints face = recognizer.alignCrop(img, row) feat = recognizer.feature(face) out.append((feat, (x, y, wb, hb))) return out gallery = {} for label, path in list_images(DB_PATH): img = cv2.imread(path) if img is None: continue fb = embed_from_img(img) if not fb: continue feat, _ = fb[0] # largest/first face per image gallery.setdefault(label, []).append(feat) labels = sorted(gallery.keys()) G = [] for k in labels: M = np.mean(np.vstack(gallery[k]), axis=0) M = M / max(np.linalg.norm(M), 1e-9) G.append(M) G = np.vstack(G).astype(np.float32) cap = cv2.VideoCapture(0, cv2.CAP_DSHOW) cv2.namedWindow(\"YuNet+SFace\", cv2.WINDOW_NORMAL) cv2.resizeWindow(\"YuNet+SFace\", 640, 480) ema_fps = 0.0 while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break t0 = time.perf_counter() fb = embed_from_img(frame) for feat, (x,y,wb,hb) in fb: q = feat / max(np.linalg.norm(feat), 1e-9) sims = (G @ q.ravel()).astype(np.float32) # cosine i = int(np.argmax(sims)); s = float(sims[i]) name = labels[i] if s >= THRESH else \"unknown\" cv2.rectangle(frame, (x,y), (x+wb, y+hb), (0,255,0), 2) cv2.putText(frame, f\"{name} ({s:.2f})\", (x, max(0,y-7)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2, cv2.LINE_AA) dt = max(time.perf_counter() - t0, 1e-6) ema_fps = (ema_fps*0.9 + 0.1*(1.0/dt)) if ema_fps else 1.0/dt cv2.putText(frame, f\"FPS: {ema_fps:.1f}\", (10,30), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255,255,255), 2) cv2.imshow(\"YuNet+SFace\", frame) cap.release(); cv2.destroyAllWindows() mediapipe + sface Mediapipe \u043a\u0430\u043a \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043b\u0438\u0446. SFace \u2014 \u044d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 OpenCV. \u042d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446. \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c python (\u043d\u0435 \u0432\u044b\u0448\u0435 3.12) \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 pip install opencv-contrib-python mediapipe numpy \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c face_recognition_sface_2021dec.onnx \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443, \u0433\u0434\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434. (\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0417\u043e\u043e\u043f\u0430\u0440\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439 OpenCV ) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 db. \u0412\u043d\u0443\u0442\u0440\u0438 \u043d\u0435\u0451 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: db/ \u251c\u2500 Azat/ \u2502 \u2514\u2500 1.jpg \u251c\u2500 Diana \u2502 \u251c\u2500 lol.jpg \u2502 \u2514\u2500 kek.png \u2514\u2500 Obama \u251c\u2500 obama.jpg \u2514\u2500 barak.png \u041f\u0438\u0448\u0435\u043c \u043a\u043e\u0434: Mediapipe+SFace import os, time, cv2, numpy as np, mediapipe as mp from pathlib import Path DB_PATH = \"./db\" SFACE_ONNX = \"./face_recognition_sface_2021dec.onnx\" THRESH = 0.363 recognizer = cv2.FaceRecognizerSF_create(SFACE_ONNX, \"\") mesh = mp.solutions.face_mesh.FaceMesh(static_image_mode=False, max_num_faces=10, refine_landmarks=True, min_detection_confidence=0.5, min_tracking_confidence=0.5) def list_images(root): #\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u043e\u0442\u043e exts = (\".jpg\",\".jpeg\",\".png\",\".bmp\",\".webp\") for d in sorted(Path(root).iterdir()): if d.is_dir(): for p in d.rglob(\"*\"): if p.suffix.lower() in exts: yield d.name, str(p) def mesh_5pts(lm, w, h): #facemesh \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 sface L = lm.landmark def px(i): return (int(L[i].x*w), int(L[i].y*h)) re = tuple(np.mean([px(33), px(133)], axis=0).astype(int)) # right eye center le = tuple(np.mean([px(263), px(362)], axis=0).astype(int)) # left eye center nt = px(1) # nose tip rmc = px(61) # right mouth corner lmc = px(291) # left mouth corner xs = [re[0], le[0], nt[0], rmc[0], lmc[0]] ys = [re[1], le[1], nt[1], rmc[1], lmc[1]] #\u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b 5 \u0442\u043e\u0447\u0435\u043a x, y = max(0, min(xs)), max(0, min(ys)) #\u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 wbb, hbb = max(xs)-x+1, max(ys)-y+1 #\u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0448\u0438\u0440\u0438\u043d\u0443 \u0438 \u0432\u044b\u0441\u043e\u0442\u0443 cx, cy = x + wbb//2, y + hbb//2 #\u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0446\u0435\u043d\u0442\u0440 scale = 1.8 nw, nh = int(wbb*scale), int(hbb*scale) #\u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 x = max(0, cx - nw//2) y = max(0, cy - nh//2) x2 = min(w-1, x + nw) y2 = min(h-1, y + nh) wbb, hbb = x2 - x, y2 - y row = np.array([[x, y, wbb, hbb, re[0], re[1], le[0], le[1], nt[0], nt[1], rmc[0], rmc[1], lmc[0], lmc[1]]], dtype=np.float32) return row, (x, y, wbb, hbb) def embed_from_img(img): #\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0434\u0440 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0432\u043b\u0435\u043d\u0438\u0435 h, w = img.shape[:2] res = mesh.process(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)) out = [] if res.multi_face_landmarks: for lm in res.multi_face_landmarks: row, (x,y,wb,hb) = mesh_5pts(lm, w, h) try: face = recognizer.alignCrop(img, row) except Exception: x2, y2 = min(w-1, x+wb), min(h-1, y+hb) face = img[y:y2, x:x2].copy() feat = recognizer.feature(face) out.append((feat, (x,y,wb,hb))) return out gallery = {} for label, path in list_images(DB_PATH): #\u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0433\u0430\u043b\u0435\u0440\u0435\u044e \u0438\u0437 \u0444\u043e\u0442\u043e \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 img = cv2.imread(path) if img is None: continue fb = embed_from_img(img) if not fb: continue feat, _ = fb[0] gallery.setdefault(label, []).append(feat) labels = sorted(gallery.keys()) G = [] for k in labels: M = np.mean(np.vstack(gallery[k]), axis=0) M = M / max(np.linalg.norm(M), 1e-9) G.append(M) G = np.vstack(G).astype(np.float32) # [N,512] cap = cv2.VideoCapture(0, cv2.CAP_DSHOW) cv2.namedWindow(\"MP+SFace\", cv2.WINDOW_NORMAL) cv2.resizeWindow(\"MP+SFace\", 640, 480) ema_fps = 0.0 while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break t0 = time.perf_counter() fb = embed_from_img(frame) for feat, (x,y,wb,hb) in fb: #\u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043b\u0438\u0446\u0430 q = feat / max(np.linalg.norm(feat), 1e-9) sims = (G @ q.ravel()).astype(np.float32) # cosine similarity i = int(np.argmax(sims)) s = float(sims[i]) name = labels[i] if s >= THRESH else \"unknown\" #\u043f\u0438\u0448\u0435\u043c \u0438\u043c\u044f \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 cv2.rectangle(frame, (x,y), (x+wb, y+hb), (0,255,0), 2) cv2.putText(frame, f\"{name} ({s:.2f})\", (x, max(0,y-7)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2, cv2.LINE_AA) dt = max(time.perf_counter() - t0, 1e-6) ema_fps = (ema_fps*0.9 + 0.1*(1.0/dt)) if ema_fps else 1.0/dt #\u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0444\u043f\u0441 cv2.putText(frame, f\"FPS: {ema_fps:.1f}\", (10,30), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255,255,255), 2) #\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0444\u043f\u0441 cv2.imshow(\"MP+SFace\", frame) #\u0432\u044b\u0432\u043e\u0434 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f cap.release(); cv2.destroyAllWindows()","title":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0446\u0430"},{"location":"face_recognition/#_1","text":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0446 \u2013 \u044d\u0442\u043e \u0431\u0438\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043f\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c \u0435\u0433\u043e \u043b\u0438\u0446\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430 \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.","title":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0446"},{"location":"face_recognition/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u043b\u0438\u0446. \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u043f\u0430\u043f\u043a\u0430 \u0441 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f\u043c\u0438 \u043f\u043e \u0442\u0438\u043f\u0443: ./database/person1/1.jpg, 2.jpg ./database/person2/1.jpg, 2.jpg (\u042d\u0442\u0438 \u043b\u0438\u0446\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0438\u043b\u0438 \u0432 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430) \u0414\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043b\u0438\u0446 (mediapipe, mtcnn \u0438 \u0442\u0434.) \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043b\u0438\u0446\u043e \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u0446\u0430 \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u041b\u0438\u0446\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (vector embedding) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (SFace, ArcFace \u0438 \u0442\u0434.) \u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0431\u044b\u0447\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 Cosine_similarity . \u0412\u044b\u0445\u043e\u0434\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 -1 \u0434\u043e 1. \u0427\u0435\u043c \u0432\u044b\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u0435\u043c \u043b\u0438\u0446\u0430 \u043f\u043e\u0445\u043e\u0436\u0435\u0435 \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0448\u0435 \u043f\u043e\u0440\u043e\u0433\u0430, \u0442\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d","title":"\u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"face_recognition/#_3","text":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 InsightFace - \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u0432\u0435\u0440\u0441\u0438\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043f\u043b\u043e\u0445\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 DeepFace - \u043a\u0440\u0438\u0432\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u044f\u0436\u0435\u043b\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043b\u043e\u0445\u043e \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 face_recognition - \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 Windows","title":"\u041d\u0415 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b:"},{"location":"face_recognition/#_4","text":"","title":"\u0420\u0430\u0431\u043e\u0447\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b"},{"location":"face_recognition/#opencv-yunet-sface","text":"YuNet \u2014 \u044d\u0442\u043e \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043b\u0438\u0446 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 (CNN), \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u0441\u0432\u043e\u0435\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u0440\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0438 \u043b\u0438\u0446 \u043f\u043e\u0434 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0443\u0433\u043b\u0430\u043c\u0438 \u0438 \u0441 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0442\u0438\u044f\u043c\u0438. SFace \u2014 \u044d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 OpenCV. \u042d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446. \u041e\u0431\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 OpenCV, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432\u043c\u0435\u0441\u0442\u0435. \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c python (\u043d\u0435 \u0432\u044b\u0448\u0435 3.13) \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 pip install opencv-contrib-python numpy \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c face_recognition_sface_2021dec.onnx \u0438 face_detection_yunet_2023mar.onnx \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443, \u0433\u0434\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434. (\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0417\u043e\u043e\u043f\u0430\u0440\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439 OpenCV ) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 db. \u0412\u043d\u0443\u0442\u0440\u0438 \u043d\u0435\u0451 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: db/ \u251c\u2500 Azat/ \u2502 \u2514\u2500 1.jpg \u251c\u2500 Diana \u2502 \u251c\u2500 lol.jpg \u2502 \u2514\u2500 kek.png \u2514\u2500 Obama \u251c\u2500 obama.jpg \u2514\u2500 barak.png \u041f\u0438\u0448\u0435\u043c \u043a\u043e\u0434: YuNet+SFace import os, time, cv2, numpy as np from pathlib import Path DB_PATH = \"./db\" SFACE_ONNX = \"./face_recognition_sface_2021dec.onnx\" YUNET_ONNX = \"./face_detection_yunet_2023mar.onnx\" THRESH = 0.363 recognizer = cv2.FaceRecognizerSF_create(SFACE_ONNX, \"\") detector = cv2.FaceDetectorYN_create(YUNET_ONNX, \"\", (320,320), score_threshold=0.6, nms_threshold=0.3, top_k=5000) def list_images(root): exts = (\".jpg\",\".jpeg\",\".png\",\".bmp\",\".webp\") for d in sorted(Path(root).iterdir()): if d.is_dir(): for p in d.rglob(\"*\"): if p.suffix.lower() in exts: yield d.name, str(p) def embed_from_img(img): h, w = img.shape[:2] detector.setInputSize((w, h)) ok, faces = detector.detect(img) out = [] if ok and faces is not None and len(faces): for f in faces: x, y, wb, hb = f[:4].astype(int) row = f[:14].astype(np.float32).reshape(1, 14) # box + 5 keypoints face = recognizer.alignCrop(img, row) feat = recognizer.feature(face) out.append((feat, (x, y, wb, hb))) return out gallery = {} for label, path in list_images(DB_PATH): img = cv2.imread(path) if img is None: continue fb = embed_from_img(img) if not fb: continue feat, _ = fb[0] # largest/first face per image gallery.setdefault(label, []).append(feat) labels = sorted(gallery.keys()) G = [] for k in labels: M = np.mean(np.vstack(gallery[k]), axis=0) M = M / max(np.linalg.norm(M), 1e-9) G.append(M) G = np.vstack(G).astype(np.float32) cap = cv2.VideoCapture(0, cv2.CAP_DSHOW) cv2.namedWindow(\"YuNet+SFace\", cv2.WINDOW_NORMAL) cv2.resizeWindow(\"YuNet+SFace\", 640, 480) ema_fps = 0.0 while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break t0 = time.perf_counter() fb = embed_from_img(frame) for feat, (x,y,wb,hb) in fb: q = feat / max(np.linalg.norm(feat), 1e-9) sims = (G @ q.ravel()).astype(np.float32) # cosine i = int(np.argmax(sims)); s = float(sims[i]) name = labels[i] if s >= THRESH else \"unknown\" cv2.rectangle(frame, (x,y), (x+wb, y+hb), (0,255,0), 2) cv2.putText(frame, f\"{name} ({s:.2f})\", (x, max(0,y-7)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2, cv2.LINE_AA) dt = max(time.perf_counter() - t0, 1e-6) ema_fps = (ema_fps*0.9 + 0.1*(1.0/dt)) if ema_fps else 1.0/dt cv2.putText(frame, f\"FPS: {ema_fps:.1f}\", (10,30), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255,255,255), 2) cv2.imshow(\"YuNet+SFace\", frame) cap.release(); cv2.destroyAllWindows()","title":"\u0427\u0438\u0441\u0442\u044b\u0439 OpenCV (YuNet + sface)"},{"location":"face_recognition/#mediapipe-sface","text":"Mediapipe \u043a\u0430\u043a \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043b\u0438\u0446. SFace \u2014 \u044d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 OpenCV. \u042d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u0446. \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c python (\u043d\u0435 \u0432\u044b\u0448\u0435 3.12) \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 pip install opencv-contrib-python mediapipe numpy \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c face_recognition_sface_2021dec.onnx \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443, \u0433\u0434\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434. (\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0417\u043e\u043e\u043f\u0430\u0440\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439 OpenCV ) \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 db. \u0412\u043d\u0443\u0442\u0440\u0438 \u043d\u0435\u0451 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: db/ \u251c\u2500 Azat/ \u2502 \u2514\u2500 1.jpg \u251c\u2500 Diana \u2502 \u251c\u2500 lol.jpg \u2502 \u2514\u2500 kek.png \u2514\u2500 Obama \u251c\u2500 obama.jpg \u2514\u2500 barak.png \u041f\u0438\u0448\u0435\u043c \u043a\u043e\u0434: Mediapipe+SFace import os, time, cv2, numpy as np, mediapipe as mp from pathlib import Path DB_PATH = \"./db\" SFACE_ONNX = \"./face_recognition_sface_2021dec.onnx\" THRESH = 0.363 recognizer = cv2.FaceRecognizerSF_create(SFACE_ONNX, \"\") mesh = mp.solutions.face_mesh.FaceMesh(static_image_mode=False, max_num_faces=10, refine_landmarks=True, min_detection_confidence=0.5, min_tracking_confidence=0.5) def list_images(root): #\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u043e\u0442\u043e exts = (\".jpg\",\".jpeg\",\".png\",\".bmp\",\".webp\") for d in sorted(Path(root).iterdir()): if d.is_dir(): for p in d.rglob(\"*\"): if p.suffix.lower() in exts: yield d.name, str(p) def mesh_5pts(lm, w, h): #facemesh \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 sface L = lm.landmark def px(i): return (int(L[i].x*w), int(L[i].y*h)) re = tuple(np.mean([px(33), px(133)], axis=0).astype(int)) # right eye center le = tuple(np.mean([px(263), px(362)], axis=0).astype(int)) # left eye center nt = px(1) # nose tip rmc = px(61) # right mouth corner lmc = px(291) # left mouth corner xs = [re[0], le[0], nt[0], rmc[0], lmc[0]] ys = [re[1], le[1], nt[1], rmc[1], lmc[1]] #\u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b 5 \u0442\u043e\u0447\u0435\u043a x, y = max(0, min(xs)), max(0, min(ys)) #\u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 wbb, hbb = max(xs)-x+1, max(ys)-y+1 #\u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0448\u0438\u0440\u0438\u043d\u0443 \u0438 \u0432\u044b\u0441\u043e\u0442\u0443 cx, cy = x + wbb//2, y + hbb//2 #\u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0446\u0435\u043d\u0442\u0440 scale = 1.8 nw, nh = int(wbb*scale), int(hbb*scale) #\u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 x = max(0, cx - nw//2) y = max(0, cy - nh//2) x2 = min(w-1, x + nw) y2 = min(h-1, y + nh) wbb, hbb = x2 - x, y2 - y row = np.array([[x, y, wbb, hbb, re[0], re[1], le[0], le[1], nt[0], nt[1], rmc[0], rmc[1], lmc[0], lmc[1]]], dtype=np.float32) return row, (x, y, wbb, hbb) def embed_from_img(img): #\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0434\u0440 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0432\u043b\u0435\u043d\u0438\u0435 h, w = img.shape[:2] res = mesh.process(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)) out = [] if res.multi_face_landmarks: for lm in res.multi_face_landmarks: row, (x,y,wb,hb) = mesh_5pts(lm, w, h) try: face = recognizer.alignCrop(img, row) except Exception: x2, y2 = min(w-1, x+wb), min(h-1, y+hb) face = img[y:y2, x:x2].copy() feat = recognizer.feature(face) out.append((feat, (x,y,wb,hb))) return out gallery = {} for label, path in list_images(DB_PATH): #\u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0433\u0430\u043b\u0435\u0440\u0435\u044e \u0438\u0437 \u0444\u043e\u0442\u043e \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 img = cv2.imread(path) if img is None: continue fb = embed_from_img(img) if not fb: continue feat, _ = fb[0] gallery.setdefault(label, []).append(feat) labels = sorted(gallery.keys()) G = [] for k in labels: M = np.mean(np.vstack(gallery[k]), axis=0) M = M / max(np.linalg.norm(M), 1e-9) G.append(M) G = np.vstack(G).astype(np.float32) # [N,512] cap = cv2.VideoCapture(0, cv2.CAP_DSHOW) cv2.namedWindow(\"MP+SFace\", cv2.WINDOW_NORMAL) cv2.resizeWindow(\"MP+SFace\", 640, 480) ema_fps = 0.0 while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break t0 = time.perf_counter() fb = embed_from_img(frame) for feat, (x,y,wb,hb) in fb: #\u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043b\u0438\u0446\u0430 q = feat / max(np.linalg.norm(feat), 1e-9) sims = (G @ q.ravel()).astype(np.float32) # cosine similarity i = int(np.argmax(sims)) s = float(sims[i]) name = labels[i] if s >= THRESH else \"unknown\" #\u043f\u0438\u0448\u0435\u043c \u0438\u043c\u044f \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 cv2.rectangle(frame, (x,y), (x+wb, y+hb), (0,255,0), 2) cv2.putText(frame, f\"{name} ({s:.2f})\", (x, max(0,y-7)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2, cv2.LINE_AA) dt = max(time.perf_counter() - t0, 1e-6) ema_fps = (ema_fps*0.9 + 0.1*(1.0/dt)) if ema_fps else 1.0/dt #\u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0444\u043f\u0441 cv2.putText(frame, f\"FPS: {ema_fps:.1f}\", (10,30), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255,255,255), 2) #\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0444\u043f\u0441 cv2.imshow(\"MP+SFace\", frame) #\u0432\u044b\u0432\u043e\u0434 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f cap.release(); cv2.destroyAllWindows()","title":"mediapipe + sface"},{"location":"hardware/","text":"\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f 1. \u0418\u043c\u0438\u0442\u0430\u0446\u0438\u044f \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043b\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0418\u0418 \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435. \u0414\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043a\u0430\u043c\u0435\u0440\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 (\u0438\u043b\u0438 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d). \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u0442\u0430\u043f\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0438\u0445/\u043e\u0431\u043b\u0430\u0441\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043e\u0432. \u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043e \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438. 1.1 \u0418\u043c\u0438\u0442\u0430\u0446\u0438\u044f+ \u0422\u0430\u043a\u0436\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043b\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0418\u0418 \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435, \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043a\u0430\u043c\u0435\u0440\u044b \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f USB \u0432\u0435\u0431\u043a\u0430\u043c\u0435\u0440\u0430 \u0438\u043b\u0438 \u0431\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0430\u044f \u043a\u0430\u043c\u0435\u0440\u0430. \u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u0438\u043c\u0435\u0440 2: 2. \u0421\u0432\u044f\u0437\u044c \u043a\u043e\u0434\u0430 \u0441 \u0436\u0435\u043b\u0435\u0437\u043e\u043c \u0418\u0418 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435, \u0432\u0435\u0431\u043a\u0430\u043c\u0435\u0440\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u043e\u0431\u043e\u0442\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443. \u041d\u043e \u0442\u0430\u043a\u0436\u0435 Arduino (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435 \u0436\u0435\u043b\u0435\u0437\u043e \u0440\u043e\u0431\u043e\u0442\u0430) \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443. \u0421\u043a\u0440\u0438\u043f\u0442 \u0418\u0418 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0432 Arduino. \u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0438 \u043c\u0443\u0441\u043e\u0440\u0430 \u043d\u0430 \u043f\u0443\u0442\u0438 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0438\u0433\u043d\u0430\u043b \u043d\u0430 Arduino, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0443\u043a\u043e\u0439 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u043c\u0443\u0441\u043e\u0440. 3. \u0421\u043b\u0430\u0431\u043e\u0435 \"\u0436\u0435\u043b\u0435\u0437\u043e\" \u0421\u043b\u0430\u0431\u043e\u0435 \"\u0436\u0435\u043b\u0435\u0437\u043e\" - \u044d\u0442\u043e \u0440\u0430\u0437\u043d\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u044b \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0418\u0418 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: - ESP32-CAM - Pixy - Huskylens - OpenMV Cam - Arduino Nicla Vision - ESP32-S3-EYE \u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043d\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0438\u0445 \u043d\u0430 \u043f\u043b\u0430\u0442\u0443 Arduino \u043d\u0430 \u0440\u043e\u0431\u043e\u0442\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 1: \u0420\u043e\u0431\u043e\u0442 \u2013 \u0423\u043c\u043d\u0430\u044f \u043c\u0443\u0441\u043e\u0440\u043a\u0430. ESP32-CAM \u2014 \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u043d\u0430 ESP32 \u0441 \u0440\u0430\u0437\u044a\u0451\u043c\u043e\u043c \u043f\u043e\u0434 \u043a\u0430\u043c\u0435\u0440\u0443 Wi-Fi/BLE \u0438 \u0441\u043b\u043e\u0442\u043e\u043c microSD. ESP-WHO \u2014 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Espressif \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f \u043d\u0430 ESP32/ESP32-S3. \u041f\u0440\u0438\u043c\u0435\u0440 2: \u041f\u0440\u043e\u0435\u043a\u0442 Robocare \u0441 \u0444\u0438\u043d\u0430\u043b\u0430 Samsung Solve for tomorrow 2025. \u0420\u043e\u0431\u043e\u0442 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Huskylens \u043a\u0430\u043c\u0435\u0440\u0443 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u0430\u043b\u0430\u0442 \u043f\u043e AprilTag. 4. \u041c\u0438\u043a\u0440\u043e\u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u044b \u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0418\u0418 \u0432 \u0441\u0432\u044f\u0437\u043a\u0435 \u0441 Arduino, \u0442\u0430\u043a \u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0441\u0435\u043c \u0436\u0435\u043b\u0435\u0437\u043e\u043c \u0441 \u043d\u0438\u0445. Raspbery PI 4/5 + AI Kit \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043b\u043e\u043d\u044b Orange Pi Raspberry Pi - \u0441\u0435\u0440\u0438\u044f \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u043e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u0432 \u043e\u0431\u0449\u0435\u0433\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 Raspberry Pi Foundation \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0435 \u041f\u041a \u0438 \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. Raspberry Pi AI Kit - \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442 \u0434\u043b\u044f Raspberry Pi 5: \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c Hailo-8L \u043d\u0430 M.2 HAT+. \u0414\u0430\u0451\u0442 \u0434\u043e 13 TOPS \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u0435\u0440\u0435\u043d\u0441\u0430 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439. \u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0432 \u0441\u0442\u0435\u043a \u043a\u0430\u043c\u0435\u0440 Raspberry Pi OS \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u0432 rpicam-apps. \u041d\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0432 rpicam-apps \u0434\u043b\u044f \u043f\u043e\u0441\u0442-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0438\u0434\u0435\u043e \u0441 \u043a\u0430\u043c\u0435\u0440. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438, \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430 \u0438 \u0434\u0440. \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041a\u043b\u043e\u043d\u044b \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u044b: \u041f\u043b\u0430\u0442\u0430 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 Orange Pi 5 Pro \u0424\u043b\u0430\u0433\u043c\u0430\u043d Orange Pi \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043d\u044b\u0445 \u0438 edge-\u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u044d\u043a\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0438 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0437\u044b. Radxa ROCK 5B \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 Radxa \u0441 \u0443\u043f\u043e\u0440\u043e\u043c \u043d\u0430 \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0430 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 CV/\u0418\u0418, \u0431\u043e\u0433\u0430\u0442\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b. Banana Pi BPI-M6 \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 Banana Pi \u0441 \u0430\u043a\u0446\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0430 \u0438 \u0432\u0432\u043e\u0434/\u0432\u044b\u0432\u043e\u0434 \u0432\u0438\u0434\u0435\u043e, \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c. Khadas VIM4 \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 Khadas \u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a\u043e\u043c OOWOW \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 makers/IoT. ODROID-M1S \u0410\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 ODROID \u0441 \u0430\u043a\u0446\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043d\u0430\u0434\u0451\u0436\u043d\u043e\u0441\u0442\u044c \u0438 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0434\u043b\u044f \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438. Libre Computer Le Potato (AML-S905X-CC) \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 Raspberry Pi \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 Linux-\u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043e\u0432 \u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c. Orange Pi Zero 3 \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u0434\u043b\u044f IoT \u0438 \u043c\u0435\u0434\u0438\u0430\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f headless-\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432. Radxa ZERO 3W \u041c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u0444\u043e\u0440\u043c-\u0444\u0430\u043a\u0442\u043e\u0440\u0430 Pi Zero \u0441 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0431\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438. ASUS Tinker Board 2 \u0421\u0435\u0440\u0438\u044f ASUS \u0434\u043b\u044f IoT \u0438 \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443. BeagleBone Black \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0441 \u0441\u0438\u043b\u044c\u043d\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u0438 \u0431\u044b\u0441\u0442\u0440\u044b\u043c \u0441\u0442\u0430\u0440\u0442\u043e\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u043e\u0435\u043a\u0442 Soyle \u0441 \u0444\u0438\u043d\u0430\u043b\u0430 Samsung solve for tomorrow 2025. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430 Raspberry PI. \u0412 \u043e\u0434\u043d\u043e\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0443\u0441\u0442\u043d\u0430\u044f \u0440\u0435\u0447\u044c \u0441 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u043a\u0441\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435 \u043e\u0447\u043a\u043e\u0432. \u0412 \u0434\u0440\u0443\u0433\u043e\u043c, \u043a\u0430\u043c\u0435\u0440\u0430 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0435\u0442 \u044f\u0437\u044b\u043a \u0436\u0435\u0441\u0442\u043e\u0432 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0432 \u0437\u0432\u0443\u043a. NVIDIA Jetson NVIDIA Jetson\u2122 \u2014 \u0432\u0435\u0434\u0443\u0449\u0430\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u0439\u043d\u043e\u0433\u043e \u0418\u0418 \u0438 \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0438, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0449\u0430\u044f \u043c\u043e\u0449\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u044b \u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442 SDK NVIDIA JetPack\u2122 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. JetPack \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u0439\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0418\u0418, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0443, \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0418\u0418 \u0438 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435. \u0421\u0435\u0440\u0438\u044f / \u043c\u043e\u0434\u0435\u043b\u044c \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0418\u0418-\u043f\u0435\u0440\u0444. (\u043a\u0430\u043a \u0443 NVIDIA) \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 Jetson AGX Thor AGX Thor Dev Kit \u0434\u043e 2070 TFLOPS FP4 (sparse) Blackwell, 128 GB, 40\u2013130 \u0412\u0442 Jetson AGX Orin AGX Orin 64 GB / 32 GB / Industrial; Dev Kit \u0434\u043e 275 TOPS 15\u201360 \u0412\u0442, \u0442\u043e\u043f\u043e\u0432\u0430\u044f \u0441\u0435\u0440\u0438\u044f Orin Jetson Orin NX Orin NX 16 GB / 8 GB \u0434\u043e 157 TOPS 10\u201340 \u0412\u0442, \u0444\u043e\u0440\u043c-\u0444\u0430\u043a\u0442\u043e\u0440 70\u00d745 \u043c\u043c Jetson Orin Nano Orin Nano 8 GB / 4 GB; Orin Nano Super Dev Kit \u0434\u043e 67 TOPS (Super) JetPack 6.2 \u043f\u043e\u0432\u044b\u0441\u0438\u043b \u043f\u0440\u0435\u0434\u0435\u043b \u0441 40 \u0434\u043e 67 TOPS Jetson AGX Xavier AGX Xavier 32 GB / 64 GB / Industrial 32 TOPS (AGX), 30 TOPS (Industrial) \u041f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0435 \u043f\u043e\u043a\u043e\u043b\u0435\u043d\u0438\u0435 AGX Jetson Xavier NX Xavier NX 8 GB / 16 GB 21 TOPS \u041c\u0430\u043b\u044b\u0439 \u0444\u043e\u0440\u043c-\u0444\u0430\u043a\u0442\u043e\u0440 70\u00d745 \u043c\u043c Jetson TX2 (\u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u043e) TX2, TX2 4GB, TX2i, TX2 NX ~1.3 TFLOPS FP16 Pascal-GPU, 7.5\u201315 \u0412\u0442 Jetson TX1 TX1 ~1 TFLOPS FP16 Maxwell-GPU, 4 GB LPDDR4 Jetson Nano Nano Module; Nano Dev Kit 472 GFLOPS FP16 Maxwell-GPU, 4 GB LPDDR4 \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e Jetson Nano \u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u043e\u0435\u043a\u0442 \u2013 \u043b\u043e\u0434\u043a\u0430 \u0441\u043f\u0430\u0441\u0430\u0442\u0435\u043b\u044c. \u041f\u0440\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 Jetson Nano \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u043a\u0430\u0434\u0440\u0435 \u043f\u043e UART \u0432 Arduino. \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043b\u043e\u0434\u043a\u0430 \u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u0432\u043e\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442.","title":"\u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f"},{"location":"hardware/#_1","text":"","title":"\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f"},{"location":"hardware/#1","text":"\u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043b\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0418\u0418 \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435. \u0414\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043a\u0430\u043c\u0435\u0440\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 (\u0438\u043b\u0438 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d). \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u0442\u0430\u043f\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0438\u0445/\u043e\u0431\u043b\u0430\u0441\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043e\u0432. \u0412\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043e \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.","title":"1. \u0418\u043c\u0438\u0442\u0430\u0446\u0438\u044f"},{"location":"hardware/#11","text":"\u0422\u0430\u043a\u0436\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043b\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0418\u0418 \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435, \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043a\u0430\u043c\u0435\u0440\u044b \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f USB \u0432\u0435\u0431\u043a\u0430\u043c\u0435\u0440\u0430 \u0438\u043b\u0438 \u0431\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0430\u044f \u043a\u0430\u043c\u0435\u0440\u0430. \u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u0438\u043c\u0435\u0440 2:","title":"1.1 \u0418\u043c\u0438\u0442\u0430\u0446\u0438\u044f+"},{"location":"hardware/#2","text":"\u0418\u0418 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435, \u0432\u0435\u0431\u043a\u0430\u043c\u0435\u0440\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u043e\u0431\u043e\u0442\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443. \u041d\u043e \u0442\u0430\u043a\u0436\u0435 Arduino (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435 \u0436\u0435\u043b\u0435\u0437\u043e \u0440\u043e\u0431\u043e\u0442\u0430) \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443. \u0421\u043a\u0440\u0438\u043f\u0442 \u0418\u0418 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0432 Arduino. \u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0438 \u043c\u0443\u0441\u043e\u0440\u0430 \u043d\u0430 \u043f\u0443\u0442\u0438 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0438\u0433\u043d\u0430\u043b \u043d\u0430 Arduino, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0443\u043a\u043e\u0439 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u043c\u0443\u0441\u043e\u0440.","title":"2. \u0421\u0432\u044f\u0437\u044c \u043a\u043e\u0434\u0430 \u0441 \u0436\u0435\u043b\u0435\u0437\u043e\u043c"},{"location":"hardware/#3","text":"\u0421\u043b\u0430\u0431\u043e\u0435 \"\u0436\u0435\u043b\u0435\u0437\u043e\" - \u044d\u0442\u043e \u0440\u0430\u0437\u043d\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u044b \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0418\u0418 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: - ESP32-CAM - Pixy - Huskylens - OpenMV Cam - Arduino Nicla Vision - ESP32-S3-EYE \u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043d\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0438\u0445 \u043d\u0430 \u043f\u043b\u0430\u0442\u0443 Arduino \u043d\u0430 \u0440\u043e\u0431\u043e\u0442\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 1: \u0420\u043e\u0431\u043e\u0442 \u2013 \u0423\u043c\u043d\u0430\u044f \u043c\u0443\u0441\u043e\u0440\u043a\u0430. ESP32-CAM \u2014 \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u043d\u0430 ESP32 \u0441 \u0440\u0430\u0437\u044a\u0451\u043c\u043e\u043c \u043f\u043e\u0434 \u043a\u0430\u043c\u0435\u0440\u0443 Wi-Fi/BLE \u0438 \u0441\u043b\u043e\u0442\u043e\u043c microSD. ESP-WHO \u2014 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Espressif \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f \u043d\u0430 ESP32/ESP32-S3. \u041f\u0440\u0438\u043c\u0435\u0440 2: \u041f\u0440\u043e\u0435\u043a\u0442 Robocare \u0441 \u0444\u0438\u043d\u0430\u043b\u0430 Samsung Solve for tomorrow 2025. \u0420\u043e\u0431\u043e\u0442 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Huskylens \u043a\u0430\u043c\u0435\u0440\u0443 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u0430\u043b\u0430\u0442 \u043f\u043e AprilTag.","title":"3. \u0421\u043b\u0430\u0431\u043e\u0435 \"\u0436\u0435\u043b\u0435\u0437\u043e\""},{"location":"hardware/#4","text":"\u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0418\u0418 \u0432 \u0441\u0432\u044f\u0437\u043a\u0435 \u0441 Arduino, \u0442\u0430\u043a \u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0441\u0435\u043c \u0436\u0435\u043b\u0435\u0437\u043e\u043c \u0441 \u043d\u0438\u0445.","title":"4. \u041c\u0438\u043a\u0440\u043e\u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u044b"},{"location":"hardware/#raspbery-pi-45-ai-kit-orange-pi","text":"Raspberry Pi - \u0441\u0435\u0440\u0438\u044f \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u043e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u0432 \u043e\u0431\u0449\u0435\u0433\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 Raspberry Pi Foundation \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0435 \u041f\u041a \u0438 \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. Raspberry Pi AI Kit - \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442 \u0434\u043b\u044f Raspberry Pi 5: \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c Hailo-8L \u043d\u0430 M.2 HAT+. \u0414\u0430\u0451\u0442 \u0434\u043e 13 TOPS \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u0435\u0440\u0435\u043d\u0441\u0430 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439. \u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0432 \u0441\u0442\u0435\u043a \u043a\u0430\u043c\u0435\u0440 Raspberry Pi OS \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u0432 rpicam-apps. \u041d\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0432 rpicam-apps \u0434\u043b\u044f \u043f\u043e\u0441\u0442-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0438\u0434\u0435\u043e \u0441 \u043a\u0430\u043c\u0435\u0440. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438, \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430 \u0438 \u0434\u0440. \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041a\u043b\u043e\u043d\u044b \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u044b: \u041f\u043b\u0430\u0442\u0430 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 Orange Pi 5 Pro \u0424\u043b\u0430\u0433\u043c\u0430\u043d Orange Pi \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043d\u044b\u0445 \u0438 edge-\u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u044d\u043a\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0438 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0437\u044b. Radxa ROCK 5B \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 Radxa \u0441 \u0443\u043f\u043e\u0440\u043e\u043c \u043d\u0430 \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0430 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 CV/\u0418\u0418, \u0431\u043e\u0433\u0430\u0442\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b. Banana Pi BPI-M6 \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 Banana Pi \u0441 \u0430\u043a\u0446\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0430 \u0438 \u0432\u0432\u043e\u0434/\u0432\u044b\u0432\u043e\u0434 \u0432\u0438\u0434\u0435\u043e, \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c. Khadas VIM4 \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 Khadas \u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a\u043e\u043c OOWOW \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 makers/IoT. ODROID-M1S \u0410\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 ODROID \u0441 \u0430\u043a\u0446\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043d\u0430\u0434\u0451\u0436\u043d\u043e\u0441\u0442\u044c \u0438 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0434\u043b\u044f \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438. Libre Computer Le Potato (AML-S905X-CC) \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 Raspberry Pi \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 Linux-\u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043e\u0432 \u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c. Orange Pi Zero 3 \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u0434\u043b\u044f IoT \u0438 \u043c\u0435\u0434\u0438\u0430\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f headless-\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432. Radxa ZERO 3W \u041c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u0444\u043e\u0440\u043c-\u0444\u0430\u043a\u0442\u043e\u0440\u0430 Pi Zero \u0441 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0431\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438. ASUS Tinker Board 2 \u0421\u0435\u0440\u0438\u044f ASUS \u0434\u043b\u044f IoT \u0438 \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443. BeagleBone Black \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0441 \u0441\u0438\u043b\u044c\u043d\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u0438 \u0431\u044b\u0441\u0442\u0440\u044b\u043c \u0441\u0442\u0430\u0440\u0442\u043e\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u043e\u0435\u043a\u0442 Soyle \u0441 \u0444\u0438\u043d\u0430\u043b\u0430 Samsung solve for tomorrow 2025. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430 Raspberry PI. \u0412 \u043e\u0434\u043d\u043e\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0443\u0441\u0442\u043d\u0430\u044f \u0440\u0435\u0447\u044c \u0441 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u043a\u0441\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435 \u043e\u0447\u043a\u043e\u0432. \u0412 \u0434\u0440\u0443\u0433\u043e\u043c, \u043a\u0430\u043c\u0435\u0440\u0430 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0435\u0442 \u044f\u0437\u044b\u043a \u0436\u0435\u0441\u0442\u043e\u0432 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0432 \u0437\u0432\u0443\u043a.","title":"Raspbery PI 4/5 + AI Kit \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043b\u043e\u043d\u044b Orange Pi"},{"location":"hardware/#nvidia-jetson","text":"NVIDIA Jetson\u2122 \u2014 \u0432\u0435\u0434\u0443\u0449\u0430\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u0439\u043d\u043e\u0433\u043e \u0418\u0418 \u0438 \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0438, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0449\u0430\u044f \u043c\u043e\u0449\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u044b \u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442 SDK NVIDIA JetPack\u2122 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. JetPack \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u0439\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0418\u0418, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0443, \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0418\u0418 \u0438 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435. \u0421\u0435\u0440\u0438\u044f / \u043c\u043e\u0434\u0435\u043b\u044c \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0418\u0418-\u043f\u0435\u0440\u0444. (\u043a\u0430\u043a \u0443 NVIDIA) \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 Jetson AGX Thor AGX Thor Dev Kit \u0434\u043e 2070 TFLOPS FP4 (sparse) Blackwell, 128 GB, 40\u2013130 \u0412\u0442 Jetson AGX Orin AGX Orin 64 GB / 32 GB / Industrial; Dev Kit \u0434\u043e 275 TOPS 15\u201360 \u0412\u0442, \u0442\u043e\u043f\u043e\u0432\u0430\u044f \u0441\u0435\u0440\u0438\u044f Orin Jetson Orin NX Orin NX 16 GB / 8 GB \u0434\u043e 157 TOPS 10\u201340 \u0412\u0442, \u0444\u043e\u0440\u043c-\u0444\u0430\u043a\u0442\u043e\u0440 70\u00d745 \u043c\u043c Jetson Orin Nano Orin Nano 8 GB / 4 GB; Orin Nano Super Dev Kit \u0434\u043e 67 TOPS (Super) JetPack 6.2 \u043f\u043e\u0432\u044b\u0441\u0438\u043b \u043f\u0440\u0435\u0434\u0435\u043b \u0441 40 \u0434\u043e 67 TOPS Jetson AGX Xavier AGX Xavier 32 GB / 64 GB / Industrial 32 TOPS (AGX), 30 TOPS (Industrial) \u041f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0435 \u043f\u043e\u043a\u043e\u043b\u0435\u043d\u0438\u0435 AGX Jetson Xavier NX Xavier NX 8 GB / 16 GB 21 TOPS \u041c\u0430\u043b\u044b\u0439 \u0444\u043e\u0440\u043c-\u0444\u0430\u043a\u0442\u043e\u0440 70\u00d745 \u043c\u043c Jetson TX2 (\u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u043e) TX2, TX2 4GB, TX2i, TX2 NX ~1.3 TFLOPS FP16 Pascal-GPU, 7.5\u201315 \u0412\u0442 Jetson TX1 TX1 ~1 TFLOPS FP16 Maxwell-GPU, 4 GB LPDDR4 Jetson Nano Nano Module; Nano Dev Kit 472 GFLOPS FP16 Maxwell-GPU, 4 GB LPDDR4 \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e Jetson Nano \u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u043e\u0435\u043a\u0442 \u2013 \u043b\u043e\u0434\u043a\u0430 \u0441\u043f\u0430\u0441\u0430\u0442\u0435\u043b\u044c. \u041f\u0440\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 Jetson Nano \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u043a\u0430\u0434\u0440\u0435 \u043f\u043e UART \u0432 Arduino. \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043b\u043e\u0434\u043a\u0430 \u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u0432\u043e\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442.","title":"NVIDIA Jetson"},{"location":"jetson/","text":"Jetson Nano Jetson Nano: \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 NVIDIA \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0418\u0418. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 SoC Tegra \u04251 2 \u0438\u043b\u0438 4 \u0413\u0431 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 - JetPack (Ubuntu 18.04) \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0441 microSD, SSD \u0438\u043b\u0438 eMMC \u041f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u0442 5\u201310 \u0412\u0442. USB, HDMI, Ethernet \u043f\u043e\u0440\u0442\u044b 40-\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 GPIO-\u0440\u0430\u0437\u044a\u0451\u043c \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 UART, I2C, SPI, 2 \u0428\u0418\u041c \u043f\u043e\u0440\u0442\u0430 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 NVIDIA JetPack\u2122 \u2014 \u044d\u0442\u043e \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u0441\u0442\u0435\u043a \u0434\u043b\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b NVIDIA Jetson\u2122, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0432\u0430\u043c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u0439\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 \u0431\u0430\u0437\u0435 \u0418\u0418. \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0434\u043b\u044f NANO 4GB https://www.yahboom.net/study/jetson-nano \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e: sudo apt update sudo apt upgrade jtop jtop - \u043b\u0443\u0447\u0448\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 NVIDIA Jetson. \u0421\u0442\u0430\u0442\u044c\u044f \u0441 \u043e\u0431\u0437\u043e\u0440\u043e\u043c. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430: sudo apt update sudo apt install python3-pip \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 pip: sudo pip3 install -U jetson-stats \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a pip \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u043f\u0430\u043a\u0435\u0442 jetson-stats, \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u0439\u0442\u0438/\u0432\u043e\u0439\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c Jetson. \u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c jtop, \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0422\u0435\u0440\u043c\u0438\u043d\u0430\u043b \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435: jtop Python + conda \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 JetPack \u0441\u0442\u043e\u044f\u0442 python 2.6 \u0438 python 3.6. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438\u043b\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u044e python \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043b\u0438 \u0441\u043b\u043e\u043c\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0414\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Miniforge. Miniforge \u2014 \u044d\u0442\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a Conda \u0434\u043b\u044f ARM-\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 (Jetson, Raspberry Pi). Conda \u2014 \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442: - \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u043e\u0432: \u0441\u0442\u0430\u0432\u0438\u0442 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 (\u043a\u0430\u043a apt \u0438\u043b\u0438 pip). - \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0439: \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u043f\u043a\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u041e\u043d\u0438 \u043d\u0435 \u043c\u0435\u0448\u0430\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443. Miniforge \u0434\u0430\u0451\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 Python (3.8, 3.9, 3.10) \u0432 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043d\u0435 \u043b\u043e\u043c\u0430\u044f JetPack. \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043f\u0430\u043f\u043a\u0443 ~/miniforge3/, \u0433\u0434\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432\u0441\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f. wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh bash Miniforge3-Linux-aarch64.sh \u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430, \u043f\u043e\u0442\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 conda create -n py39 python=3.9 conda activate py39 \u0427\u0442\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c conda deactivate py39 \u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0439 conda info --envs \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 SWAP (\u041e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438) Jetson Nano \u0438\u043c\u0435\u0435\u0442 2 \u0438\u043b\u0438 4 Gb \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e. \u0414\u043b\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f swap. swap \u2014 \u044d\u0442\u043e \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043f\u0430\u043c\u044f\u0442\u0438 (\u0444\u0430\u0439\u043b \u0438\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b \u043d\u0430 \u0434\u0438\u0441\u043a\u0435), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 Linux \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u0430\u043a \u00ab\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435\u00bb \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. swap \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0447\u0435\u043c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c, \u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430 \u0441\u043e swap \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0447\u0435\u043c \u0431\u0435\u0437 \u043d\u0435\u0433\u043e. \u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 SWAP \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 swap free -h \u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 swap sudo swapoff -a \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0439 swap-\u0444\u0430\u0439\u043b (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c) sudo rm /swapfile \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 swap-\u0444\u0430\u0439\u043b \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f 6 \u0413\u0411: sudo fallocate -l 6G /var/swapfile \u0412\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0430 sudo chmod 600 /var/swapfile \u0420\u0430\u0437\u043c\u0435\u0442\u0438\u0442\u044c \u043a\u0430\u043a swap sudo mkswap /var/swapfile \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c swap sudo swapon /var/swapfile \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c swap free -h \u0418\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c jtop. OpenCV \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 JetPack \u0441\u0442\u043e\u0438\u0442 \u0441\u0442\u0430\u0440\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f OpenCV 4.1.1.(2019 \u0433\u043e\u0434\u0430). \u0414\u043b\u044f \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 OpenCV \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0435\u0439\u0448\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438. \u041d\u041e! \u0414\u043b\u044f JetPack 4.6 \u043d\u0435\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 OpenCV, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c. \u041d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c OpenCV \u0441 \u043d\u0443\u043b\u044f. \u0421\u0442\u0430\u0442\u044c\u044f \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 Github \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c conda conda activate py39 \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u043f\u0430\u043f\u043a\u0443 \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a cd Downloads \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 wget: wget https://github.com/Qengineering/Install-OpenCV-Jetson-Nano/blob/main/OpenCV-4-13-0.sh (\u0418\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e github ) \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442 sudo bash Install* \u0421\u043a\u0440\u0438\u043f\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c 3-4 \u0447\u0430\u0441\u0430. Jetson Inference Jetson Inference \u2014 \u044d\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438 \u043d\u0430\u0431\u043e\u0440 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f Jetson, \u0443\u043f\u0440\u043e\u0449\u0430\u044e\u0449\u0438\u0435 \u0438\u043d\u0444\u0435\u0440\u0435\u043d\u0441 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f \u0441 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\u043c TensorRT \u0447\u0435\u0440\u0435\u0437 API C++/Python. \u0412\u0438\u0434\u0435\u043e\u0443\u0440\u043e\u043a\u0438 \u043e\u0442 NVIDIA: https://www.youtube.com/watch?v=jSKHeYVcAB8&list=PL5B692fm6--uQRRDTPsJDp4o0xbzkoyf8 \u0423\u0440\u043e\u043a\u0438 \u0438\u043c\u0435\u043d\u043d\u043e \u043f\u043e Jetson Inference \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u044d\u0442\u043e\u0433\u043e \u0432\u0438\u0434\u0435\u043e: https://www.youtube.com/watch?v=QXIwdsyK7Rw&list=PL5B692fm6--uQRRDTPsJDp4o0xbzkoyf8&index=9 Qengineering GitHub Qengineering \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f Jetson Nano. \u0421\u0430\u0439\u0442 - \u041e\u0431\u0440\u0430\u0437 \u043d\u0430 Ubuntu 20.04 https://github.com/Qengineering/Jetson-Nano-Ubuntu-20-image - \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 https://github.com/Qengineering/Jetson-Nano-image - \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 \u043b\u0438\u0446 https://github.com/Qengineering/Face-Recognition-Jetson-Nano , \u0432 \u043c\u0430\u0441\u043a\u0435 https://github.com/Qengineering/Face-Recognition-with-Mask-Jetson-Nano","title":"Jetson Nano"},{"location":"jetson/#jetson-nano","text":"Jetson Nano: \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 NVIDIA \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0418\u0418. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 SoC Tegra \u04251 2 \u0438\u043b\u0438 4 \u0413\u0431 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 - JetPack (Ubuntu 18.04) \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0441 microSD, SSD \u0438\u043b\u0438 eMMC \u041f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u0442 5\u201310 \u0412\u0442. USB, HDMI, Ethernet \u043f\u043e\u0440\u0442\u044b 40-\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 GPIO-\u0440\u0430\u0437\u044a\u0451\u043c \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 UART, I2C, SPI, 2 \u0428\u0418\u041c \u043f\u043e\u0440\u0442\u0430","title":"Jetson Nano"},{"location":"jetson/#_1","text":"NVIDIA JetPack\u2122 \u2014 \u044d\u0442\u043e \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u0441\u0442\u0435\u043a \u0434\u043b\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b NVIDIA Jetson\u2122, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0432\u0430\u043c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0435\u0440\u0438\u0444\u0435\u0440\u0438\u0439\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 \u0431\u0430\u0437\u0435 \u0418\u0418. \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0434\u043b\u044f NANO 4GB https://www.yahboom.net/study/jetson-nano \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e: sudo apt update sudo apt upgrade","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430"},{"location":"jetson/#jtop","text":"jtop - \u043b\u0443\u0447\u0448\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 NVIDIA Jetson. \u0421\u0442\u0430\u0442\u044c\u044f \u0441 \u043e\u0431\u0437\u043e\u0440\u043e\u043c. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430: sudo apt update sudo apt install python3-pip \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 pip: sudo pip3 install -U jetson-stats \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a pip \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u043f\u0430\u043a\u0435\u0442 jetson-stats, \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u0439\u0442\u0438/\u0432\u043e\u0439\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c Jetson. \u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c jtop, \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0422\u0435\u0440\u043c\u0438\u043d\u0430\u043b \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435: jtop","title":"jtop"},{"location":"jetson/#python-conda","text":"\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 JetPack \u0441\u0442\u043e\u044f\u0442 python 2.6 \u0438 python 3.6. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438\u043b\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u044e python \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043b\u0438 \u0441\u043b\u043e\u043c\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0414\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Miniforge. Miniforge \u2014 \u044d\u0442\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a Conda \u0434\u043b\u044f ARM-\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 (Jetson, Raspberry Pi). Conda \u2014 \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442: - \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u043e\u0432: \u0441\u0442\u0430\u0432\u0438\u0442 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 (\u043a\u0430\u043a apt \u0438\u043b\u0438 pip). - \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0439: \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u043f\u043a\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u041e\u043d\u0438 \u043d\u0435 \u043c\u0435\u0448\u0430\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443. Miniforge \u0434\u0430\u0451\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 Python (3.8, 3.9, 3.10) \u0432 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043d\u0435 \u043b\u043e\u043c\u0430\u044f JetPack. \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043f\u0430\u043f\u043a\u0443 ~/miniforge3/, \u0433\u0434\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432\u0441\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f. wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh bash Miniforge3-Linux-aarch64.sh \u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430, \u043f\u043e\u0442\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 conda create -n py39 python=3.9 conda activate py39 \u0427\u0442\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c conda deactivate py39 \u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0439 conda info --envs","title":"Python + conda"},{"location":"jetson/#swap","text":"Jetson Nano \u0438\u043c\u0435\u0435\u0442 2 \u0438\u043b\u0438 4 Gb \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e. \u0414\u043b\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f swap. swap \u2014 \u044d\u0442\u043e \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043f\u0430\u043c\u044f\u0442\u0438 (\u0444\u0430\u0439\u043b \u0438\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b \u043d\u0430 \u0434\u0438\u0441\u043a\u0435), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 Linux \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u0430\u043a \u00ab\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435\u00bb \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. swap \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0447\u0435\u043c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c, \u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430 \u0441\u043e swap \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0447\u0435\u043c \u0431\u0435\u0437 \u043d\u0435\u0433\u043e.","title":"\u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 SWAP (\u041e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438)"},{"location":"jetson/#swap_1","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 swap free -h \u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 swap sudo swapoff -a \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0439 swap-\u0444\u0430\u0439\u043b (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c) sudo rm /swapfile \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 swap-\u0444\u0430\u0439\u043b \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f 6 \u0413\u0411: sudo fallocate -l 6G /var/swapfile \u0412\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0430 sudo chmod 600 /var/swapfile \u0420\u0430\u0437\u043c\u0435\u0442\u0438\u0442\u044c \u043a\u0430\u043a swap sudo mkswap /var/swapfile \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c swap sudo swapon /var/swapfile \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c swap free -h \u0418\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c jtop.","title":"\u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 SWAP"},{"location":"jetson/#opencv","text":"\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 JetPack \u0441\u0442\u043e\u0438\u0442 \u0441\u0442\u0430\u0440\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f OpenCV 4.1.1.(2019 \u0433\u043e\u0434\u0430). \u0414\u043b\u044f \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 OpenCV \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0435\u0439\u0448\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438. \u041d\u041e! \u0414\u043b\u044f JetPack 4.6 \u043d\u0435\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 OpenCV, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c. \u041d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c OpenCV \u0441 \u043d\u0443\u043b\u044f. \u0421\u0442\u0430\u0442\u044c\u044f \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 Github \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c conda conda activate py39 \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u043f\u0430\u043f\u043a\u0443 \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a cd Downloads \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 wget: wget https://github.com/Qengineering/Install-OpenCV-Jetson-Nano/blob/main/OpenCV-4-13-0.sh (\u0418\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e github ) \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442 sudo bash Install* \u0421\u043a\u0440\u0438\u043f\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c 3-4 \u0447\u0430\u0441\u0430.","title":"OpenCV"},{"location":"jetson/#jetson-inference","text":"Jetson Inference \u2014 \u044d\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438 \u043d\u0430\u0431\u043e\u0440 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f Jetson, \u0443\u043f\u0440\u043e\u0449\u0430\u044e\u0449\u0438\u0435 \u0438\u043d\u0444\u0435\u0440\u0435\u043d\u0441 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f \u0441 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\u043c TensorRT \u0447\u0435\u0440\u0435\u0437 API C++/Python. \u0412\u0438\u0434\u0435\u043e\u0443\u0440\u043e\u043a\u0438 \u043e\u0442 NVIDIA: https://www.youtube.com/watch?v=jSKHeYVcAB8&list=PL5B692fm6--uQRRDTPsJDp4o0xbzkoyf8 \u0423\u0440\u043e\u043a\u0438 \u0438\u043c\u0435\u043d\u043d\u043e \u043f\u043e Jetson Inference \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u044d\u0442\u043e\u0433\u043e \u0432\u0438\u0434\u0435\u043e: https://www.youtube.com/watch?v=QXIwdsyK7Rw&list=PL5B692fm6--uQRRDTPsJDp4o0xbzkoyf8&index=9","title":"Jetson Inference"},{"location":"jetson/#qengineering","text":"GitHub Qengineering \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f Jetson Nano. \u0421\u0430\u0439\u0442 - \u041e\u0431\u0440\u0430\u0437 \u043d\u0430 Ubuntu 20.04 https://github.com/Qengineering/Jetson-Nano-Ubuntu-20-image - \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 https://github.com/Qengineering/Jetson-Nano-image - \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 \u043b\u0438\u0446 https://github.com/Qengineering/Face-Recognition-Jetson-Nano , \u0432 \u043c\u0430\u0441\u043a\u0435 https://github.com/Qengineering/Face-Recognition-with-Mask-Jetson-Nano","title":"Qengineering"},{"location":"kinect/","text":"Kinect Kinect \u2014 \u0431\u0435\u0441\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u0435\u043d\u0441\u043e\u0440\u043d\u044b\u0439 \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440, \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u043e\u043b\u0438 Xbox 360, \u0438 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0437\u0434\u043d\u0435\u0435 \u0434\u043b\u044f Xbox One \u0438 PC (Windows). \u0414\u0430\u0442\u0447\u0438\u043a\u0438 Kinect v1 (Xbox 360 / Windows v1): RGB-\u043a\u0430\u043c\u0435\u0440\u0430 640\u00d7480@30 \u043a\u0430\u0434\u0440/\u0441. \u0418\u041a-\u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0440 \u0442\u043e\u0447\u0435\u0447\u043d\u043e\u0433\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u0438 \u0418\u041a-\u043a\u0430\u043c\u0435\u0440\u0430, \u0433\u043b\u0443\u0431\u0438\u043d\u0430 ~320\u00d7240@30. \u041c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 4 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d\u043e\u0432. \u0422\u0440\u0451\u0445\u043e\u0441\u0435\u0432\u043e\u0439 \u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u0440. \u041f\u0440\u0438\u0432\u043e\u0434 \u043d\u0430\u043a\u043b\u043e\u043d\u0430. \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f Kinect v1. \u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 v1 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a Xbox NUI Motor. \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u043d\u0438\u043a \u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f kinect \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043a\u0443\u043f\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043d\u0438\u043a: \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 \u0421\u043d\u0430\u0447\u0430\u043b\u0430 Kinect for Windows SDK v1.8 . \u041f\u043e\u0442\u043e\u043c Kinect for Windows Developer Toolkit v1.8 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u0439\u0442\u0438 \u0432 \u043f\u0430\u043f\u043a\u0443: C:\\Program Files\\Microsoft SDKs\\Kinect\\Developer Toolkit v1.8.0\\Tools\\ \u0418 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c ToolkitBrowser.exe \u0412\u043e \u0432\u043a\u043b\u0430\u0434\u043a\u0435 Tools \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c (\u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 Run) Kinect Explorer-D2D. \u0411\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441 \u043a\u0430\u043c\u0435\u0440 \u0418\u041a \u0438 RGB, \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u0440\u0430, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u043a\u043b\u043e\u043d \u043a\u0430\u043c\u0435\u0440\u044b. \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \"\u0441\u043a\u0435\u043b\u0435\u0442\" \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430.","title":"XBOX Kinect"},{"location":"kinect/#kinect","text":"Kinect \u2014 \u0431\u0435\u0441\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u0435\u043d\u0441\u043e\u0440\u043d\u044b\u0439 \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440, \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u043e\u043b\u0438 Xbox 360, \u0438 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0437\u0434\u043d\u0435\u0435 \u0434\u043b\u044f Xbox One \u0438 PC (Windows). \u0414\u0430\u0442\u0447\u0438\u043a\u0438 Kinect v1 (Xbox 360 / Windows v1): RGB-\u043a\u0430\u043c\u0435\u0440\u0430 640\u00d7480@30 \u043a\u0430\u0434\u0440/\u0441. \u0418\u041a-\u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0440 \u0442\u043e\u0447\u0435\u0447\u043d\u043e\u0433\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u0438 \u0418\u041a-\u043a\u0430\u043c\u0435\u0440\u0430, \u0433\u043b\u0443\u0431\u0438\u043d\u0430 ~320\u00d7240@30. \u041c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 4 \u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d\u043e\u0432. \u0422\u0440\u0451\u0445\u043e\u0441\u0435\u0432\u043e\u0439 \u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u0440. \u041f\u0440\u0438\u0432\u043e\u0434 \u043d\u0430\u043a\u043b\u043e\u043d\u0430. \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f Kinect v1. \u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 v1 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a Xbox NUI Motor.","title":"Kinect"},{"location":"kinect/#_1","text":"\u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f kinect \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043a\u0443\u043f\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043d\u0438\u043a:","title":"\u041f\u0435\u0440\u0435\u0445\u043e\u0434\u043d\u0438\u043a"},{"location":"kinect/#_2","text":"\u0421\u043d\u0430\u0447\u0430\u043b\u0430 Kinect for Windows SDK v1.8 . \u041f\u043e\u0442\u043e\u043c Kinect for Windows Developer Toolkit v1.8","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432"},{"location":"kinect/#_3","text":"\u0417\u0430\u0439\u0442\u0438 \u0432 \u043f\u0430\u043f\u043a\u0443: C:\\Program Files\\Microsoft SDKs\\Kinect\\Developer Toolkit v1.8.0\\Tools\\ \u0418 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c ToolkitBrowser.exe \u0412\u043e \u0432\u043a\u043b\u0430\u0434\u043a\u0435 Tools \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c (\u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 Run) Kinect Explorer-D2D. \u0411\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441 \u043a\u0430\u043c\u0435\u0440 \u0418\u041a \u0438 RGB, \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0430\u043a\u0441\u0435\u043b\u0435\u0440\u043e\u043c\u0435\u0442\u0440\u0430, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u043a\u043b\u043e\u043d \u043a\u0430\u043c\u0435\u0440\u044b. \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \"\u0441\u043a\u0435\u043b\u0435\u0442\" \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430.","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"llm/","text":"\u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0411\u043e\u043b\u044c\u0448\u0430\u044f \u044f\u0437\u044b\u043a\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c (Large Language Model, LLM ) \u2014 \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u044f\u0437\u044b\u043a\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0418\u0418, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a, \u043e\u0431\u0443\u0447\u0430\u044f\u0441\u044c \u043d\u0430 \u043e\u0433\u0440\u043e\u043c\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043c\u0430\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"llm/#_1","text":"\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u044f\u0437\u044b\u043a\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c (Large Language Model, LLM ) \u2014 \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u044f\u0437\u044b\u043a\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0418\u0418, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a, \u043e\u0431\u0443\u0447\u0430\u044f\u0441\u044c \u043d\u0430 \u043e\u0433\u0440\u043e\u043c\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043c\u0430\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"mediapipe/","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 MediaPipe MediaPipe Solutions \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0445 \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430 (\u0418\u0418) \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f (\u041c\u041e) \u0432 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u044d\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a \u0441\u0432\u043e\u0438\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c, \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0438\u0445 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 MediaPipe \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a 1. Python 3.9-3.12 \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435 python.org . \u0421\u0430\u043c\u044b\u0435 \u043d\u043e\u0432\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f YOLO. \u041f\u0440\u044f\u043c\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 Python 3.12.10 (100% \u0440\u0430\u0431\u043e\u0447\u0430\u044f) \u041f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0433\u0430\u043b\u043e\u0447\u043a\u0443 \u0432 Add to PATH 2. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c: pip3 install mediapipe opencv-python 3. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c python IDLE -> file -> new file \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043b\u044e\u0431\u0443\u044e \u043f\u0430\u043f\u043a\u0443 \u041a\u043e\u0434 \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0443\u043a \u0438 \u043f\u0430\u043b\u044c\u0446\u0435\u0432. \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f import cv2 import mediapipe as mp import time mp_hands = mp.solutions.hands mp_draw = mp.solutions.drawing_utils mp_style = mp.solutions.drawing_styles cap = cv2.VideoCapture(0) with mp_hands.Hands( model_complexity=1, # 0/1/2: \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438. \u0412\u044b\u0448\u0435 \u2014 \u0442\u043e\u0447\u043d\u0435\u0435, \u043d\u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 1) max_num_hands=4, # \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0440\u0443\u043a \u0432 \u043a\u0430\u0434\u0440\u0435 min_detection_confidence=0.5, # \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0442\u0435\u043a\u0442\u0430 \u0440\u0443\u043a (0..1) min_tracking_confidence=0.5 # \u043f\u043e\u0440\u043e\u0433 \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430; \u043d\u0438\u0436\u0435 \u2014 \u0432\u0435\u0440\u043d\u0451\u0442\u0441\u044f \u043a \u0434\u0435\u0442\u0435\u043a\u0442\u0443 (0..1) ) as hands: while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break frame = cv2.flip(frame, 1) start_time = time.perf_counter() rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) res = hands.process(rgb) if res.multi_hand_landmarks: for lm, hness in zip(res.multi_hand_landmarks, res.multi_handedness): mp_draw.draw_landmarks( frame, lm, mp_hands.HAND_CONNECTIONS, mp_style.get_default_hand_landmarks_style(), mp_style.get_default_hand_connections_style() ) end_time = time.perf_counter() fps = 1 / (end_time - start_time) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 90), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.putText(frame, f\"Press 'Esc' to exit\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA) cv2.imshow(\"Hands\", frame) cap.release() cv2.destroyAllWindows() \u041f\u0440\u0438\u043c\u0435\u0440\u044b Facemesh MediaPipe Face Mesh \u2014 \u044d\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 468 \u0442\u0440\u0451\u0445\u043c\u0435\u0440\u043d\u044b\u0445 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432 \u043b\u0438\u0446\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0434\u0430\u0436\u0435 \u043d\u0430 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445. \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f Face mesh import cv2 import mediapipe as mp import time mp_face = mp.solutions.face_mesh mp_draw = mp.solutions.drawing_utils mp_style = mp.solutions.drawing_styles cap = cv2.VideoCapture(0) with mp_face.FaceMesh( static_image_mode=False, # \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0435 \u0432\u0438\u0434\u0435\u043e; True \u2014 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u043e\u0442\u043e max_num_faces=4, # \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043b\u0438\u0446 \u0432 \u043a\u0430\u0434\u0440\u0435 refine_landmarks=True, # \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 (\u0440\u0430\u0434\u0443\u0436\u043a\u0430, \u0433\u0443\u0431\u044b) min_detection_confidence=0.5, # \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0442\u0435\u043a\u0442\u0430 (0..1) min_tracking_confidence=0.5 # \u043f\u043e\u0440\u043e\u0433 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430 (0..1) ) as face: while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break frame = cv2.flip(frame, 1) start_time = time.perf_counter() rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) res = face.process(rgb) if res.multi_face_landmarks: for lm in res.multi_face_landmarks: # \u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0442\u043a\u0430 \u043b\u0438\u0446\u0430 mp_draw.draw_landmarks( frame, lm, mp_face.FACEMESH_TESSELATION, landmark_drawing_spec=None, connection_drawing_spec=mp_style.get_default_face_mesh_tesselation_style() ) # \u041a\u043e\u043d\u0442\u0443\u0440\u044b \u043b\u0438\u0446\u0430 mp_draw.draw_landmarks( frame, lm, mp_face.FACEMESH_CONTOURS, landmark_drawing_spec=None, connection_drawing_spec=mp_style.get_default_face_mesh_contours_style() ) # \u0420\u0430\u0434\u0443\u0436\u043a\u0438 \u0433\u043b\u0430\u0437 mp_draw.draw_landmarks( frame, lm, mp_face.FACEMESH_IRISES, landmark_drawing_spec=None, connection_drawing_spec=mp_style.get_default_face_mesh_iris_connections_style() ) end_time = time.perf_counter() fps = 1.0 / max(1e-6, (end_time - start_time)) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 90), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.putText(frame, \"Press 'Esc' to exit\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA) cv2.imshow(\"Face Mesh\", frame) cap.release() cv2.destroyAllWindows() \u041c\u0430\u0441\u043a\u0430 \u043e\u0447\u043a\u043e\u0432 \u043d\u0430 \u043b\u0438\u0446\u043e. \u0412 \u043f\u0430\u043f\u043a\u0443 \u0441 \u043a\u043e\u0434\u043e\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b glasses.png \u041e\u0447\u043a\u0438 import cv2 import mediapipe as mp import numpy as np import time, math, os mp_face = mp.solutions.face_mesh mp_draw = mp.solutions.drawing_utils mp_style = mp.solutions.drawing_styles # ==== \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b ==== PNG_PATH = \"glasses.png\" # \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: PNG c \u0430\u043b\u044c\u0444\u0430-\u043a\u0430\u043d\u0430\u043b\u043e\u043c (\u043e\u0447\u043a\u0438), \u0446\u0435\u043d\u0442\u0440 \u0432 \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435 \u0444\u0430\u0439\u043b\u0430 TINT_ALPHA = 0.35 # \u041f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0442\u0435\u043c\u043d\u0435\u043d\u0438\u044f \"\u043b\u0438\u043d\u0437\" (0..1) FRAME_THICK = 4 # \u0422\u043e\u043b\u0449\u0438\u043d\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 \"\u043e\u043f\u0440\u0430\u0432\u044b\" (px) SCALE_W = 3 # \u0428\u0438\u0440\u0438\u043d\u0430 \u043e\u0447\u043a\u043e\u0432 = IPD * SCALE_W SCALE_H = 0.45 # \u041e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430 \u043e\u0447\u043a\u043e\u0432 \u043e\u0442 \u0448\u0438\u0440\u0438\u043d\u044b cap = cv2.VideoCapture(0) # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 PNG, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c png_rgba = None if os.path.isfile(PNG_PATH): png_rgba = cv2.imread(PNG_PATH, cv2.IMREAD_UNCHANGED) def alpha_blend_rgba(bg_bgr, fg_rgba, cx, cy): \"\"\"\u0410\u043b\u044c\u0444\u0430-\u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 RGBA \u043f\u043e\u0432\u0435\u0440\u0445 bg, \u0446\u0435\u043d\u0442\u0440\u0438\u0440\u0443\u044f \u0432 (cx,cy).\"\"\" fh, fw = fg_rgba.shape[:2] x1 = int(cx - fw // 2); y1 = int(cy - fh // 2) x2 = x1 + fw; y2 = y1 + fh # \u041a\u043b\u0438\u043f \u043f\u043e \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c bh, bw = bg_bgr.shape[:2] x1c, y1c = max(0, x1), max(0, y1) x2c, y2c = min(bw, x2), min(bh, y2) if x1c >= x2c or y1c >= y2c: return roi_bg = bg_bgr[y1c:y2c, x1c:x2c] roi_fg = fg_rgba[(y1c - y1):(y2c - y1), (x1c - x1):(x2c - x1)] alpha = (roi_fg[..., 3:4].astype(np.float32)) / 255.0 fg_bgr = roi_fg[..., :3].astype(np.float32) bg_bgr[y1c:y2c, x1c:x2c] = (alpha * fg_bgr + (1 - alpha) * roi_bg.astype(np.float32)).astype(np.uint8) def rotate_scale_rgba(img_rgba, angle_deg, scale): \"\"\"\u041f\u043e\u0432\u043e\u0440\u043e\u0442 \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431 RGBA.\"\"\" h, w = img_rgba.shape[:2] M = cv2.getRotationMatrix2D((w/2, h/2), angle_deg, scale) out = cv2.warpAffine(img_rgba, M, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_TRANSPARENT) return out def iris_center_px(lm_list, ids, W, H): xs = [lm_list[i].x * W for i in ids] ys = [lm_list[i].y * H for i in ids] return (float(np.mean(xs)), float(np.mean(ys))) with mp_face.FaceMesh( static_image_mode=False, max_num_faces=2, refine_landmarks=True, # \u0434\u0430\u0451\u0442 5 \u0442\u043e\u0447\u0435\u043a \u0440\u0430\u0434\u0443\u0436\u043a\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043b\u0430\u0437 (\u0432\u0441\u0435\u0433\u043e 478) min_detection_confidence=0.5, min_tracking_confidence=0.5 ) as face: while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break frame = cv2.flip(frame, 1) start_time = time.perf_counter() rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) rgb.flags.writeable = False res = face.process(rgb) rgb.flags.writeable = True H, W = frame.shape[:2] if res.multi_face_landmarks: # \u0411\u0435\u0440\u0451\u043c \u043f\u0435\u0440\u0432\u043e\u0435 \u043b\u0438\u0446\u043e lm = res.multi_face_landmarks[0].landmark # \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0440\u0430\u0434\u0443\u0436\u0435\u043a (mediapipe, \u043f\u0440\u0438 refine_landmarks=True) right_iris = [469, 470, 471, 472, 468] # \u043f\u0440\u0430\u0432\u0430\u044f (\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u2014 \u0441\u043b\u0435\u0432\u0430) left_iris = [474, 475, 476, 477, 473] # \u043b\u0435\u0432\u0430\u044f (\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u2014 \u0441\u043f\u0440\u0430\u0432\u0430) # \u0426\u0435\u043d\u0442\u0440\u044b \u0440\u0430\u0434\u0443\u0436\u0435\u043a \u0432 \u043f\u0438\u043a\u0441\u0435\u043b\u044f\u0445 rx, ry = iris_center_px(lm, right_iris, W, H) lx, ly = iris_center_px(lm, left_iris, W, H) # \u041c\u0435\u0436\u0437\u0440\u0430\u0447\u043a\u043e\u0432\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u0443\u0433\u043e\u043b \u043d\u0430\u043a\u043b\u043e\u043d\u0430 ipd = math.hypot(lx - rx, ly - ry) angle = -math.degrees(math.atan2(ly - ry, lx - rx)) cx, cy = (rx + lx) * 0.5, (ry + ly) * 0.5 # \u041c\u0430\u0441\u0448\u0442\u0430\u0431 \u043f\u043e \u0448\u0438\u0440\u0438\u043d\u0435 target_w = max(1, int(ipd * SCALE_W)) scale = target_w / png_rgba.shape[1] rotated = rotate_scale_rgba(png_rgba, angle, scale) alpha_blend_rgba(frame, rotated, int(cx), int(cy)) end_time = time.perf_counter() fps = 1.0 / max(1e-6, (end_time - start_time)) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 90), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.putText(frame, \"Press 'Esc' to exit\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA) cv2.imshow(\"FaceMesh Virtual Try-On\", frame) cap.release() cv2.destroyAllWindows() \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0434\u043b\u044f \u043b\u0438\u0446\u0430. \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 import cv2 import mediapipe as mp import time, math # ==== \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b ==== CALIB_DIST_M = 0.60 # \u043c\u0435\u0442\u0440\u043e\u0432: \u043d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u043d\u0430\u0436\u043c\u0451\u0442\u0435 'C' SMOOTH_ALPHA = 0.85 # 0..1, \u0431\u043e\u043b\u044c\u0448\u0435 \u2014 \u043f\u043b\u0430\u0432\u043d\u0435\u0435 (\u044d\u043a\u0441\u043f. \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435) mp_face = mp.solutions.face_mesh cap = cv2.VideoCapture(0) calib_C = None # \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 = ipd_px_at_calib * CALIB_DIST_M dist_smooth = None # \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0446\u0435\u043d\u0442\u0440\u0430 \u0440\u0430\u0434\u0443\u0436\u0435\u043a (\u043d\u0443\u0436\u0435\u043d refine_landmarks=True) RIGHT_IRIS_CENTER = 468 LEFT_IRIS_CENTER = 473 with mp_face.FaceMesh( static_image_mode=False, max_num_faces=1, refine_landmarks=True, # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0442\u043e\u0447\u043a\u0438 \u0440\u0430\u0434\u0443\u0436\u043a\u0438 (\u0432\u0441\u0435\u0433\u043e 478) min_detection_confidence=0.5, min_tracking_confidence=0.5 ) as face: while True: ok, frame = cap.read() if not ok: break frame = cv2.flip(frame, 1) start = time.perf_counter() rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) rgb.flags.writeable = False res = face.process(rgb) rgb.flags.writeable = True H, W = frame.shape[:2] ipd_px = None if res.multi_face_landmarks: lm = res.multi_face_landmarks[0].landmark # \u0411\u0435\u0440\u0451\u043c \u0446\u0435\u043d\u0442\u0440\u044b \u0440\u0430\u0434\u0443\u0436\u0435\u043a rx, ry = lm[RIGHT_IRIS_CENTER].x * W, lm[RIGHT_IRIS_CENTER].y * H lx, ly = lm[LEFT_IRIS_CENTER].x * W, lm[LEFT_IRIS_CENTER].y * H ipd_px = math.hypot(lx - rx, ly - ry) # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0446\u0435\u043d\u0442\u0440\u043e\u0432 cv2.circle(frame, (int(rx), int(ry)), 3, (0,255,255), -1, cv2.LINE_AA) cv2.circle(frame, (int(lx), int(ly)), 3, (0,255,255), -1, cv2.LINE_AA) cv2.line(frame, (int(rx), int(ry)), (int(lx), int(ly)), (0,255,255), 2, cv2.LINE_AA) # \u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u0438 if calib_C is not None and ipd_px and ipd_px > 1: dist_m = calib_C / ipd_px # d \u2248 (s0*d0)/s if dist_smooth is None: dist_smooth = dist_m else: dist_smooth = SMOOTH_ALPHA*dist_smooth + (1-SMOOTH_ALPHA)*dist_m text = f\"Distance: {dist_smooth:.2f} m\" else: text = \"Press 'C' at known distance\" # HUD end = time.perf_counter() fps = 1.0 / max(1e-6, (end - start)) cv2.putText(frame, f\"FPS: {int(fps)}\", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 2, cv2.LINE_AA) cv2.putText(frame, text, (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,0), 2, cv2.LINE_AA) if ipd_px: cv2.putText(frame, f\"IPD px: {ipd_px:.1f}\", (20, 120), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,0,255), 2, cv2.LINE_AA) if calib_C is not None: cv2.putText(frame, f\"Calib C: {calib_C:.1f}\", (20, 160), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,200,255), 2, cv2.LINE_AA) cv2.putText(frame, \"C=Calibrate Esc=Exit\", (20, H-20), cv2.FONT_HERSHEY_SIMPLEX, 1, (200,200,200), 2, cv2.LINE_AA) cv2.imshow(\"Iris distance meter\", frame) k = cv2.waitKey(1) & 0xFF if k == 27: # Esc break elif k in (ord('c'), ord('C')): # \u041a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0430: \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 CALIB_DIST_M \u043d\u0430\u0436\u043c\u0438\u0442\u0435 'C' if ipd_px and ipd_px > 1: calib_C = ipd_px * CALIB_DIST_M dist_smooth = None # \u0441\u0431\u0440\u043e\u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 cap.release() cv2.destroyAllWindows()","title":"MediaPipe"},{"location":"mediapipe/#mediapipe","text":"MediaPipe Solutions \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0445 \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430 (\u0418\u0418) \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f (\u041c\u041e) \u0432 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u044d\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a \u0441\u0432\u043e\u0438\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c, \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0438\u0445 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 MediaPipe","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 MediaPipe"},{"location":"mediapipe/#_1","text":"","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a"},{"location":"mediapipe/#1-python-39-312","text":"\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435 python.org . \u0421\u0430\u043c\u044b\u0435 \u043d\u043e\u0432\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f YOLO. \u041f\u0440\u044f\u043c\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 Python 3.12.10 (100% \u0440\u0430\u0431\u043e\u0447\u0430\u044f) \u041f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0433\u0430\u043b\u043e\u0447\u043a\u0443 \u0432 Add to PATH","title":"1. Python 3.9-3.12"},{"location":"mediapipe/#2","text":"\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c: pip3 install mediapipe opencv-python","title":"2. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"mediapipe/#3","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c python IDLE -> file -> new file \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043b\u044e\u0431\u0443\u044e \u043f\u0430\u043f\u043a\u0443 \u041a\u043e\u0434 \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0443\u043a \u0438 \u043f\u0430\u043b\u044c\u0446\u0435\u0432. \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f import cv2 import mediapipe as mp import time mp_hands = mp.solutions.hands mp_draw = mp.solutions.drawing_utils mp_style = mp.solutions.drawing_styles cap = cv2.VideoCapture(0) with mp_hands.Hands( model_complexity=1, # 0/1/2: \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438. \u0412\u044b\u0448\u0435 \u2014 \u0442\u043e\u0447\u043d\u0435\u0435, \u043d\u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 1) max_num_hands=4, # \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0440\u0443\u043a \u0432 \u043a\u0430\u0434\u0440\u0435 min_detection_confidence=0.5, # \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0442\u0435\u043a\u0442\u0430 \u0440\u0443\u043a (0..1) min_tracking_confidence=0.5 # \u043f\u043e\u0440\u043e\u0433 \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430; \u043d\u0438\u0436\u0435 \u2014 \u0432\u0435\u0440\u043d\u0451\u0442\u0441\u044f \u043a \u0434\u0435\u0442\u0435\u043a\u0442\u0443 (0..1) ) as hands: while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break frame = cv2.flip(frame, 1) start_time = time.perf_counter() rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) res = hands.process(rgb) if res.multi_hand_landmarks: for lm, hness in zip(res.multi_hand_landmarks, res.multi_handedness): mp_draw.draw_landmarks( frame, lm, mp_hands.HAND_CONNECTIONS, mp_style.get_default_hand_landmarks_style(), mp_style.get_default_hand_connections_style() ) end_time = time.perf_counter() fps = 1 / (end_time - start_time) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 90), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.putText(frame, f\"Press 'Esc' to exit\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA) cv2.imshow(\"Hands\", frame) cap.release() cv2.destroyAllWindows()","title":"3. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f"},{"location":"mediapipe/#_2","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"mediapipe/#facemesh","text":"MediaPipe Face Mesh \u2014 \u044d\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 468 \u0442\u0440\u0451\u0445\u043c\u0435\u0440\u043d\u044b\u0445 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432 \u043b\u0438\u0446\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0434\u0430\u0436\u0435 \u043d\u0430 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445. \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f Face mesh import cv2 import mediapipe as mp import time mp_face = mp.solutions.face_mesh mp_draw = mp.solutions.drawing_utils mp_style = mp.solutions.drawing_styles cap = cv2.VideoCapture(0) with mp_face.FaceMesh( static_image_mode=False, # \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0435 \u0432\u0438\u0434\u0435\u043e; True \u2014 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u043e\u0442\u043e max_num_faces=4, # \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043b\u0438\u0446 \u0432 \u043a\u0430\u0434\u0440\u0435 refine_landmarks=True, # \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 (\u0440\u0430\u0434\u0443\u0436\u043a\u0430, \u0433\u0443\u0431\u044b) min_detection_confidence=0.5, # \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0442\u0435\u043a\u0442\u0430 (0..1) min_tracking_confidence=0.5 # \u043f\u043e\u0440\u043e\u0433 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430 (0..1) ) as face: while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break frame = cv2.flip(frame, 1) start_time = time.perf_counter() rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) res = face.process(rgb) if res.multi_face_landmarks: for lm in res.multi_face_landmarks: # \u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0442\u043a\u0430 \u043b\u0438\u0446\u0430 mp_draw.draw_landmarks( frame, lm, mp_face.FACEMESH_TESSELATION, landmark_drawing_spec=None, connection_drawing_spec=mp_style.get_default_face_mesh_tesselation_style() ) # \u041a\u043e\u043d\u0442\u0443\u0440\u044b \u043b\u0438\u0446\u0430 mp_draw.draw_landmarks( frame, lm, mp_face.FACEMESH_CONTOURS, landmark_drawing_spec=None, connection_drawing_spec=mp_style.get_default_face_mesh_contours_style() ) # \u0420\u0430\u0434\u0443\u0436\u043a\u0438 \u0433\u043b\u0430\u0437 mp_draw.draw_landmarks( frame, lm, mp_face.FACEMESH_IRISES, landmark_drawing_spec=None, connection_drawing_spec=mp_style.get_default_face_mesh_iris_connections_style() ) end_time = time.perf_counter() fps = 1.0 / max(1e-6, (end_time - start_time)) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 90), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.putText(frame, \"Press 'Esc' to exit\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA) cv2.imshow(\"Face Mesh\", frame) cap.release() cv2.destroyAllWindows() \u041c\u0430\u0441\u043a\u0430 \u043e\u0447\u043a\u043e\u0432 \u043d\u0430 \u043b\u0438\u0446\u043e. \u0412 \u043f\u0430\u043f\u043a\u0443 \u0441 \u043a\u043e\u0434\u043e\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b glasses.png \u041e\u0447\u043a\u0438 import cv2 import mediapipe as mp import numpy as np import time, math, os mp_face = mp.solutions.face_mesh mp_draw = mp.solutions.drawing_utils mp_style = mp.solutions.drawing_styles # ==== \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b ==== PNG_PATH = \"glasses.png\" # \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: PNG c \u0430\u043b\u044c\u0444\u0430-\u043a\u0430\u043d\u0430\u043b\u043e\u043c (\u043e\u0447\u043a\u0438), \u0446\u0435\u043d\u0442\u0440 \u0432 \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435 \u0444\u0430\u0439\u043b\u0430 TINT_ALPHA = 0.35 # \u041f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0442\u0435\u043c\u043d\u0435\u043d\u0438\u044f \"\u043b\u0438\u043d\u0437\" (0..1) FRAME_THICK = 4 # \u0422\u043e\u043b\u0449\u0438\u043d\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 \"\u043e\u043f\u0440\u0430\u0432\u044b\" (px) SCALE_W = 3 # \u0428\u0438\u0440\u0438\u043d\u0430 \u043e\u0447\u043a\u043e\u0432 = IPD * SCALE_W SCALE_H = 0.45 # \u041e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430 \u043e\u0447\u043a\u043e\u0432 \u043e\u0442 \u0448\u0438\u0440\u0438\u043d\u044b cap = cv2.VideoCapture(0) # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 PNG, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c png_rgba = None if os.path.isfile(PNG_PATH): png_rgba = cv2.imread(PNG_PATH, cv2.IMREAD_UNCHANGED) def alpha_blend_rgba(bg_bgr, fg_rgba, cx, cy): \"\"\"\u0410\u043b\u044c\u0444\u0430-\u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 RGBA \u043f\u043e\u0432\u0435\u0440\u0445 bg, \u0446\u0435\u043d\u0442\u0440\u0438\u0440\u0443\u044f \u0432 (cx,cy).\"\"\" fh, fw = fg_rgba.shape[:2] x1 = int(cx - fw // 2); y1 = int(cy - fh // 2) x2 = x1 + fw; y2 = y1 + fh # \u041a\u043b\u0438\u043f \u043f\u043e \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c bh, bw = bg_bgr.shape[:2] x1c, y1c = max(0, x1), max(0, y1) x2c, y2c = min(bw, x2), min(bh, y2) if x1c >= x2c or y1c >= y2c: return roi_bg = bg_bgr[y1c:y2c, x1c:x2c] roi_fg = fg_rgba[(y1c - y1):(y2c - y1), (x1c - x1):(x2c - x1)] alpha = (roi_fg[..., 3:4].astype(np.float32)) / 255.0 fg_bgr = roi_fg[..., :3].astype(np.float32) bg_bgr[y1c:y2c, x1c:x2c] = (alpha * fg_bgr + (1 - alpha) * roi_bg.astype(np.float32)).astype(np.uint8) def rotate_scale_rgba(img_rgba, angle_deg, scale): \"\"\"\u041f\u043e\u0432\u043e\u0440\u043e\u0442 \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431 RGBA.\"\"\" h, w = img_rgba.shape[:2] M = cv2.getRotationMatrix2D((w/2, h/2), angle_deg, scale) out = cv2.warpAffine(img_rgba, M, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_TRANSPARENT) return out def iris_center_px(lm_list, ids, W, H): xs = [lm_list[i].x * W for i in ids] ys = [lm_list[i].y * H for i in ids] return (float(np.mean(xs)), float(np.mean(ys))) with mp_face.FaceMesh( static_image_mode=False, max_num_faces=2, refine_landmarks=True, # \u0434\u0430\u0451\u0442 5 \u0442\u043e\u0447\u0435\u043a \u0440\u0430\u0434\u0443\u0436\u043a\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043b\u0430\u0437 (\u0432\u0441\u0435\u0433\u043e 478) min_detection_confidence=0.5, min_tracking_confidence=0.5 ) as face: while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break frame = cv2.flip(frame, 1) start_time = time.perf_counter() rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) rgb.flags.writeable = False res = face.process(rgb) rgb.flags.writeable = True H, W = frame.shape[:2] if res.multi_face_landmarks: # \u0411\u0435\u0440\u0451\u043c \u043f\u0435\u0440\u0432\u043e\u0435 \u043b\u0438\u0446\u043e lm = res.multi_face_landmarks[0].landmark # \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0440\u0430\u0434\u0443\u0436\u0435\u043a (mediapipe, \u043f\u0440\u0438 refine_landmarks=True) right_iris = [469, 470, 471, 472, 468] # \u043f\u0440\u0430\u0432\u0430\u044f (\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u2014 \u0441\u043b\u0435\u0432\u0430) left_iris = [474, 475, 476, 477, 473] # \u043b\u0435\u0432\u0430\u044f (\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u2014 \u0441\u043f\u0440\u0430\u0432\u0430) # \u0426\u0435\u043d\u0442\u0440\u044b \u0440\u0430\u0434\u0443\u0436\u0435\u043a \u0432 \u043f\u0438\u043a\u0441\u0435\u043b\u044f\u0445 rx, ry = iris_center_px(lm, right_iris, W, H) lx, ly = iris_center_px(lm, left_iris, W, H) # \u041c\u0435\u0436\u0437\u0440\u0430\u0447\u043a\u043e\u0432\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u0443\u0433\u043e\u043b \u043d\u0430\u043a\u043b\u043e\u043d\u0430 ipd = math.hypot(lx - rx, ly - ry) angle = -math.degrees(math.atan2(ly - ry, lx - rx)) cx, cy = (rx + lx) * 0.5, (ry + ly) * 0.5 # \u041c\u0430\u0441\u0448\u0442\u0430\u0431 \u043f\u043e \u0448\u0438\u0440\u0438\u043d\u0435 target_w = max(1, int(ipd * SCALE_W)) scale = target_w / png_rgba.shape[1] rotated = rotate_scale_rgba(png_rgba, angle, scale) alpha_blend_rgba(frame, rotated, int(cx), int(cy)) end_time = time.perf_counter() fps = 1.0 / max(1e-6, (end_time - start_time)) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 90), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.putText(frame, \"Press 'Esc' to exit\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA) cv2.imshow(\"FaceMesh Virtual Try-On\", frame) cap.release() cv2.destroyAllWindows() \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0434\u043b\u044f \u043b\u0438\u0446\u0430. \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 import cv2 import mediapipe as mp import time, math # ==== \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b ==== CALIB_DIST_M = 0.60 # \u043c\u0435\u0442\u0440\u043e\u0432: \u043d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u043d\u0430\u0436\u043c\u0451\u0442\u0435 'C' SMOOTH_ALPHA = 0.85 # 0..1, \u0431\u043e\u043b\u044c\u0448\u0435 \u2014 \u043f\u043b\u0430\u0432\u043d\u0435\u0435 (\u044d\u043a\u0441\u043f. \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435) mp_face = mp.solutions.face_mesh cap = cv2.VideoCapture(0) calib_C = None # \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 = ipd_px_at_calib * CALIB_DIST_M dist_smooth = None # \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0446\u0435\u043d\u0442\u0440\u0430 \u0440\u0430\u0434\u0443\u0436\u0435\u043a (\u043d\u0443\u0436\u0435\u043d refine_landmarks=True) RIGHT_IRIS_CENTER = 468 LEFT_IRIS_CENTER = 473 with mp_face.FaceMesh( static_image_mode=False, max_num_faces=1, refine_landmarks=True, # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0442\u043e\u0447\u043a\u0438 \u0440\u0430\u0434\u0443\u0436\u043a\u0438 (\u0432\u0441\u0435\u0433\u043e 478) min_detection_confidence=0.5, min_tracking_confidence=0.5 ) as face: while True: ok, frame = cap.read() if not ok: break frame = cv2.flip(frame, 1) start = time.perf_counter() rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) rgb.flags.writeable = False res = face.process(rgb) rgb.flags.writeable = True H, W = frame.shape[:2] ipd_px = None if res.multi_face_landmarks: lm = res.multi_face_landmarks[0].landmark # \u0411\u0435\u0440\u0451\u043c \u0446\u0435\u043d\u0442\u0440\u044b \u0440\u0430\u0434\u0443\u0436\u0435\u043a rx, ry = lm[RIGHT_IRIS_CENTER].x * W, lm[RIGHT_IRIS_CENTER].y * H lx, ly = lm[LEFT_IRIS_CENTER].x * W, lm[LEFT_IRIS_CENTER].y * H ipd_px = math.hypot(lx - rx, ly - ry) # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0446\u0435\u043d\u0442\u0440\u043e\u0432 cv2.circle(frame, (int(rx), int(ry)), 3, (0,255,255), -1, cv2.LINE_AA) cv2.circle(frame, (int(lx), int(ly)), 3, (0,255,255), -1, cv2.LINE_AA) cv2.line(frame, (int(rx), int(ry)), (int(lx), int(ly)), (0,255,255), 2, cv2.LINE_AA) # \u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u0438 if calib_C is not None and ipd_px and ipd_px > 1: dist_m = calib_C / ipd_px # d \u2248 (s0*d0)/s if dist_smooth is None: dist_smooth = dist_m else: dist_smooth = SMOOTH_ALPHA*dist_smooth + (1-SMOOTH_ALPHA)*dist_m text = f\"Distance: {dist_smooth:.2f} m\" else: text = \"Press 'C' at known distance\" # HUD end = time.perf_counter() fps = 1.0 / max(1e-6, (end - start)) cv2.putText(frame, f\"FPS: {int(fps)}\", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 2, cv2.LINE_AA) cv2.putText(frame, text, (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,0), 2, cv2.LINE_AA) if ipd_px: cv2.putText(frame, f\"IPD px: {ipd_px:.1f}\", (20, 120), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,0,255), 2, cv2.LINE_AA) if calib_C is not None: cv2.putText(frame, f\"Calib C: {calib_C:.1f}\", (20, 160), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,200,255), 2, cv2.LINE_AA) cv2.putText(frame, \"C=Calibrate Esc=Exit\", (20, H-20), cv2.FONT_HERSHEY_SIMPLEX, 1, (200,200,200), 2, cv2.LINE_AA) cv2.imshow(\"Iris distance meter\", frame) k = cv2.waitKey(1) & 0xFF if k == 27: # Esc break elif k in (ord('c'), ord('C')): # \u041a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0430: \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 CALIB_DIST_M \u043d\u0430\u0436\u043c\u0438\u0442\u0435 'C' if ipd_px and ipd_px > 1: calib_C = ipd_px * CALIB_DIST_M dist_smooth = None # \u0441\u0431\u0440\u043e\u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430 cap.release() cv2.destroyAllWindows()","title":"Facemesh"},{"location":"py%2Bard/","text":"Python + Arduino \u0418\u0437 \u0441\u0442\u0430\u0442\u044c\u0438 \u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u0445 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0418\u0418 \u043f\u0438\u0448\u0435\u0442\u0441\u044f \u043d\u0430 python \u043d\u0430 \u043c\u043e\u0449\u043d\u043e\u043c \u0436\u0435\u043b\u0435\u0437\u0435, \u043d\u043e \u0441\u0430\u043c \u0440\u043e\u0431\u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043f\u043b\u0430\u0442\u044b Arduino. PC - USB - Arduino \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u043b\u0430\u0442\u0443 Arduino \u043f\u043e USB \u043f\u0440\u043e\u0432\u043e\u0434\u0443 \u043a \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0443. \u0421\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0433\u043e\u0440\u0435\u0442\u044c\u0441\u044f. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0433\u043e\u0440\u044f\u0442 - \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u043e\u0434 \u0438 \u043f\u043b\u0430\u0442\u0443. \u0414\u0430\u043b\u0435\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 COM \u043f\u043e\u0440\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430. - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1: \u0427\u0435\u0440\u0435\u0437 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 Google Chrome: https://googlechromelabs.github.io/serial-terminal - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2: \u0427\u0435\u0440\u0435\u0437 Arduino IDE. - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3: \u0447\u0435\u0440\u0435\u0437 bat \u0441\u043a\u0440\u0438\u043f\u0442 comlist.bat - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 4: python \u0441\u043a\u0440\u0438\u043f\u0442 comcheck.py . \u041d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c pip install pyserial VID/PID \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b USB-\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430. - VID (Vendor ID): 16-\u0431\u0438\u0442\u043d\u044b\u0439 hex \u043a\u043e\u0434 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f. \u0412\u044b\u0434\u0430\u0451\u0442 USB-IF. - PID (Product ID): 16-\u0431\u0438\u0442\u043d\u044b\u0439 hex \u043a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0448\u0438\u0432\u043a\u0438. \u0417\u0430\u0434\u0430\u0451\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c. \u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043f\u043b\u0430\u0442\u044b COM \u043f\u043e\u0440\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f, \u043d\u043e VID/PID \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f. \u041f\u043e\u0442\u043e\u043c\u0443 \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0438\u0441\u043a\u0430\u0442\u044c COM \u043f\u043e\u0440\u0442 \u0447\u0435\u0440\u0435\u0437 VID/PID. \u041f\u0440\u0438\u043c\u0435\u0440 COM \u043f\u043e\u0440\u0442 \u043f\u043e VID/PID from serial.tools import list_ports def com_ports_by_vid_pid(vid, pid, serial_substr=None): if isinstance(vid, str): vid = int(vid, 16) if isinstance(pid, str): pid = int(pid, 16) out = [] for p in list_ports.comports(): if p.vid == vid and p.pid == pid: if serial_substr and (not p.serial_number or serial_substr not in p.serial_number): continue out.append(p.device) return out ports = com_ports_by_vid_pid(\"2341\", \"0043\") print(ports[0] if ports else \"not found\") \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 1 \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0438 \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c 1 - \u0447\u0442\u043e\u0431\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434, 2 - \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434. \u041f\u0440\u0438\u043c\u0435\u0440 1 Arduino void setup() { Serial.begin(9600); pinMode(LED_BUILTIN, OUTPUT); } void loop() { while (Serial.available() > 0) { char c = Serial.read(); if (c == '1') digitalWrite(LED_BUILTIN, HIGH); // ON else if (c == '2') digitalWrite(LED_BUILTIN, LOW); // OFF } } Python import serial, time PORT = \"COM11\" BAUD = 9600 with serial.Serial(PORT, BAUD, timeout=0) as ser: time.sleep(2) print(\"Type. Enter sends. Ctrl+C exits.\") try: while True: s = input() ser.write(s.encode(\"utf-8\")) except KeyboardInterrupt: pass PC - WiFi WiFi - WiFi PC - Bluetooth Jetson - UART - Arduino \u041d\u0430 Jetson Nano \u043f\u0438\u043d\u044b UART: 8 - UART1_TXD 10 - UART1_RXD 6 - GND \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043a UART Arduino, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Serial1 Arduino MEGA : Arduino - Jetson Nano TX1 18 --- UART1_RXD RX1 19 --- UART1_TXD GND --- GND \u041a\u043e\u0434 Jetson - Python import random, time, serial ser = serial.Serial('/dev/ttyTHS1', 9600, timeout=1) while 1: x = random.randint(0,100) y = random.randint(0, 100) ser.write(f\"{x},{y},\\n\".encode(\"utf-8\")) time.sleep(0.1) Arduino Mega int X, Y; String strArr[2]; void setup() { Serial.begin(9600); Serial1.begin(9600); // \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0441 Jetson Serial.println(\"Arduino ready\"); } void loop() { if (Serial1.available()) { String rxString = Serial1.readStringUntil('\\n'); rxString.trim(); int start = 0, idx = 0; int n = rxString.length(); for (int i = 0; i < n; ++i) { if (rxString[i] == ',') { strArr[idx++] = rxString.substring(start, i); start = i + 1; } } if (start < n) strArr[idx++] = rxString.substring(start); X = strArr[0].toInt(); Y = strArr[1].toInt(); Serial.print(X); Serial.print(\" \"); Serial.println(Y); } } Raspberry - UART","title":"Python + Arduino"},{"location":"py%2Bard/#python-arduino","text":"\u0418\u0437 \u0441\u0442\u0430\u0442\u044c\u0438 \u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u0445 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0418\u0418 \u043f\u0438\u0448\u0435\u0442\u0441\u044f \u043d\u0430 python \u043d\u0430 \u043c\u043e\u0449\u043d\u043e\u043c \u0436\u0435\u043b\u0435\u0437\u0435, \u043d\u043e \u0441\u0430\u043c \u0440\u043e\u0431\u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043f\u043b\u0430\u0442\u044b Arduino.","title":"Python + Arduino"},{"location":"py%2Bard/#pc-usb-arduino","text":"","title":"PC - USB - Arduino"},{"location":"py%2Bard/#arduino-usb","text":"\u0421\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u0433\u043e\u0440\u0435\u0442\u044c\u0441\u044f. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0433\u043e\u0440\u044f\u0442 - \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u043e\u0434 \u0438 \u043f\u043b\u0430\u0442\u0443. \u0414\u0430\u043b\u0435\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 COM \u043f\u043e\u0440\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430. - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1: \u0427\u0435\u0440\u0435\u0437 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 Google Chrome: https://googlechromelabs.github.io/serial-terminal - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2: \u0427\u0435\u0440\u0435\u0437 Arduino IDE. - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3: \u0447\u0435\u0440\u0435\u0437 bat \u0441\u043a\u0440\u0438\u043f\u0442 comlist.bat - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 4: python \u0441\u043a\u0440\u0438\u043f\u0442 comcheck.py . \u041d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c pip install pyserial VID/PID \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b USB-\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430. - VID (Vendor ID): 16-\u0431\u0438\u0442\u043d\u044b\u0439 hex \u043a\u043e\u0434 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f. \u0412\u044b\u0434\u0430\u0451\u0442 USB-IF. - PID (Product ID): 16-\u0431\u0438\u0442\u043d\u044b\u0439 hex \u043a\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0448\u0438\u0432\u043a\u0438. \u0417\u0430\u0434\u0430\u0451\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c. \u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043f\u043b\u0430\u0442\u044b COM \u043f\u043e\u0440\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f, \u043d\u043e VID/PID \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f. \u041f\u043e\u0442\u043e\u043c\u0443 \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0438\u0441\u043a\u0430\u0442\u044c COM \u043f\u043e\u0440\u0442 \u0447\u0435\u0440\u0435\u0437 VID/PID. \u041f\u0440\u0438\u043c\u0435\u0440 COM \u043f\u043e\u0440\u0442 \u043f\u043e VID/PID from serial.tools import list_ports def com_ports_by_vid_pid(vid, pid, serial_substr=None): if isinstance(vid, str): vid = int(vid, 16) if isinstance(pid, str): pid = int(pid, 16) out = [] for p in list_ports.comports(): if p.vid == vid and p.pid == pid: if serial_substr and (not p.serial_number or serial_substr not in p.serial_number): continue out.append(p.device) return out ports = com_ports_by_vid_pid(\"2341\", \"0043\") print(ports[0] if ports else \"not found\")","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u043b\u0430\u0442\u0443 Arduino \u043f\u043e USB \u043f\u0440\u043e\u0432\u043e\u0434\u0443 \u043a \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0443."},{"location":"py%2Bard/#_1","text":"1 \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0438 \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c 1 - \u0447\u0442\u043e\u0431\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434, 2 - \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434. \u041f\u0440\u0438\u043c\u0435\u0440 1 Arduino void setup() { Serial.begin(9600); pinMode(LED_BUILTIN, OUTPUT); } void loop() { while (Serial.available() > 0) { char c = Serial.read(); if (c == '1') digitalWrite(LED_BUILTIN, HIGH); // ON else if (c == '2') digitalWrite(LED_BUILTIN, LOW); // OFF } } Python import serial, time PORT = \"COM11\" BAUD = 9600 with serial.Serial(PORT, BAUD, timeout=0) as ser: time.sleep(2) print(\"Type. Enter sends. Ctrl+C exits.\") try: while True: s = input() ser.write(s.encode(\"utf-8\")) except KeyboardInterrupt: pass","title":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"py%2Bard/#pc-wifi","text":"","title":"PC - WiFi"},{"location":"py%2Bard/#wifi-wifi","text":"","title":"WiFi - WiFi"},{"location":"py%2Bard/#pc-bluetooth","text":"","title":"PC - Bluetooth"},{"location":"py%2Bard/#jetson-uart-arduino","text":"\u041d\u0430 Jetson Nano \u043f\u0438\u043d\u044b UART: 8 - UART1_TXD 10 - UART1_RXD 6 - GND \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043a UART Arduino, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Serial1 Arduino MEGA : Arduino - Jetson Nano TX1 18 --- UART1_RXD RX1 19 --- UART1_TXD GND --- GND \u041a\u043e\u0434 Jetson - Python import random, time, serial ser = serial.Serial('/dev/ttyTHS1', 9600, timeout=1) while 1: x = random.randint(0,100) y = random.randint(0, 100) ser.write(f\"{x},{y},\\n\".encode(\"utf-8\")) time.sleep(0.1) Arduino Mega int X, Y; String strArr[2]; void setup() { Serial.begin(9600); Serial1.begin(9600); // \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0441 Jetson Serial.println(\"Arduino ready\"); } void loop() { if (Serial1.available()) { String rxString = Serial1.readStringUntil('\\n'); rxString.trim(); int start = 0, idx = 0; int n = rxString.length(); for (int i = 0; i < n; ++i) { if (rxString[i] == ',') { strArr[idx++] = rxString.substring(start, i); start = i + 1; } } if (start < n) strArr[idx++] = rxString.substring(start); X = strArr[0].toInt(); Y = strArr[1].toInt(); Serial.print(X); Serial.print(\" \"); Serial.println(Y); } }","title":"Jetson - UART - Arduino"},{"location":"py%2Bard/#raspberry-uart","text":"","title":"Raspberry - UART"},{"location":"pycharm/","text":"PyCharm PyCharm \u2014 \u043a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0440\u0435\u0434\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u043b\u044f \u044f\u0437\u044b\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439 JetBrains. - \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435. - \u0415\u0441\u0442\u044c \u0443\u0447\u0435\u0431\u043d\u0430\u044f \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f, \u043d\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432 \u041a\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043d\u0435. :( \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442: https://www.jetbrains.com/pycharm/ \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 https://www.jetbrains.com/pycharm/download/ \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c. \ud83d\uddff PyCharm vs IDLE \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 PyCharm (\u0435\u0434\u0438\u043d\u044b\u0439 \u0441 2025.1) IDLE \u0427\u0442\u043e \u044d\u0442\u043e \u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0430\u044f IDE: \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0443\u0447\u0435\u0431\u043d\u0430\u044f \u0441\u0440\u0435\u0434\u0430: \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 + REPL \u0414\u043b\u044f \u043a\u043e\u0433\u043e \u0423\u0447\u0451\u0431\u0430 \u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u041f\u0435\u0440\u0432\u044b\u0435 \u0448\u0430\u0433\u0438, \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430; \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u044f\u0434\u0440\u043e \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e; 30-\u0434\u043d. Pro-\u0442\u0440\u0438\u0430\u043b \u0421\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 Python \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0438 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435, \u0441 \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043a\u043e\u0434\u0430 \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u041e\u0442\u043b\u0430\u0434\u043a\u0430 \u041f\u043e\u043b\u043d\u044b\u0439 UI: \u0431\u0440\u0435\u0439\u043a\u043f\u043e\u0438\u043d\u0442\u044b, \u0448\u0430\u0433\u0438, watch \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a \u0422\u0435\u0441\u0442\u044b \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f pytest/unittest \u0420\u0443\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a Git \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u041d\u0435\u0442 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 venv/conda \u0422\u043e\u043b\u044c\u043a\u043e \u0432\u043d\u0435 IDLE \u041f\u043b\u0430\u0433\u0438\u043d\u044b / Marketplace \u0415\u0441\u0442\u044c Marketplace \u041d\u0435\u0442 Jupyter \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u043e\u0432 \u0432 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u041d\u0435\u0442 AI-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 JetBrains AI Assistant \u0432 Pro; \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435 \u041d\u0435\u0442 \u0418\u0442\u043e\u0433 \u0414\u043b\u044f \u0441\u0435\u0440\u044c\u0451\u0437\u043d\u043e\u0439 \u0443\u0447\u0451\u0431\u044b \u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0414\u043b\u044f \u0441\u0442\u0430\u0440\u0442\u0430 \u0438 \u0443\u0447\u0435\u0431\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0440\u0435\u0434\u0430 \u2014 \u044d\u0442\u043e \u00ab\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\u00bb \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0412\u043d\u0443\u0442\u0440\u0438 \u043b\u0435\u0436\u0438\u0442 \u0441\u0432\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python \u0438 \u0441\u0432\u043e\u0438 \u043f\u0430\u043a\u0435\u0442\u044b. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043d\u0435 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0443\u044e\u0442 \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c, \u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f \u0447\u0438\u0441\u0442\u043e\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0443\u0436\u0435\u043d Python 3.12 \u0430 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e Python 3.9. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u0432\u043e\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0440\u0435\u0434\u0430 \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439. \u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u0441\u0438\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0417\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e: - \u0420\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. - \u041b\u0435\u0433\u043a\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435. - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0435\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c: \u0441\u043b\u043e\u043c\u0430\u043b\u0438 \u0441\u0440\u0435\u0434\u0443 \u2014 \u0443\u0434\u0430\u043b\u0438\u043b\u0438 \u043f\u0430\u043f\u043a\u0443, \u043f\u0440\u043e\u0435\u043a\u0442 \u0446\u0435\u043b. \u0412 IDLE \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b. \u0412 PyCharm \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u0443 venv \u0438\u043b\u0438 conda. venv venv \u2014 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0438 \u043b\u0451\u0433\u043a\u0438\u0439. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0437\u0430\u0434\u0430\u0447: \u0432\u0435\u0431-\u043f\u0440\u043e\u0435\u043a\u0442, \u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. \u0418\u0434\u0451\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 Python. # Windows (PowerShell) py -3.12 -m venv .venv .\\.venv\\Scripts\\Activate.ps1 # Windows (Cmd) py -3.12 -m venv .venv .\\.venv\\Scripts\\activate.bat # macOS / Linux python3 -m venv .venv source .venv/bin/activate \u0420\u0430\u0431\u043e\u0442\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0440\u0435\u0434\u044b python -m pip install --upgrade pip pip install <\u043f\u0430\u043a\u0435\u0442> pip freeze > requirements.txt # \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 pip install -r requirements.txt # \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u043c \u041f\u041a deactivate \u041a\u043e\u0433\u0434\u0430 \u0432\u044b\u0431\u0440\u0430\u0442\u044c venv: \u043d\u0443\u0436\u0435\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439, \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0431\u0435\u0437 \u0442\u044f\u0436\u0451\u043b\u044b\u0445 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412 PyCharm \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u044e python (\u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0440\u044f\u043c\u043e \u0442\u0430\u043c). \u0411\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043f\u0430\u043f\u043a\u0430 .venv \u0412 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e (.venv) \u0435\u0441\u043b\u0438 \u0441\u0440\u0435\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0430. \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0440\u0435\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438. \u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0435\u0434, \u043d\u043e \u044d\u0442\u043e \u041d\u0415 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c. \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438 \u043f\u0435\u0440\u0435\u0441\u043e\u0437\u0434\u0430\u0442\u044c venv: deactivate; if (Test-Path .venv) { Remove-Item .venv -Recurse -Force } py -3.12 -m venv .venv Set-ExecutionPolicy -Scope Process Bypass -Force .\\.venv\\Scripts\\Activate.ps1 if (Test-Path requirements.txt) { pip install -r requirements.txt } conda conda \u2014 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0439 + \u043f\u0430\u043a\u0435\u0442\u043e\u0432. \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u2014 \u043d\u0430\u0443\u0447\u043d\u044b\u0439 \u0441\u0442\u0435\u043a, \u043f\u0430\u043a\u0435\u0442\u044b \u0441 C/Fortran, CUDA/GPU, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e Python. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 Miniconda, mamba \u0438\u043b\u0438 Anaconda. \u0421\u0430\u043c PyCharm \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Miniconda - \u0442\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 - Anaconda \u00ab\u0422\u043e\u043b\u0441\u0442\u0430\u044f\u00bb \u0441\u0431\u043e\u0440\u043a\u0430: conda + Navigator + \u0441\u043e\u0442\u043d\u0438 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0441\u0440\u0430\u0437\u0443. \u041f\u043b\u044e\u0441 \u2014 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0444\u043b\u0430\u0439\u043d \u00ab\u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\u00bb. \u041c\u0438\u043d\u0443\u0441\u044b \u2014 \u0432\u0435\u0441 \u0438 \u0434\u043e\u043b\u0433\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. - Miniconda \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a: conda + Python. \u0421\u0442\u0430\u0432\u0438\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u043e\u0435. \u041f\u043b\u044e\u0441\u044b \u2014 \u043b\u0451\u0433\u043a\u0430\u044f, \u0447\u0438\u0441\u0442\u0430\u044f. \u041c\u0438\u043d\u0443\u0441 \u2014 \u0432\u0441\u0451 \u0434\u043e\u043a\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u0438\u043c. Navigator \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438 \u0436\u0435\u043b\u0430\u043d\u0438\u0438. - mamba \u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0437\u0430\u043c\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c conda (\u0442\u043e\u0442 \u0436\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u043e\u043c\u0430\u043d\u0434). \u0420\u0435\u0448\u0430\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438 \u043a\u0430\u0447\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0421\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0432 \u0442\u043e\u0442 \u0436\u0435 base \u0438\u043b\u0438 \u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u044b \u0441 mamba \u0441\u0440\u0430\u0437\u0443. - Miniforge / Mambaforge \u041c\u0438\u043d\u0438-\u0441\u0431\u043e\u0440\u043a\u0438 \u0441 mamba \u0438 \u043a\u0430\u043d\u0430\u043b\u043e\u043c conda-forge \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u0423\u0434\u043e\u0431\u043d\u043e, \u0435\u0441\u043b\u0438 \u0436\u0438\u0432\u0451\u0442\u0435 \u043d\u0430 conda-forge. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f: \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1: \u0421\u0440\u0435\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u043f\u0430\u043f\u043a\u0435 \u0441\u0430\u043c\u043e\u0439 conda, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 C:\\Users\\aztec\\miniconda3\\envs conda create -n proj python=3.12 conda activate proj conda deactivate #\u0434\u0435\u043a\u0430\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0418\u043b\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 2: \u0421\u0440\u0435\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u043f\u0430\u043f\u043a\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 conda create -p .\\.conda python=3.12 conda activate .\\.conda conda deactivate #\u0434\u0435\u043a\u0430\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u0434","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0432 PyCharm"},{"location":"pycharm/#pycharm","text":"PyCharm \u2014 \u043a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0440\u0435\u0434\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u043b\u044f \u044f\u0437\u044b\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439 JetBrains. - \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435. - \u0415\u0441\u0442\u044c \u0443\u0447\u0435\u0431\u043d\u0430\u044f \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f, \u043d\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432 \u041a\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043d\u0435. :( \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442: https://www.jetbrains.com/pycharm/","title":"PyCharm"},{"location":"pycharm/#_1","text":"\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 https://www.jetbrains.com/pycharm/download/ \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c. \ud83d\uddff","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430"},{"location":"pycharm/#pycharm-vs-idle","text":"\u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 PyCharm (\u0435\u0434\u0438\u043d\u044b\u0439 \u0441 2025.1) IDLE \u0427\u0442\u043e \u044d\u0442\u043e \u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0430\u044f IDE: \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0443\u0447\u0435\u0431\u043d\u0430\u044f \u0441\u0440\u0435\u0434\u0430: \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 + REPL \u0414\u043b\u044f \u043a\u043e\u0433\u043e \u0423\u0447\u0451\u0431\u0430 \u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u041f\u0435\u0440\u0432\u044b\u0435 \u0448\u0430\u0433\u0438, \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430; \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u044f\u0434\u0440\u043e \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e; 30-\u0434\u043d. Pro-\u0442\u0440\u0438\u0430\u043b \u0421\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 Python \u041f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0438 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435, \u0441 \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043a\u043e\u0434\u0430 \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u041e\u0442\u043b\u0430\u0434\u043a\u0430 \u041f\u043e\u043b\u043d\u044b\u0439 UI: \u0431\u0440\u0435\u0439\u043a\u043f\u043e\u0438\u043d\u0442\u044b, \u0448\u0430\u0433\u0438, watch \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a \u0422\u0435\u0441\u0442\u044b \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f pytest/unittest \u0420\u0443\u0447\u043d\u043e\u0439 \u0437\u0430\u043f\u0443\u0441\u043a Git \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u041d\u0435\u0442 \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 venv/conda \u0422\u043e\u043b\u044c\u043a\u043e \u0432\u043d\u0435 IDLE \u041f\u043b\u0430\u0433\u0438\u043d\u044b / Marketplace \u0415\u0441\u0442\u044c Marketplace \u041d\u0435\u0442 Jupyter \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u043e\u0432 \u0432 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u041d\u0435\u0442 AI-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 JetBrains AI Assistant \u0432 Pro; \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435 \u041d\u0435\u0442 \u0418\u0442\u043e\u0433 \u0414\u043b\u044f \u0441\u0435\u0440\u044c\u0451\u0437\u043d\u043e\u0439 \u0443\u0447\u0451\u0431\u044b \u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0414\u043b\u044f \u0441\u0442\u0430\u0440\u0442\u0430 \u0438 \u0443\u0447\u0435\u0431\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432","title":"PyCharm vs IDLE"},{"location":"pycharm/#_2","text":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0440\u0435\u0434\u0430 \u2014 \u044d\u0442\u043e \u00ab\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\u00bb \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0412\u043d\u0443\u0442\u0440\u0438 \u043b\u0435\u0436\u0438\u0442 \u0441\u0432\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python \u0438 \u0441\u0432\u043e\u0438 \u043f\u0430\u043a\u0435\u0442\u044b. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043d\u0435 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0443\u044e\u0442 \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c, \u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f \u0447\u0438\u0441\u0442\u043e\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0443\u0436\u0435\u043d Python 3.12 \u0430 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e Python 3.9. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u0432\u043e\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0440\u0435\u0434\u0430 \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439. \u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u0441\u0438\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0417\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e: - \u0420\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. - \u041b\u0435\u0433\u043a\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435. - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0435\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c: \u0441\u043b\u043e\u043c\u0430\u043b\u0438 \u0441\u0440\u0435\u0434\u0443 \u2014 \u0443\u0434\u0430\u043b\u0438\u043b\u0438 \u043f\u0430\u043f\u043a\u0443, \u043f\u0440\u043e\u0435\u043a\u0442 \u0446\u0435\u043b. \u0412 IDLE \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b. \u0412 PyCharm \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u0443 venv \u0438\u043b\u0438 conda.","title":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b"},{"location":"pycharm/#venv","text":"venv \u2014 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0438 \u043b\u0451\u0433\u043a\u0438\u0439. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0437\u0430\u0434\u0430\u0447: \u0432\u0435\u0431-\u043f\u0440\u043e\u0435\u043a\u0442, \u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. \u0418\u0434\u0451\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 Python. # Windows (PowerShell) py -3.12 -m venv .venv .\\.venv\\Scripts\\Activate.ps1 # Windows (Cmd) py -3.12 -m venv .venv .\\.venv\\Scripts\\activate.bat # macOS / Linux python3 -m venv .venv source .venv/bin/activate \u0420\u0430\u0431\u043e\u0442\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0440\u0435\u0434\u044b python -m pip install --upgrade pip pip install <\u043f\u0430\u043a\u0435\u0442> pip freeze > requirements.txt # \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 pip install -r requirements.txt # \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u043c \u041f\u041a deactivate \u041a\u043e\u0433\u0434\u0430 \u0432\u044b\u0431\u0440\u0430\u0442\u044c venv: \u043d\u0443\u0436\u0435\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439, \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0431\u0435\u0437 \u0442\u044f\u0436\u0451\u043b\u044b\u0445 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412 PyCharm \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u044e python (\u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0440\u044f\u043c\u043e \u0442\u0430\u043c). \u0411\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043f\u0430\u043f\u043a\u0430 .venv \u0412 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e (.venv) \u0435\u0441\u043b\u0438 \u0441\u0440\u0435\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0430. \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0440\u0435\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438. \u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0435\u0434, \u043d\u043e \u044d\u0442\u043e \u041d\u0415 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c. \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438 \u043f\u0435\u0440\u0435\u0441\u043e\u0437\u0434\u0430\u0442\u044c venv: deactivate; if (Test-Path .venv) { Remove-Item .venv -Recurse -Force } py -3.12 -m venv .venv Set-ExecutionPolicy -Scope Process Bypass -Force .\\.venv\\Scripts\\Activate.ps1 if (Test-Path requirements.txt) { pip install -r requirements.txt }","title":"venv"},{"location":"pycharm/#conda","text":"conda \u2014 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0439 + \u043f\u0430\u043a\u0435\u0442\u043e\u0432. \u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u2014 \u043d\u0430\u0443\u0447\u043d\u044b\u0439 \u0441\u0442\u0435\u043a, \u043f\u0430\u043a\u0435\u0442\u044b \u0441 C/Fortran, CUDA/GPU, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e Python. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 Miniconda, mamba \u0438\u043b\u0438 Anaconda. \u0421\u0430\u043c PyCharm \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Miniconda - \u0442\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 - Anaconda \u00ab\u0422\u043e\u043b\u0441\u0442\u0430\u044f\u00bb \u0441\u0431\u043e\u0440\u043a\u0430: conda + Navigator + \u0441\u043e\u0442\u043d\u0438 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0441\u0440\u0430\u0437\u0443. \u041f\u043b\u044e\u0441 \u2014 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0444\u043b\u0430\u0439\u043d \u00ab\u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\u00bb. \u041c\u0438\u043d\u0443\u0441\u044b \u2014 \u0432\u0435\u0441 \u0438 \u0434\u043e\u043b\u0433\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. - Miniconda \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a: conda + Python. \u0421\u0442\u0430\u0432\u0438\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u043e\u0435. \u041f\u043b\u044e\u0441\u044b \u2014 \u043b\u0451\u0433\u043a\u0430\u044f, \u0447\u0438\u0441\u0442\u0430\u044f. \u041c\u0438\u043d\u0443\u0441 \u2014 \u0432\u0441\u0451 \u0434\u043e\u043a\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u0438\u043c. Navigator \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438 \u0436\u0435\u043b\u0430\u043d\u0438\u0438. - mamba \u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0437\u0430\u043c\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c conda (\u0442\u043e\u0442 \u0436\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u043e\u043c\u0430\u043d\u0434). \u0420\u0435\u0448\u0430\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438 \u043a\u0430\u0447\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0421\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0432 \u0442\u043e\u0442 \u0436\u0435 base \u0438\u043b\u0438 \u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u044b \u0441 mamba \u0441\u0440\u0430\u0437\u0443. - Miniforge / Mambaforge \u041c\u0438\u043d\u0438-\u0441\u0431\u043e\u0440\u043a\u0438 \u0441 mamba \u0438 \u043a\u0430\u043d\u0430\u043b\u043e\u043c conda-forge \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u0423\u0434\u043e\u0431\u043d\u043e, \u0435\u0441\u043b\u0438 \u0436\u0438\u0432\u0451\u0442\u0435 \u043d\u0430 conda-forge. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f: \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1: \u0421\u0440\u0435\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u043f\u0430\u043f\u043a\u0435 \u0441\u0430\u043c\u043e\u0439 conda, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 C:\\Users\\aztec\\miniconda3\\envs conda create -n proj python=3.12 conda activate proj conda deactivate #\u0434\u0435\u043a\u0430\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0418\u043b\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 2: \u0421\u0440\u0435\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u043f\u0430\u043f\u043a\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 conda create -p .\\.conda python=3.12 conda activate .\\.conda conda deactivate #\u0434\u0435\u043a\u0430\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c","title":"conda"},{"location":"pycharm/#_3","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u0434","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"raspberry/","text":"TBD","title":"Raspberry Pi"},{"location":"raspberry/#tbd","text":"","title":"TBD"},{"location":"speech-to-text/","text":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 (speech-to-text (STT)) \u2014 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435). Whisper \u043e\u0442 OpenAI Whisper \u2014 \u044d\u0442\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0438 \u043e\u0442 OpenAI, \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 680 000 \u0447\u0430\u0441\u0430\u0445 \u043c\u043d\u043e\u0433\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0445 \u0438 \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u043f\u043e\u0434 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435\u043c. \u041e\u043d\u0430 \u0443\u043c\u0435\u0435\u0442 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0440\u0435\u0447\u044c \u0432 \u0442\u0435\u043a\u0441\u0442, \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0435\u0451 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u044f\u0437\u044b\u043a \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0442\u0430\u0439\u043c\u043a\u043e\u0434\u044b \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432. \u041c\u043e\u0434\u0435\u043b\u044c \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430 \u043a \u0448\u0443\u043c\u0430\u043c \u0438 \u0430\u043a\u0446\u0435\u043d\u0442\u0430\u043c, \u0430 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u043a\u043e\u043b\u043e 100 \u044f\u0437\u044b\u043a\u043e\u0432. \u0421\u0430\u0439\u0442 , GitHub . \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: Model Size (GB) Req. VRAM (~) Download tiny 0.076 ~1 GB link tiny.en 0.076 ~1 GB link base 0.145 ~1 GB link base.en 0.145 ~1 GB link small 0.484 ~2 GB link small.en 0.484 ~2 GB link medium 1.528 ~5 GB link medium.en 1.528 ~5 GB link large-v1 3.087 ~10 GB link large-v2 3.087 ~10 GB link large-v3 3.087 ~10 GB link large-v3-turbo 1.618 ~6 GB link \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f: \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435 \u0432 IDLE \u0430 \u0432 PyCharm (\u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0439 IDE) 1. \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c python (\u043d\u0435 \u0432\u044b\u0448\u0435 3.11) \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 > pip install librosa, whisper 2. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u0432\u0435\u0440\u0445\u0443 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c. 3. \u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0430\u0443\u0434\u0438\u043e\u0444\u0430\u0439\u043b \u0441 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0447\u044c\u044e \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430. 4. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434: import librosa, whisper MODEL_PATH = r\"C:\\Users\\aztec\\PycharmProjects\\whisper-test\\tiny.pt\" model = whisper.load_model(MODEL_PATH, device=\"cpu\") audio = librosa.load(\"2.wav\", sr=16000, mono=True, dtype=\"float32\")[0] result = model.transcribe(audio, fp16=False) for seg in result[\"segments\"]: print(f\"[{seg['start']:.2f} \u2192 {seg['end']:.2f}] {seg['text']}\") \u041a\u043e\u0434 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0430\u0443\u0434\u0438\u043e \u043f\u0440\u044f\u043c\u043e \u0432 IDE: \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c: pip install sounddevice, soundfile import sounddevice as sd, soundfile as sf, time RATE = 16000 SECONDS = 10 #\u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0441\u0435\u043a\u043d\u0434\u0430\u0445 print(\"Recording...\") audio = sd.rec(int(SECONDS*RATE), samplerate=RATE, channels=1, dtype='float32') sd.wait() fname = f\"rec_{int(time.time())}.wav\" sf.write(fname, audio, RATE) print(\"Saved:\", fname) \u0417\u0430\u043f\u0438\u0441\u044c + \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 import librosa, whisper import sounddevice as sd, soundfile as sf, time MODEL_PATH = r\"C:\\Users\\aztec\\PycharmProjects\\whisper-test\\tiny.pt\" model = whisper.load_model(MODEL_PATH, device=\"cpu\") SECONDS = 10 print(\"Recording for \", SECONDS, \"seconds...\") audio = sd.rec(int(SECONDS*16000), samplerate=16000, channels=1, dtype='float32') sd.wait() fname = f\"rec_{int(time.time())}.wav\" sf.write(fname, audio, 16000) print(\"Saved:\", fname) audio = librosa.load(fname, sr=16000, mono=True, dtype=\"float32\")[0] result = model.transcribe(audio, fp16=False) for seg in result[\"segments\"]: print(f\"[{seg['start']:.2f} \u2192 {seg['end']:.2f}] {seg['text']}\") \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 \u043d\u0430 \u043b\u0435\u0442\u0443 import numpy as np, webrtcvad, sounddevice as sd, queue, threading, time, whisper, collections, os SR = 16000 FRAME_MS = 20 # 10/20/30 only FRAME_SAMPLES = SR * FRAME_MS // 1000 VAD_AGGR = 2 # 0..3 PRE_MS, END_MS, MAX_SEG_MS = 300, 600, 30000 # choose device automatically DEVICE = \"cuda\" if (os.environ.get(\"CUDA_VISIBLE_DEVICES\", \"\") != \"\" or (hasattr(__import__(\"torch\"), \"cuda\") and __import__(\"torch\").cuda.is_available())) else \"cpu\" model = whisper.load_model(\"turbo\", device=DEVICE) # or path to .pt # queues frames_q = queue.Queue(maxsize=128) # raw int16 frames from audio callback segs_q = queue.Queue(maxsize=32) # finalized float32 segments for ASR stop = threading.Event() # audio callback: push fixed-size frames ASAP def audio_cb(indata, frames, time_info, status): if status: pass try: frames_q.put_nowait(indata.copy()) # int16, shape (N,1) except queue.Full: pass # VAD segmenter: consume frames_q, emit speech segments to segs_q def segmenter(): vad = webrtcvad.Vad(VAD_AGGR) ring = collections.deque(maxlen=PRE_MS // FRAME_MS) triggered = False segment = [] silence = 0 t = 0.0 seg_start_time = 0.0 def i16_to_f32(buf: np.ndarray) -> np.ndarray: x = buf.view(np.int16).astype(np.float32, copy=False) / 32768.0 return x while not (stop.is_set() and frames_q.empty()): try: frame = frames_q.get(timeout=0.1) # (N,1) int16 except queue.Empty: continue b = frame.tobytes() is_speech = vad.is_speech(b, SR) if not triggered: ring.append(frame) if is_speech: triggered = True seg_start_time = max(0.0, t - len(ring) * FRAME_MS / 1000.0) segment = list(ring); ring.clear() silence = 0 else: segment.append(frame) silence = 0 if is_speech else silence + 1 dur_ms = len(segment) * FRAME_MS if silence * FRAME_MS >= END_MS or dur_ms >= MAX_SEG_MS: seg = np.concatenate(segment, axis=0).reshape(-1, 1) # int16 mono audio = i16_to_f32(seg).flatten().astype(np.float32, copy=False) try: segs_q.put_nowait((audio, seg_start_time)) except queue.Full: pass triggered = False segment = [] silence = 0 t += FRAME_MS / 1000.0 frames_q.task_done() # ASR worker: consume segs_q, run Whisper def transcriber(): while not (stop.is_set() and segs_q.empty()): try: audio, t0 = segs_q.get(timeout=0.1) except queue.Empty: continue r = model.transcribe(audio, fp16=(DEVICE==\"cuda\")) for s in r[\"segments\"]: print(f\"[{t0 + s['start']:.2f} \u2192 {t0 + s['end']:.2f}] {s['text']}\") segs_q.task_done() # run stream = sd.InputStream(samplerate=SR, channels=1, dtype='int16', blocksize=FRAME_SAMPLES, callback=audio_cb) seg_th = threading.Thread(target=segmenter, daemon=True) asr_th = threading.Thread(target=transcriber, daemon=True) print(f\"Realtime VAD+ASR; device={DEVICE}. Ctrl+C to stop.\") with stream: seg_th.start(); asr_th.start() try: while True: time.sleep(0.2) except KeyboardInterrupt: stop.set() seg_th.join(timeout=2); asr_th.join(timeout=2)","title":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438"},{"location":"speech-to-text/#_1","text":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 (speech-to-text (STT)) \u2014 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435).","title":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438"},{"location":"speech-to-text/#whisper-openai","text":"Whisper \u2014 \u044d\u0442\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0438 \u043e\u0442 OpenAI, \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 680 000 \u0447\u0430\u0441\u0430\u0445 \u043c\u043d\u043e\u0433\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0445 \u0438 \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u043f\u043e\u0434 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435\u043c. \u041e\u043d\u0430 \u0443\u043c\u0435\u0435\u0442 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0440\u0435\u0447\u044c \u0432 \u0442\u0435\u043a\u0441\u0442, \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0435\u0451 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u044f\u0437\u044b\u043a \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0442\u0430\u0439\u043c\u043a\u043e\u0434\u044b \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432. \u041c\u043e\u0434\u0435\u043b\u044c \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430 \u043a \u0448\u0443\u043c\u0430\u043c \u0438 \u0430\u043a\u0446\u0435\u043d\u0442\u0430\u043c, \u0430 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u043a\u043e\u043b\u043e 100 \u044f\u0437\u044b\u043a\u043e\u0432. \u0421\u0430\u0439\u0442 , GitHub .","title":"Whisper \u043e\u0442 OpenAI"},{"location":"speech-to-text/#_2","text":"Model Size (GB) Req. VRAM (~) Download tiny 0.076 ~1 GB link tiny.en 0.076 ~1 GB link base 0.145 ~1 GB link base.en 0.145 ~1 GB link small 0.484 ~2 GB link small.en 0.484 ~2 GB link medium 1.528 ~5 GB link medium.en 1.528 ~5 GB link large-v1 3.087 ~10 GB link large-v2 3.087 ~10 GB link large-v3 3.087 ~10 GB link large-v3-turbo 1.618 ~6 GB link","title":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:"},{"location":"speech-to-text/#_3","text":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435 \u0432 IDLE \u0430 \u0432 PyCharm (\u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0439 IDE) 1. \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c python (\u043d\u0435 \u0432\u044b\u0448\u0435 3.11) \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 > pip install librosa, whisper 2. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u0432\u0435\u0440\u0445\u0443 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c. 3. \u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0430\u0443\u0434\u0438\u043e\u0444\u0430\u0439\u043b \u0441 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0447\u044c\u044e \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430. 4. \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434: import librosa, whisper MODEL_PATH = r\"C:\\Users\\aztec\\PycharmProjects\\whisper-test\\tiny.pt\" model = whisper.load_model(MODEL_PATH, device=\"cpu\") audio = librosa.load(\"2.wav\", sr=16000, mono=True, dtype=\"float32\")[0] result = model.transcribe(audio, fp16=False) for seg in result[\"segments\"]: print(f\"[{seg['start']:.2f} \u2192 {seg['end']:.2f}] {seg['text']}\") \u041a\u043e\u0434 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0430\u0443\u0434\u0438\u043e \u043f\u0440\u044f\u043c\u043e \u0432 IDE: \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c: pip install sounddevice, soundfile import sounddevice as sd, soundfile as sf, time RATE = 16000 SECONDS = 10 #\u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0441\u0435\u043a\u043d\u0434\u0430\u0445 print(\"Recording...\") audio = sd.rec(int(SECONDS*RATE), samplerate=RATE, channels=1, dtype='float32') sd.wait() fname = f\"rec_{int(time.time())}.wav\" sf.write(fname, audio, RATE) print(\"Saved:\", fname) \u0417\u0430\u043f\u0438\u0441\u044c + \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 import librosa, whisper import sounddevice as sd, soundfile as sf, time MODEL_PATH = r\"C:\\Users\\aztec\\PycharmProjects\\whisper-test\\tiny.pt\" model = whisper.load_model(MODEL_PATH, device=\"cpu\") SECONDS = 10 print(\"Recording for \", SECONDS, \"seconds...\") audio = sd.rec(int(SECONDS*16000), samplerate=16000, channels=1, dtype='float32') sd.wait() fname = f\"rec_{int(time.time())}.wav\" sf.write(fname, audio, 16000) print(\"Saved:\", fname) audio = librosa.load(fname, sr=16000, mono=True, dtype=\"float32\")[0] result = model.transcribe(audio, fp16=False) for seg in result[\"segments\"]: print(f\"[{seg['start']:.2f} \u2192 {seg['end']:.2f}] {seg['text']}\") \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 \u043d\u0430 \u043b\u0435\u0442\u0443 import numpy as np, webrtcvad, sounddevice as sd, queue, threading, time, whisper, collections, os SR = 16000 FRAME_MS = 20 # 10/20/30 only FRAME_SAMPLES = SR * FRAME_MS // 1000 VAD_AGGR = 2 # 0..3 PRE_MS, END_MS, MAX_SEG_MS = 300, 600, 30000 # choose device automatically DEVICE = \"cuda\" if (os.environ.get(\"CUDA_VISIBLE_DEVICES\", \"\") != \"\" or (hasattr(__import__(\"torch\"), \"cuda\") and __import__(\"torch\").cuda.is_available())) else \"cpu\" model = whisper.load_model(\"turbo\", device=DEVICE) # or path to .pt # queues frames_q = queue.Queue(maxsize=128) # raw int16 frames from audio callback segs_q = queue.Queue(maxsize=32) # finalized float32 segments for ASR stop = threading.Event() # audio callback: push fixed-size frames ASAP def audio_cb(indata, frames, time_info, status): if status: pass try: frames_q.put_nowait(indata.copy()) # int16, shape (N,1) except queue.Full: pass # VAD segmenter: consume frames_q, emit speech segments to segs_q def segmenter(): vad = webrtcvad.Vad(VAD_AGGR) ring = collections.deque(maxlen=PRE_MS // FRAME_MS) triggered = False segment = [] silence = 0 t = 0.0 seg_start_time = 0.0 def i16_to_f32(buf: np.ndarray) -> np.ndarray: x = buf.view(np.int16).astype(np.float32, copy=False) / 32768.0 return x while not (stop.is_set() and frames_q.empty()): try: frame = frames_q.get(timeout=0.1) # (N,1) int16 except queue.Empty: continue b = frame.tobytes() is_speech = vad.is_speech(b, SR) if not triggered: ring.append(frame) if is_speech: triggered = True seg_start_time = max(0.0, t - len(ring) * FRAME_MS / 1000.0) segment = list(ring); ring.clear() silence = 0 else: segment.append(frame) silence = 0 if is_speech else silence + 1 dur_ms = len(segment) * FRAME_MS if silence * FRAME_MS >= END_MS or dur_ms >= MAX_SEG_MS: seg = np.concatenate(segment, axis=0).reshape(-1, 1) # int16 mono audio = i16_to_f32(seg).flatten().astype(np.float32, copy=False) try: segs_q.put_nowait((audio, seg_start_time)) except queue.Full: pass triggered = False segment = [] silence = 0 t += FRAME_MS / 1000.0 frames_q.task_done() # ASR worker: consume segs_q, run Whisper def transcriber(): while not (stop.is_set() and segs_q.empty()): try: audio, t0 = segs_q.get(timeout=0.1) except queue.Empty: continue r = model.transcribe(audio, fp16=(DEVICE==\"cuda\")) for s in r[\"segments\"]: print(f\"[{t0 + s['start']:.2f} \u2192 {t0 + s['end']:.2f}] {s['text']}\") segs_q.task_done() # run stream = sd.InputStream(samplerate=SR, channels=1, dtype='int16', blocksize=FRAME_SAMPLES, callback=audio_cb) seg_th = threading.Thread(target=segmenter, daemon=True) asr_th = threading.Thread(target=transcriber, daemon=True) print(f\"Realtime VAD+ASR; device={DEVICE}. Ctrl+C to stop.\") with stream: seg_th.start(); asr_th.start() try: while True: time.sleep(0.2) except KeyboardInterrupt: stop.set() seg_th.join(timeout=2); asr_th.join(timeout=2)","title":"\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f:"},{"location":"tgai/","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0431\u043e\u0442\u0430 \u0438 \u0441\u0432\u044f\u0437\u043a\u0430 \u0441 \u0418\u0418 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0431\u043e\u0442 \u044d\u0442\u043e \u043f\u0440\u0438\u043a\u043e\u043b\u044c\u043d\u043e \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u0430 \u0417\u0430\u0445\u043e\u0434\u0438\u043c \u0432 Telegram- \u0431\u043e\u0442\u0430 @BotFather. \u0417\u0430\u0442\u0435\u043c \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u043c \u00abstart\u00bb \u0438 \u0438\u0437 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 /newbot. \u0412\u0432\u043e\u0434\u0438\u043c \u0438\u043c\u044f \u0438 \u043d\u0438\u043a \u0432\u0430\u0448\u0435\u0433\u043e Telegram-\u0431\u043e\u0442\u0430. \u041d\u0438\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 _bot \u041d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c API TOKEN \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u041d\u0438\u043a\u043e\u043c\u0443 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0439\u0442\u0435 API TOKEN! \u041a\u043e\u0434 \u0434\u043b\u044f \u0431\u043e\u0442\u0430 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0443 aiogram (\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f Telegram-\u0431\u043e\u0442\u043e\u0432 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python): pip install aiogram \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f aiogram . \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u0434: import asyncio from aiogram import Bot, Dispatcher, F, Router from aiogram.types import Message from aiogram.filters import CommandStart API_TOKEN = \"YOUR_BOT_TOKEN_HERE\" # \u0432\u0441\u0442\u0430\u0432\u044c \u0441\u0432\u043e\u0439 \u0442\u043e\u043a\u0435\u043d router = Router() @router.message(CommandStart()) async def on_start(message: Message): await message.answer(\"\u041f\u0440\u0438\u0432\u0435\u0442! \ud83d\udc4b \u041d\u0430\u043f\u0438\u0448\u0438 '\u0441\u0430\u043b\u0430\u043c' \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.\") @router.message(F.text, F.text.lower() == \"\u0441\u0430\u043b\u0430\u043c\") async def reply(message: Message): await message.answer(\"\u0423\u0430\u043b\u0435\u0439\u043a\u0443\u043c! \ud83d\udc4b\") async def main(): bot = Bot(token=API_TOKEN) dp = Dispatcher() dp.include_router(router) await dp.start_polling(bot) if __name__ == \"__main__\": asyncio.run(main()) \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0433\u0440\u044b. \u041a\u0440\u0435\u0441\u0442\u0438\u043a\u0438 \u043d\u043e\u043b\u0438\u043a\u0438 import asyncio, random from aiogram import Bot, Dispatcher, F, Router from aiogram.filters import CommandStart from aiogram.types import Message, CallbackQuery from aiogram.utils.keyboard import InlineKeyboardBuilder API_TOKEN = \"YOUR_BOT_TOKEN_HERE\" router = Router() GAMES: dict[int, list[str]] = {} WIN = [(0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6)] def new_board(): return [' '] * 9 def avail(b): return [i for i,v in enumerate(b) if v == ' '] def winner(b): for a,b1,c in WIN: line = [b[a], b[b1], b[c]] if line[0] != ' ' and len(set(line)) == 1: return line[0] return \"draw\" if not avail(b) else None def would_win(b, s, i): t = b.copy(); t[i] = s return winner(t) == s def bot_move(b): for i in avail(b): if would_win(b, 'O', i): return i for i in avail(b): if would_win(b, 'X', i): return i if 4 in avail(b): return 4 for i in [0,2,6,8]: if i in avail(b): return i return random.choice(avail(b)) def board_kb(b, finished=False): kb = InlineKeyboardBuilder() sym = lambda v: '\u274c' if v == 'X' else ('\u2b55' if v == 'O' else '\u00b7') for i in range(9): text = sym(b[i]) cb = \"ttt:noop\" if finished or b[i] != ' ' else f\"ttt:{i}\" kb.button(text=text, callback_data=cb) kb.adjust(3,3,3) return kb.as_markup() def status_text(b): w = winner(b) if w == 'X': return \"\u0422\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b. \u2705\" if w == 'O': return \"\u0411\u043e\u0442 \u0432\u044b\u0438\u0433\u0440\u0430\u043b. \u274c\" if w == \"draw\": return \"\u041d\u0438\u0447\u044c\u044f. \u23f8\" return \"\u0422\u0432\u043e\u0439 \u0445\u043e\u0434: \u274c\" @router.message(CommandStart()) async def start(m: Message): GAMES[m.chat.id] = new_board() await m.answer(\"\u041a\u0440\u0435\u0441\u0442\u0438\u043a\u0438-\u043d\u043e\u043b\u0438\u043a\u0438. \u0422\u044b \u0438\u0433\u0440\u0430\u0435\u0448\u044c \u274c.\", reply_markup=board_kb(GAMES[m.chat.id])) @router.callback_query(F.data == \"ttt:noop\") async def noop(c: CallbackQuery): await c.answer() @router.callback_query(F.data.startswith(\"ttt:\")) async def play(c: CallbackQuery): chat_id = c.message.chat.id data = c.data.split(\":\")[1] b = GAMES.get(chat_id) or new_board() if data == \"noop\" or winner(b): await c.answer() return i = int(data) if b[i] != ' ': await c.answer() return b[i] = 'X' w = winner(b) if not w: j = bot_move(b) b[j] = 'O' w = winner(b) finished = w is not None await c.message.edit_text(status_text(b), reply_markup=board_kb(b, finished=finished)) await c.answer() if finished: nb = new_board() GAMES[chat_id] = nb await c.message.answer(\"\u041d\u043e\u0432\u0430\u044f \u0438\u0433\u0440\u0430. \u0422\u0432\u043e\u0439 \u0445\u043e\u0434: \u274c\", reply_markup=board_kb(nb)) async def main(): bot = Bot(API_TOKEN) dp = Dispatcher() dp.include_router(router) await dp.start_polling(bot) if __name__ == \"__main__\": asyncio.run(main()) YOLO + bot. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 YOLO import asyncio, io import numpy as np import cv2 import torch from ultralytics import YOLO from aiogram import Bot, Dispatcher, F, Router from aiogram.filters import CommandStart from aiogram.types import Message, BufferedInputFile API_TOKEN = \"YOUR_BOT_TOKEN_HERE\" router = Router() @router.message(CommandStart()) async def start(m: Message): await m.answer(\"\u041e\u0442\u043f\u0440\u0430\u0432\u044c \u0444\u043e\u0442\u043e \u0438 YOLO \u0435\u0451 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\") @router.message(F.photo) async def on_photo(m: Message, bot: Bot): buf = io.BytesIO() await bot.download(m.photo[-1], destination=buf) img = cv2.imdecode(np.frombuffer(buf.getvalue(), np.uint8), cv2.IMREAD_COLOR) plotted = await asyncio.to_thread( lambda: model(img, conf=0.5, imgsz=640, verbose=False)[0].plot() ) ok, enc = cv2.imencode(\".jpg\", plotted) if not ok: await m.answer(\"Encoding error\") return await m.answer_photo(BufferedInputFile(enc.tobytes(), filename=\"pose.jpg\")) async def main(): global model model = YOLO(\"yolo11m-pose.pt\") if torch.cuda.is_available(): model.to(\"cuda\") bot = Bot(API_TOKEN) dp = Dispatcher() dp.include_router(router) await dp.start_polling(bot) if __name__ == \"__main__\": asyncio.run(main())","title":"Telegram Bot + AI"},{"location":"tgai/#_1","text":"\u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0431\u043e\u0442 \u044d\u0442\u043e \u043f\u0440\u0438\u043a\u043e\u043b\u044c\u043d\u043e","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0431\u043e\u0442\u0430 \u0438 \u0441\u0432\u044f\u0437\u043a\u0430 \u0441 \u0418\u0418"},{"location":"tgai/#_2","text":"\u0417\u0430\u0445\u043e\u0434\u0438\u043c \u0432 Telegram- \u0431\u043e\u0442\u0430 @BotFather. \u0417\u0430\u0442\u0435\u043c \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u043c \u00abstart\u00bb \u0438 \u0438\u0437 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 /newbot. \u0412\u0432\u043e\u0434\u0438\u043c \u0438\u043c\u044f \u0438 \u043d\u0438\u043a \u0432\u0430\u0448\u0435\u0433\u043e Telegram-\u0431\u043e\u0442\u0430. \u041d\u0438\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 _bot \u041d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c API TOKEN \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u041d\u0438\u043a\u043e\u043c\u0443 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0439\u0442\u0435 API TOKEN!","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u0430"},{"location":"tgai/#_3","text":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0443 aiogram (\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f Telegram-\u0431\u043e\u0442\u043e\u0432 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python): pip install aiogram \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f aiogram . \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043e\u0434: import asyncio from aiogram import Bot, Dispatcher, F, Router from aiogram.types import Message from aiogram.filters import CommandStart API_TOKEN = \"YOUR_BOT_TOKEN_HERE\" # \u0432\u0441\u0442\u0430\u0432\u044c \u0441\u0432\u043e\u0439 \u0442\u043e\u043a\u0435\u043d router = Router() @router.message(CommandStart()) async def on_start(message: Message): await message.answer(\"\u041f\u0440\u0438\u0432\u0435\u0442! \ud83d\udc4b \u041d\u0430\u043f\u0438\u0448\u0438 '\u0441\u0430\u043b\u0430\u043c' \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.\") @router.message(F.text, F.text.lower() == \"\u0441\u0430\u043b\u0430\u043c\") async def reply(message: Message): await message.answer(\"\u0423\u0430\u043b\u0435\u0439\u043a\u0443\u043c! \ud83d\udc4b\") async def main(): bot = Bot(token=API_TOKEN) dp = Dispatcher() dp.include_router(router) await dp.start_polling(bot) if __name__ == \"__main__\": asyncio.run(main()) \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0433\u0440\u044b. \u041a\u0440\u0435\u0441\u0442\u0438\u043a\u0438 \u043d\u043e\u043b\u0438\u043a\u0438 import asyncio, random from aiogram import Bot, Dispatcher, F, Router from aiogram.filters import CommandStart from aiogram.types import Message, CallbackQuery from aiogram.utils.keyboard import InlineKeyboardBuilder API_TOKEN = \"YOUR_BOT_TOKEN_HERE\" router = Router() GAMES: dict[int, list[str]] = {} WIN = [(0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6)] def new_board(): return [' '] * 9 def avail(b): return [i for i,v in enumerate(b) if v == ' '] def winner(b): for a,b1,c in WIN: line = [b[a], b[b1], b[c]] if line[0] != ' ' and len(set(line)) == 1: return line[0] return \"draw\" if not avail(b) else None def would_win(b, s, i): t = b.copy(); t[i] = s return winner(t) == s def bot_move(b): for i in avail(b): if would_win(b, 'O', i): return i for i in avail(b): if would_win(b, 'X', i): return i if 4 in avail(b): return 4 for i in [0,2,6,8]: if i in avail(b): return i return random.choice(avail(b)) def board_kb(b, finished=False): kb = InlineKeyboardBuilder() sym = lambda v: '\u274c' if v == 'X' else ('\u2b55' if v == 'O' else '\u00b7') for i in range(9): text = sym(b[i]) cb = \"ttt:noop\" if finished or b[i] != ' ' else f\"ttt:{i}\" kb.button(text=text, callback_data=cb) kb.adjust(3,3,3) return kb.as_markup() def status_text(b): w = winner(b) if w == 'X': return \"\u0422\u044b \u0432\u044b\u0438\u0433\u0440\u0430\u043b. \u2705\" if w == 'O': return \"\u0411\u043e\u0442 \u0432\u044b\u0438\u0433\u0440\u0430\u043b. \u274c\" if w == \"draw\": return \"\u041d\u0438\u0447\u044c\u044f. \u23f8\" return \"\u0422\u0432\u043e\u0439 \u0445\u043e\u0434: \u274c\" @router.message(CommandStart()) async def start(m: Message): GAMES[m.chat.id] = new_board() await m.answer(\"\u041a\u0440\u0435\u0441\u0442\u0438\u043a\u0438-\u043d\u043e\u043b\u0438\u043a\u0438. \u0422\u044b \u0438\u0433\u0440\u0430\u0435\u0448\u044c \u274c.\", reply_markup=board_kb(GAMES[m.chat.id])) @router.callback_query(F.data == \"ttt:noop\") async def noop(c: CallbackQuery): await c.answer() @router.callback_query(F.data.startswith(\"ttt:\")) async def play(c: CallbackQuery): chat_id = c.message.chat.id data = c.data.split(\":\")[1] b = GAMES.get(chat_id) or new_board() if data == \"noop\" or winner(b): await c.answer() return i = int(data) if b[i] != ' ': await c.answer() return b[i] = 'X' w = winner(b) if not w: j = bot_move(b) b[j] = 'O' w = winner(b) finished = w is not None await c.message.edit_text(status_text(b), reply_markup=board_kb(b, finished=finished)) await c.answer() if finished: nb = new_board() GAMES[chat_id] = nb await c.message.answer(\"\u041d\u043e\u0432\u0430\u044f \u0438\u0433\u0440\u0430. \u0422\u0432\u043e\u0439 \u0445\u043e\u0434: \u274c\", reply_markup=board_kb(nb)) async def main(): bot = Bot(API_TOKEN) dp = Dispatcher() dp.include_router(router) await dp.start_polling(bot) if __name__ == \"__main__\": asyncio.run(main())","title":"\u041a\u043e\u0434 \u0434\u043b\u044f \u0431\u043e\u0442\u0430"},{"location":"tgai/#yolo-bot","text":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 YOLO import asyncio, io import numpy as np import cv2 import torch from ultralytics import YOLO from aiogram import Bot, Dispatcher, F, Router from aiogram.filters import CommandStart from aiogram.types import Message, BufferedInputFile API_TOKEN = \"YOUR_BOT_TOKEN_HERE\" router = Router() @router.message(CommandStart()) async def start(m: Message): await m.answer(\"\u041e\u0442\u043f\u0440\u0430\u0432\u044c \u0444\u043e\u0442\u043e \u0438 YOLO \u0435\u0451 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\") @router.message(F.photo) async def on_photo(m: Message, bot: Bot): buf = io.BytesIO() await bot.download(m.photo[-1], destination=buf) img = cv2.imdecode(np.frombuffer(buf.getvalue(), np.uint8), cv2.IMREAD_COLOR) plotted = await asyncio.to_thread( lambda: model(img, conf=0.5, imgsz=640, verbose=False)[0].plot() ) ok, enc = cv2.imencode(\".jpg\", plotted) if not ok: await m.answer(\"Encoding error\") return await m.answer_photo(BufferedInputFile(enc.tobytes(), filename=\"pose.jpg\")) async def main(): global model model = YOLO(\"yolo11m-pose.pt\") if torch.cuda.is_available(): model.to(\"cuda\") bot = Bot(API_TOKEN) dp = Dispatcher() dp.include_router(router) await dp.start_polling(bot) if __name__ == \"__main__\": asyncio.run(main())","title":"YOLO + bot."},{"location":"todo/","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435 \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 https://gitverse.ru/ , GigaIDE Desktopv, GigaIDE Cloud, \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 https://colab.google/ \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043d\u0430 https://github.com/ai-forever , \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u0435\u043e https://github.com/ai-forever/Kandinsky-5 , \u0437\u0430\u043c\u0435\u043d\u0430 \u043b\u0438\u0446\u0430 https://github.com/ai-forever/ghost , ruGPT https://github.com/ai-forever/ru-gpts . \u041c\u043e\u0434\u0435\u043b\u0438 \u0412\u0438\u0445\u0440\u044c https://huggingface.co/Vikhrmodels , https://t.me/vikhrlabs/ \u041b\u0451\u0433\u043a\u0438\u0439 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043b\u0438\u0446 https://github.com/Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB \u0412\u0438\u0434\u0435\u043e \u0438\u0437 \u0444\u043e\u0442\u043e https://huggingface.co/spaces/Wan-AI/Wan2.2-Animate , https://github.com/Wan-Video/Wan2.2 \u0427\u0442\u043e \u0437\u0430 Higgsfield https://higgsfield.ai/ Rork ai https://rork.com/ Vosk \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 https://alphacephei.com/vosk/ , https://github.com/alphacep/vosk-api Pyttsx3 n8n nanochat https://dtf.ru/ruslan-titov/3712667-15-luchshikh-ii-pomoschnikov-2025-goda https://www.nvidia.com/en-in/ai-on-rtx/chat-with-rtx-generative-ai/?utm_source=chatgpt.com Boost python, pybind11 \u0438\u043b\u0438 Cython","title":"\u041d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435"},{"location":"todo/#_1","text":"\u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 https://gitverse.ru/ , GigaIDE Desktopv, GigaIDE Cloud, \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 https://colab.google/ \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043d\u0430 https://github.com/ai-forever , \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u0435\u043e https://github.com/ai-forever/Kandinsky-5 , \u0437\u0430\u043c\u0435\u043d\u0430 \u043b\u0438\u0446\u0430 https://github.com/ai-forever/ghost , ruGPT https://github.com/ai-forever/ru-gpts . \u041c\u043e\u0434\u0435\u043b\u0438 \u0412\u0438\u0445\u0440\u044c https://huggingface.co/Vikhrmodels , https://t.me/vikhrlabs/ \u041b\u0451\u0433\u043a\u0438\u0439 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u043b\u0438\u0446 https://github.com/Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB \u0412\u0438\u0434\u0435\u043e \u0438\u0437 \u0444\u043e\u0442\u043e https://huggingface.co/spaces/Wan-AI/Wan2.2-Animate , https://github.com/Wan-Video/Wan2.2 \u0427\u0442\u043e \u0437\u0430 Higgsfield https://higgsfield.ai/ Rork ai https://rork.com/ Vosk \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 \u0440\u0435\u0447\u0438 https://alphacephei.com/vosk/ , https://github.com/alphacep/vosk-api Pyttsx3 n8n nanochat https://dtf.ru/ruslan-titov/3712667-15-luchshikh-ii-pomoschnikov-2025-goda https://www.nvidia.com/en-in/ai-on-rtx/chat-with-rtx-generative-ai/?utm_source=chatgpt.com Boost python, pybind11 \u0438\u043b\u0438 Cython","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435"},{"location":"yolo/","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Ultralytics YOLO Ultralytics YOLO \u2014 \u044d\u0442\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430 Python \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 YOLO \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f: \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f. \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 Ultralytics YOLO. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a 1. Python 3.10 \u0438 \u0432\u044b\u0448\u0435 \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435 python.org . \u0421\u0430\u043c\u044b\u0435 \u043d\u043e\u0432\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f YOLO. \u041f\u0440\u044f\u043c\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 Python 3.12.10 , Python 3.13.2 (100% \u0440\u0430\u0431\u043e\u0447\u0430\u044f) \u041f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0433\u0430\u043b\u043e\u0447\u043a\u0443 \u0432 Add to PATH 2. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b NVIDIA (\u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0430 NVIDIA RTX) CUDA Toolkit https://developer.nvidia.com/cuda-downloads cuDNN https://developer.nvidia.com/cudnn-downloads \u0412\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u0438 \u0434\u043b\u044f Windows 11. 3. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c pytorch \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e https://pytorch.org/get-started/locally/ \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443. (Win + R, cmd) \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu129 4. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c: pip3 install ultralytics opencv-python 4.5 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 YOLOchecker.py . \u041f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0432 IDE \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0427\u0430\u0441\u0442\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043a\u043e\u0433\u0434\u0430 torch \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u041d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c torch python -m pip uninstall -y torch torchvision torchaudio python -m pip cache purge \u0418 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u0430\u043d\u043e\u0432\u043e torch . 5. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043a\u0430\u0447\u0430\u0442\u044c YOLO11n \u0438\u0437 https://docs.ultralytics.com/ru/tasks/detect/ \u0411\u043e\u043b\u044c\u0448\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 https://docs.ultralytics.com/ru/datasets/ 6. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c python IDLE -> file -> new file \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u0441\u043e \u0441\u043a\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e YOLO11n import cv2 from ultralytics import YOLO import torch import time # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f gpu \u0438\u043b\u0438 cpu device = 'cuda' if torch.cuda.is_available() else 'cpu' print(f\"Using device: {device}\") # \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0443\u0436\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c model = YOLO('yolo11n.pt').to(device) print(\"Available classes:\", model.names) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u0430\u043c\u0435\u0440\u0443 webcamera = cv2.VideoCapture(0) while True: #\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043a\u0430\u043c\u0435\u0440\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 success, frame = webcamera.read() if not success: break # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 FPS start_time = time.time() # \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043a\u0430\u0434\u0440 results = model.track(frame, conf=0.8, imgsz=640) # \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u0424\u041f\u0421 end_time = time.time() fps = 1 / (end_time - start_time) # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0424\u041f\u0421 cv2.putText(frame, f\"FPS: {int(fps)}\", (200, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.putText(frame, f\"Total: {len(results[0].boxes)}\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA) cv2.putText(frame, f\"Press 'Esc' to exit\", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA) # \u0412\u044b\u0432\u043e\u0434 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f cv2.imshow(\"Live Camera\", results[0].plot()) # \u041d\u0430\u0436\u0430\u0442\u044c Esc \u0434\u043b\u044f \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f if cv2.waitKey(1) == 27: break # \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u043c\u0435\u0440\u044b \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u043e\u043a\u043d\u0430 webcamera.release() cv2.destroyAllWindows() \u0414\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043a\u0430\u043c\u0435\u0440\u044b \u043c\u0435\u043d\u044f\u0435\u043c \u0446\u0438\u0444\u0440\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 webcamera = cv2.VideoCapture(0) Python \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u0430\u043c\u0435\u0440: import cv2 for i in range(10): cap=cv2.VideoCapture(i, cv2.CAP_DSHOW) ok=cap.isOpened() cap.release() if ok: print(i) \u041b\u0438\u0431\u043e \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443: wmic path Win32_PnPEntity where \"PNPClass='Camera' OR PNPClass='Image'\" get Name,DeviceID \u0411\u043e\u043d\u0443\u0441: \u0421\u043e\u043a\u0440\u0430\u0449\u0451\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u043a\u043e\u0434\u0430 import cv2 from ultralytics import YOLO model = YOLO('yolo11m-pose.pt').to('cuda') wc = cv2.VideoCapture(0) while cv2.waitKey(1) != 27: results = model.track(wc.read()[1], conf=0.8, imgsz=640, verbose=False) cv2.imshow(\"Live Camera\", results[0].plot()) wc.release(); cv2.destroyAllWindows() \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f YOLO update_yolo.bat YOLO v11 \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 Classify \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f (\u0438\u043b\u0438 \u043a\u0440\u043e\u043f\u0430). Detect \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441, \u043e\u0431\u0440\u0430\u043c\u043b\u044f\u044f \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u043c bbox. Segment \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u0443\u044e \u043c\u0430\u0441\u043a\u0443 \u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0443\u0440\u0430 (\u0447\u0430\u0441\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 bbox). Track \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0435 ID \u0443\u0436\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0432 \u0432\u0438\u0434\u0435\u043e\u043f\u043e\u0442\u043e\u043a\u0435, \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044f \u0438\u0445 \u043c\u0435\u0436\u0434\u0443 \u043a\u0430\u0434\u0440\u0430\u043c\u0438. Pose \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u0437\u044b. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 (\u043e\u0431\u044b\u0447\u043d\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430) \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u0441\u043a\u0435\u043b\u0435\u0442\u0430 (\u0447\u0430\u0441\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 bbox \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u043c). OBB \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u043c\u0438 \u0440\u0430\u043c\u043a\u0430\u043c\u0438. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a (bbox \u0441 \u0443\u0433\u043b\u043e\u043c). \u041c\u043e\u0434\u0435\u043b\u044c \u0418\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0417\u0430\u0434\u0430\u0447\u0430 YOLO11 yolo11n.pt yolo11s.pt yolo11m.pt yolo11l.pt yolo11x.pt \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 YOLO11-seg yolo11n-seg.pt yolo11s-seg.pt yolo11m-seg.pt yolo11l-seg.pt yolo11x-seg.pt \u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 YOLO11-pose yolo11n-pose.pt yolo11s-pose.pt yolo11m-pose.pt yolo11l-pose.pt yolo11x-pose.pt \u041f\u043e\u0437\u0430/\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 YOLO11-obb yolo11n-obb.pt yolo11s-obb.pt yolo11m-obb.pt yolo11l-obb.pt yolo11x-obb.pt \u041e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 YOLO11-cls yolo11n-cls.pt yolo11s-cls.pt yolo11m-cls.pt yolo11l-cls.pt yolo11x-cls.pt \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0414\u043e\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0414\u0430\u0442\u0430\u0441\u0435\u0442 (\u0430\u043d\u0433\u043b. dataset) \u2014 \u044d\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f YOLO \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b: dataset/ \u251c\u2500 images/ \u2502 \u251c\u2500 train/ \u2502 \u251c\u2500 val/ \u2502 \u2514\u2500 test/ (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u251c\u2500 labels/ \u2502 \u251c\u2500 train/ \u2502 \u251c\u2500 val/ \u2502 \u2514\u2500 test/ (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u251c\u2500 train.py \u251c\u2500 model.pt \u2514\u2500 dataset.yaml \u041f\u0440\u0438\u043c\u0435\u0440 dataset.yaml train: ../images/train val: ../images/val test: images/test nc: 3 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 names: ['person', 'car', 'dog'] \u041f\u0440\u0438\u043c\u0435\u0440 train.py from ultralytics import YOLO model = YOLO(\"yolo11n.pt\") # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0434\u043e\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f # Train the model model.train( data=\"dataset.yaml\", # \u043f\u0443\u0442\u044c \u043a dataset.yaml epochs=50, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445(\u043a\u0440\u0443\u0433\u043e\u0432) \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f imgsz=640, # \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a batch=16, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0437\u0430 \u043e\u0434\u0438\u043d \u0448\u0430\u0433 workers=4, # \u0447\u0438\u0441\u043b\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, project=\"yolo11_train\", # \u043f\u0430\u043f\u043a\u0430 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 name=\"exp1\", # \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430 exist_ok=True # \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0430\u044f \u043f\u0430\u043f\u043a\u0430 ) \u0421\u043a\u0440\u0438\u043f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: dataset.bat \u0418\u043b\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0430\u0440\u0445\u0438\u0432\u0430: dataset.zip \u041d\u0430 1 \u043a\u043b\u0430\u0441\u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e 200\u2013500 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435. \u041f\u0430\u043f\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: - train \u2014 \u0443\u0447\u0438\u0442 \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. - val \u2014 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u0442 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. - test \u2014 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. 80% \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0434\u0443\u0442 \u0432 \u043f\u0430\u043f\u043a\u0443 train, 20% \u0432 val. \u041b\u0438\u0431\u043e \u0436\u0435 70% - train, 20% - val, 10% - test. \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 dataset_separator.bat \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: dataset_analyze.bat \u041f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0421\u0430\u0439\u0442\u044b: - universe.roboflow.com - huggingface.co - github.com \u0420\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0414\u043b\u044f \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 labelImg.exe: labelImg.exe \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043e\u0442 \u0430\u0432\u0442\u043e\u0440\u0430 labelImg.exe \u041f\u043e\u0448\u0430\u0433\u043e\u0432\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0412 \u043b\u044e\u0431\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435. \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u044d\u0442\u0443 \u043f\u0430\u043f\u043a\u0443. \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c labelImg.exe \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u043d\u0430 YOLO \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u0430\u0432\u0442\u043e\u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0412\u044b\u0431\u0440\u0430\u0442\u044c Open Dir \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0441 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c, \u0432\u044b\u0431\u0440\u0430\u0442\u044c Change Save Dir \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u044d\u0442\u0443 \u0436\u0435 \u043f\u0430\u043f\u043a\u0443 \u041d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 Create\\nRectBox \u0438\u043b\u0438 \u043d\u0430 \u043a\u043b\u0430\u0432\u0438\u0448\u0443 \"W\" \u041d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0432\u043e\u043a\u0440\u0443\u0433 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 \u0420\u0430\u0437\u043c\u0435\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0438 \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 Next Image \u0438\u043b\u0438 \u043d\u0430 \u043a\u043b\u0430\u0432\u0438\u0448\u0443 \"D\" \u0420\u0430\u0437\u043c\u0435\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u041f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0448\u0430\u0433\u0438 11-12 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438\u044e. dataset_separator.bat \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0438 \u0438 \u0444\u0430\u0439\u043b\u044b \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 YOLO (\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0443\u0442) \u0438\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043a\u0440\u0438\u043f\u0442\u0430 dataset_analyze.bat , \u0438\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0430\u0440\u0445\u0438\u0432 dataset.zip . \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u043f\u043e \u043f\u0430\u043f\u043a\u0430\u043c: 80% \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 dataset/images/train \u0438 \u0438\u0445 \u043f\u0430\u0440\u044b 80% \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 dataset/labels/train 20% \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 dataset/images/val \u0438 \u0438\u0445 \u043f\u0430\u0440\u044b 20% \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 to dataset/labels/val \u0412 yaml \u0444\u0430\u0439\u043b\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0412 train.py \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0432 model = YOLO(\"yolo11n.pt\"), \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u044d\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. \u0416\u0434\u0430\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041f\u043e\u0441\u043b\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0432 \u043f\u0430\u043f\u043a\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u043e\u044f\u0432\u0438\u0442\u044c\u0441\u044f \u043f\u0430\u043f\u043a\u0430 runs, \u0432 \u043d\u0435\u0439 \u043d\u0430\u0439\u0442\u0438 \u043f\u0430\u043f\u043a\u0443 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 runs\\detect\\train. \u0412 \u043f\u0430\u043f\u043a\u0435 weight \u0431\u0443\u0434\u0443\u0442 \u043b\u0435\u0436\u0430\u0442\u044c \u043d\u0430\u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 best.pt \u0438 last.pt. \u041e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 best.pt. \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0432 \u043f\u0430\u043f\u043a\u0435 \u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u043a\u0438 \u0435\u0441\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440 \u0434\u043b\u044f metrics/mAP50(B): \u22650.90 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u043e. 0.80\u20130.90 \u2014 \u0445\u043e\u0440\u043e\u0448\u043e. 0.60\u20130.80 \u2014 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u043e. <0.60 \u2014 \u043e\u0431\u044b\u0447\u043d\u043e \u0441\u043b\u0430\u0431\u043e\u0432\u0430\u0442\u043e. \u041f\u043e mAP50-95 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440 \u0442\u0430\u043a\u043e\u0439: \u22650.70 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u043e 0.60\u20130.70 \u2014 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e 0.40\u20130.60 \u2014 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c 0.30\u20130.40 \u2014 \u0441\u043b\u0430\u0431\u043e\u0432\u0430\u0442\u043e <0.30 \u2014 \u043f\u043b\u043e\u0445\u043e \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b train/box_loss \u2192 \u043e\u0448\u0438\u0431\u043a\u0430 \u0431\u043e\u043a\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438. \u0414\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0434\u0430\u0442\u044c. train/cls_loss \u2192 \u043e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438. \u0414\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0434\u0430\u0442\u044c. train/dfl_loss \u2192 Distribution Focal Loss \u0434\u043b\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442. \u0414\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0434\u0430\u0442\u044c. val/box_loss \u2192 \u043e\u0448\u0438\u0431\u043a\u0430 \u0431\u043e\u043a\u0441\u043e\u0432 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0435\u0451, \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0441\u0442\u0438. val/cls_loss \u2192 \u043e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. val/dfl_loss \u2192 DFL \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. metrics/precision(B) \u2192 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c: \u0434\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439. \u041c\u0435\u043d\u044c\u0448\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0439 \u2014 \u0432\u044b\u0448\u0435. metrics/recall(B) \u2192 \u043f\u043e\u043b\u043d\u043e\u0442\u0430: \u0434\u043e\u043b\u044f \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445. \u041c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u2014 \u0432\u044b\u0448\u0435. metrics/mAP50(B) \u2192 \u0441\u0440\u0435\u0434\u043d\u044f\u044f AP \u043f\u0440\u0438 IoU\u22650.50 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. metrics/mAP50-95(B) \u2192 \u0441\u0440\u0435\u0434\u043d\u044f\u044f AP \u043f\u043e IoU 0.50\u20260.95 (COCO). \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0432\u043e\u0434\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0442 \u0418\u0418 \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u044f\u0442 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0443 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b X, Y for box in results[0].boxes: x1, y1, x2, y2 = map(int, box.xyxy[0]) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b bbox center_x, center_y = (x1 + x2) // 2, (y1 + y2) // 2 # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0446\u0435\u043d\u0442\u0440 class_id = int(box.cls[0]) #\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c id class_name = model.names[class_id] # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 # Extract tracking ID (if available) track_id = int(box.id[0]) if box.id is not None else -1 print(f\"Object: {class_name} (ID: {track_id}) at X={center_x}, Y={center_y}\") \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0441 Pose \u0421\u043a\u0430\u0447\u0430\u0442\u044c yolo11n-pose.pt \u0412 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u0437\u044b YOLO11 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u043c\u0435\u0435\u0442\u0441\u044f 17 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0442\u0435\u043b\u0430. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0443\u0441\u0442\u0430\u0432\u0443 \u0442\u0435\u043b\u0430: \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a YOLO11-pose 0. \u041d\u043e\u0441 1. \u041b\u0435\u0432\u044b\u0439 \u0433\u043b\u0430\u0437 2. \u041f\u0440\u0430\u0432\u044b\u0439 \u0433\u043b\u0430\u0437 3. \u041b\u0435\u0432\u043e\u0435 \u0443\u0445\u043e 4. \u041f\u0440\u0430\u0432\u043e\u0435 \u0443\u0445\u043e 5. \u041b\u0435\u0432\u043e\u0435 \u043f\u043b\u0435\u0447\u043e 6. \u041f\u0440\u0430\u0432\u043e\u0435 \u043f\u043b\u0435\u0447\u043e 7. \u041b\u0435\u0432\u044b\u0439 \u043b\u043e\u043a\u043e\u0442\u044c 8. \u041f\u0440\u0430\u0432\u044b\u0439 \u043b\u043e\u043a\u043e\u0442\u044c 9. \u041b\u0435\u0432\u043e\u0435 \u0437\u0430\u043f\u044f\u0441\u0442\u044c\u0435 10. \u041f\u0440\u0430\u0432\u043e\u0435 \u0437\u0430\u043f\u044f\u0441\u0442\u044c\u0435 11. \u041b\u0435\u0432\u043e\u0435 \u0431\u0435\u0434\u0440\u043e 12. \u041f\u0440\u0430\u0432\u043e\u0435 \u0431\u0435\u0434\u0440\u043e 13. \u041b\u0435\u0432\u043e\u0435 \u043a\u043e\u043b\u0435\u043d\u043e 14. \u041f\u0440\u0430\u0432\u043e\u0435 \u043a\u043e\u043b\u0435\u043d\u043e 15. \u041b\u0435\u0432\u0430\u044f \u043b\u043e\u0434\u044b\u0436\u043a\u0430 16. \u041f\u0440\u0430\u0432\u0430\u044f \u043b\u043e\u0434\u044b\u0436\u043a\u0430 \u0414\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u043e\u0434\u043d\u043e\u0439 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u0442\u043e\u0447\u043a\u0438, \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0435\u0451 \u0447\u0435\u0440\u0435\u0437 results[0].keypoints.xy(0, \u043d\u043e\u043c\u0435\u0440 \u0442\u043e\u0447\u043a\u0438 ). \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0430\u0432\u043e\u0435 \u0437\u0430\u043f\u044f\u0441\u0442\u044c\u0435 (\u0442\u043e\u0447\u043a\u0430 10). \u041e\u0434\u043d\u0430 \u0442\u043e\u0447\u043a\u0430 import cv2 from ultralytics import YOLO import torch import time device = 'cuda' if torch.cuda.is_available() else 'cpu' print(f\"Using device: {device}\") model = YOLO('YOLO11n-pose.pt').to(device) print(\"Available classes:\", model.names) webcamera = cv2.VideoCapture(0) j = 10 # \u043f\u0440\u0430\u0432\u043e\u0435 \u0437\u0430\u043f\u044f\u0441\u0442\u044c\u0435 while cv2.waitKey(1) != 27: success, frame = webcamera.read() if not success: break start_time = time.time() results = model.track(frame, conf=0.8, imgsz=640, verbose=False) r = results[0] if r.keypoints is not None and r.keypoints.xy.size(0) > 0: k = r.keypoints.xy[0, j] x, y = int(k[0].item()), int(k[1].item()) cv2.circle(frame, (x, y), 6, (0,255,255), -1) end_time = time.time() fps = 1 / (end_time - start_time) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.imshow(\"Live Camera\", frame) webcamera.release() cv2.destroyAllWindows() \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u043e\u0447\u0435\u043a. \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u0435\u043a import cv2 from ultralytics import YOLO import torch import time device = 'cuda' if torch.cuda.is_available() else 'cpu' model = YOLO('YOLO11n-pose.pt').to(device) cap = cv2.VideoCapture(0) points = [0, 1, 2] while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break t0 = time.time() results = model.track(frame, conf=0.8, imgsz=640, verbose=False) r = results[0] if r.keypoints is not None and r.keypoints.xy is not None: kpts = r.keypoints.xy np, nk = kpts.shape[0], kpts.shape[1] for pid in range(np): for idx in points: if idx >= nk: continue x, y = map(int, kpts[pid, idx].tolist()) cv2.circle(frame, (x, y), 6, (0, 255, 255), -1) fps = 1.0 / max(1e-6, time.time() - t0) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2) cv2.imshow(\"Live Camera\", frame) cap.release() cv2.destroyAllWindows() \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u0435\u043a \u0441 \u043b\u0438\u043d\u0438\u044f\u043c\u0438. \u041b\u0438\u043d\u0438\u0438 import cv2 from ultralytics import YOLO import torch import time device = 'cuda' if torch.cuda.is_available() else 'cpu' model = YOLO('YOLO11n-pose.pt').to(device) cap = cv2.VideoCapture(0) pairs = [(1, 2), (5, 7), (7, 9), (6, 8), (8, 10)] # \u0438\u043d\u0434\u0435\u043a\u0441\u044b keypoints, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break t0 = time.time() results = model.track(frame, conf=0.8, imgsz=640, verbose=False) r = results[0] if r.keypoints is not None and r.keypoints.xy is not None: kpts = r.keypoints.xy # shape: (num_persons, num_kpts, 2) num_persons, num_kpts = kpts.shape[0], kpts.shape[1] for pid in range(num_persons): for a, b in pairs: if a >= num_kpts or b >= num_kpts: continue x1, y1 = map(int, kpts[pid, a].tolist()) x2, y2 = map(int, kpts[pid, b].tolist()) cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 255), 2) #\u0442\u043e\u0447\u043a\u0438: cv2.circle(frame, (x1, y1), 4, (0, 255, 255), -1) cv2.circle(frame, (x2, y2), 4, (0, 255, 255), -1) fps = 1.0 / max(1e-6, time.time() - t0) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2) cv2.imshow(\"Live Camera\", frame) cap.release() cv2.destroyAllWindows() \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0433\u0440\u044b. \u0418\u0433\u0440\u0430 import cv2, math from ultralytics import YOLO import torch device = 'cuda' if torch.cuda.is_available() else 'cpu' model = YOLO('YOLO11n-pose.pt').to(device) cap = cv2.VideoCapture(0) target = 0 # \u043d\u043e\u0441 alpha = 0.05 # \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u043d\u0438\u044f conf_th = 0.5 # \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 cx = cy = tx = ty = None while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break h, w = frame.shape[:2] if cx is None: cx = tx = w / 2 cy = ty = h / 2 r = model.track(frame, classes=0, conf=0.8, imgsz=640, verbose=False)[0] found = False if r.keypoints is not None and r.keypoints.xy is not None and r.keypoints.xy.size(0) > 0: kxy = r.keypoints.xy kcf = r.keypoints.conf # \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c None num_kp = kxy.shape[1] if target < num_kp: x, y = float(kxy[0, target, 0]), float(kxy[0, target, 1]) ok_conf = True if kcf is None else float(kcf[0, target]) >= conf_th if ok_conf and not (x != x or y != y): # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 NaN tx, ty = x, y found = True # \u0434\u0432\u0438\u0433\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u043d\u043e\u0432\u0443\u044e \u0446\u0435\u043b\u044c if found: cx += (tx - cx) * alpha cy += (ty - cy) * alpha # \u0440\u0438\u0441\u0443\u0435\u043c if found: cv2.circle(frame, (int(tx), int(ty)), 4, (0, 255, 255), -1) # \u0446\u0435\u043b\u044c cv2.circle(frame, (int(cx), int(cy)), 14, (0, 0, 255), 2) # \u0438\u0433\u0440\u043e\u043a # \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f if math.hypot(cx - tx, cy - ty) < 12: fs, thick = 3, 7 (tw, th), _ = cv2.getTextSize(\"GAY\", cv2.FONT_HERSHEY_SIMPLEX, fs, thick) org = ((w - tw) // 2, (h + th) // 2) cv2.putText(frame, \"GAY\", org, cv2.FONT_HERSHEY_SIMPLEX, fs, (0, 0, 255), thick, cv2.LINE_AA) cv2.imshow(\"Live Camera\", frame) cap.release() cv2.destroyAllWindows()","title":"YOLO"},{"location":"yolo/#ultralytics-yolo","text":"Ultralytics YOLO \u2014 \u044d\u0442\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430 Python \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 YOLO \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f: \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f. \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 Ultralytics YOLO.","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Ultralytics YOLO"},{"location":"yolo/#_1","text":"","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a"},{"location":"yolo/#1-python-310","text":"\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435 python.org . \u0421\u0430\u043c\u044b\u0435 \u043d\u043e\u0432\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f YOLO. \u041f\u0440\u044f\u043c\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 Python 3.12.10 , Python 3.13.2 (100% \u0440\u0430\u0431\u043e\u0447\u0430\u044f) \u041f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0433\u0430\u043b\u043e\u0447\u043a\u0443 \u0432 Add to PATH","title":"1. Python 3.10 \u0438 \u0432\u044b\u0448\u0435"},{"location":"yolo/#2-nvidia-nvidia-rtx","text":"CUDA Toolkit https://developer.nvidia.com/cuda-downloads cuDNN https://developer.nvidia.com/cudnn-downloads \u0412\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u0438 \u0434\u043b\u044f Windows 11.","title":"2. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b NVIDIA (\u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0430 NVIDIA RTX)"},{"location":"yolo/#3-pytorch","text":"\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e https://pytorch.org/get-started/locally/ \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443. (Win + R, cmd) \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu129","title":"3. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c pytorch"},{"location":"yolo/#4","text":"\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c: pip3 install ultralytics opencv-python","title":"4. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"yolo/#45","text":"\u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 YOLOchecker.py . \u041f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0432 IDE \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0427\u0430\u0441\u0442\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043a\u043e\u0433\u0434\u0430 torch \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u041d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c torch python -m pip uninstall -y torch torchvision torchaudio python -m pip cache purge \u0418 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u0430\u043d\u043e\u0432\u043e torch .","title":"4.5 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a"},{"location":"yolo/#5","text":"\u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043a\u0430\u0447\u0430\u0442\u044c YOLO11n \u0438\u0437 https://docs.ultralytics.com/ru/tasks/detect/ \u0411\u043e\u043b\u044c\u0448\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 https://docs.ultralytics.com/ru/datasets/","title":"5. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c"},{"location":"yolo/#6","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c python IDLE -> file -> new file \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u0441\u043e \u0441\u043a\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e YOLO11n import cv2 from ultralytics import YOLO import torch import time # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f gpu \u0438\u043b\u0438 cpu device = 'cuda' if torch.cuda.is_available() else 'cpu' print(f\"Using device: {device}\") # \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0443\u0436\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c model = YOLO('yolo11n.pt').to(device) print(\"Available classes:\", model.names) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u0430\u043c\u0435\u0440\u0443 webcamera = cv2.VideoCapture(0) while True: #\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043a\u0430\u043c\u0435\u0440\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 success, frame = webcamera.read() if not success: break # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 FPS start_time = time.time() # \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043a\u0430\u0434\u0440 results = model.track(frame, conf=0.8, imgsz=640) # \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u0424\u041f\u0421 end_time = time.time() fps = 1 / (end_time - start_time) # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0424\u041f\u0421 cv2.putText(frame, f\"FPS: {int(fps)}\", (200, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.putText(frame, f\"Total: {len(results[0].boxes)}\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA) cv2.putText(frame, f\"Press 'Esc' to exit\", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA) # \u0412\u044b\u0432\u043e\u0434 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f cv2.imshow(\"Live Camera\", results[0].plot()) # \u041d\u0430\u0436\u0430\u0442\u044c Esc \u0434\u043b\u044f \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f if cv2.waitKey(1) == 27: break # \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u043c\u0435\u0440\u044b \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u043e\u043a\u043d\u0430 webcamera.release() cv2.destroyAllWindows() \u0414\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043a\u0430\u043c\u0435\u0440\u044b \u043c\u0435\u043d\u044f\u0435\u043c \u0446\u0438\u0444\u0440\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 webcamera = cv2.VideoCapture(0) Python \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u0430\u043c\u0435\u0440: import cv2 for i in range(10): cap=cv2.VideoCapture(i, cv2.CAP_DSHOW) ok=cap.isOpened() cap.release() if ok: print(i) \u041b\u0438\u0431\u043e \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443: wmic path Win32_PnPEntity where \"PNPClass='Camera' OR PNPClass='Image'\" get Name,DeviceID","title":"6. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f"},{"location":"yolo/#_2","text":"\u0421\u043e\u043a\u0440\u0430\u0449\u0451\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u043a\u043e\u0434\u0430 import cv2 from ultralytics import YOLO model = YOLO('yolo11m-pose.pt').to('cuda') wc = cv2.VideoCapture(0) while cv2.waitKey(1) != 27: results = model.track(wc.read()[1], conf=0.8, imgsz=640, verbose=False) cv2.imshow(\"Live Camera\", results[0].plot()) wc.release(); cv2.destroyAllWindows() \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f YOLO update_yolo.bat","title":"\u0411\u043e\u043d\u0443\u0441:"},{"location":"yolo/#yolo-v11","text":"Classify \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f (\u0438\u043b\u0438 \u043a\u0440\u043e\u043f\u0430). Detect \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441, \u043e\u0431\u0440\u0430\u043c\u043b\u044f\u044f \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u043c bbox. Segment \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u0443\u044e \u043c\u0430\u0441\u043a\u0443 \u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0443\u0440\u0430 (\u0447\u0430\u0441\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 bbox). Track \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0435 ID \u0443\u0436\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0432 \u0432\u0438\u0434\u0435\u043e\u043f\u043e\u0442\u043e\u043a\u0435, \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044f \u0438\u0445 \u043c\u0435\u0436\u0434\u0443 \u043a\u0430\u0434\u0440\u0430\u043c\u0438. Pose \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u0437\u044b. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 (\u043e\u0431\u044b\u0447\u043d\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430) \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u0441\u043a\u0435\u043b\u0435\u0442\u0430 (\u0447\u0430\u0441\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 bbox \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u043c). OBB \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u043c\u0438 \u0440\u0430\u043c\u043a\u0430\u043c\u0438. \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a (bbox \u0441 \u0443\u0433\u043b\u043e\u043c). \u041c\u043e\u0434\u0435\u043b\u044c \u0418\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0417\u0430\u0434\u0430\u0447\u0430 YOLO11 yolo11n.pt yolo11s.pt yolo11m.pt yolo11l.pt yolo11x.pt \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 YOLO11-seg yolo11n-seg.pt yolo11s-seg.pt yolo11m-seg.pt yolo11l-seg.pt yolo11x-seg.pt \u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 YOLO11-pose yolo11n-pose.pt yolo11s-pose.pt yolo11m-pose.pt yolo11l-pose.pt yolo11x-pose.pt \u041f\u043e\u0437\u0430/\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 YOLO11-obb yolo11n-obb.pt yolo11s-obb.pt yolo11m-obb.pt yolo11l-obb.pt yolo11x-obb.pt \u041e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 YOLO11-cls yolo11n-cls.pt yolo11s-cls.pt yolo11m-cls.pt yolo11l-cls.pt yolo11x-cls.pt \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","title":"YOLO v11 \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"yolo/#_3","text":"","title":"\u0414\u043e\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439"},{"location":"yolo/#_4","text":"\u0414\u0430\u0442\u0430\u0441\u0435\u0442 (\u0430\u043d\u0433\u043b. dataset) \u2014 \u044d\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f YOLO \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b: dataset/ \u251c\u2500 images/ \u2502 \u251c\u2500 train/ \u2502 \u251c\u2500 val/ \u2502 \u2514\u2500 test/ (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u251c\u2500 labels/ \u2502 \u251c\u2500 train/ \u2502 \u251c\u2500 val/ \u2502 \u2514\u2500 test/ (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u251c\u2500 train.py \u251c\u2500 model.pt \u2514\u2500 dataset.yaml \u041f\u0440\u0438\u043c\u0435\u0440 dataset.yaml train: ../images/train val: ../images/val test: images/test nc: 3 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 names: ['person', 'car', 'dog'] \u041f\u0440\u0438\u043c\u0435\u0440 train.py from ultralytics import YOLO model = YOLO(\"yolo11n.pt\") # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0434\u043e\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f # Train the model model.train( data=\"dataset.yaml\", # \u043f\u0443\u0442\u044c \u043a dataset.yaml epochs=50, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445(\u043a\u0440\u0443\u0433\u043e\u0432) \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f imgsz=640, # \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a batch=16, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0437\u0430 \u043e\u0434\u0438\u043d \u0448\u0430\u0433 workers=4, # \u0447\u0438\u0441\u043b\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, project=\"yolo11_train\", # \u043f\u0430\u043f\u043a\u0430 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 name=\"exp1\", # \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430 exist_ok=True # \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0430\u044f \u043f\u0430\u043f\u043a\u0430 )","title":"\u0414\u0430\u0442\u0430\u0441\u0435\u0442"},{"location":"yolo/#_5","text":"dataset.bat","title":"\u0421\u043a\u0440\u0438\u043f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:"},{"location":"yolo/#_6","text":"dataset.zip \u041d\u0430 1 \u043a\u043b\u0430\u0441\u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e 200\u2013500 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435. \u041f\u0430\u043f\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: - train \u2014 \u0443\u0447\u0438\u0442 \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. - val \u2014 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u0442 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. - test \u2014 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. 80% \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0434\u0443\u0442 \u0432 \u043f\u0430\u043f\u043a\u0443 train, 20% \u0432 val. \u041b\u0438\u0431\u043e \u0436\u0435 70% - train, 20% - val, 10% - test. \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 dataset_separator.bat \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: dataset_analyze.bat","title":"\u0418\u043b\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0430\u0440\u0445\u0438\u0432\u0430:"},{"location":"yolo/#_7","text":"\u0421\u0430\u0439\u0442\u044b: - universe.roboflow.com - huggingface.co - github.com","title":"\u041f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b"},{"location":"yolo/#_8","text":"\u0414\u043b\u044f \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 labelImg.exe: labelImg.exe \u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043e\u0442 \u0430\u0432\u0442\u043e\u0440\u0430 labelImg.exe","title":"\u0420\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"yolo/#_9","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0412 \u043b\u044e\u0431\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435. \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u044d\u0442\u0443 \u043f\u0430\u043f\u043a\u0443. \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c labelImg.exe \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u043d\u0430 YOLO \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u0430\u0432\u0442\u043e\u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0412\u044b\u0431\u0440\u0430\u0442\u044c Open Dir \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0441 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c, \u0432\u044b\u0431\u0440\u0430\u0442\u044c Change Save Dir \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u044d\u0442\u0443 \u0436\u0435 \u043f\u0430\u043f\u043a\u0443 \u041d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 Create\\nRectBox \u0438\u043b\u0438 \u043d\u0430 \u043a\u043b\u0430\u0432\u0438\u0448\u0443 \"W\" \u041d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0432\u043e\u043a\u0440\u0443\u0433 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 \u0420\u0430\u0437\u043c\u0435\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0438 \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 Next Image \u0438\u043b\u0438 \u043d\u0430 \u043a\u043b\u0430\u0432\u0438\u0448\u0443 \"D\" \u0420\u0430\u0437\u043c\u0435\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u041f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0448\u0430\u0433\u0438 11-12 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438\u044e. dataset_separator.bat \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0430\u043f\u043a\u0438 \u0438 \u0444\u0430\u0439\u043b\u044b \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 YOLO (\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0443\u0442) \u0438\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043a\u0440\u0438\u043f\u0442\u0430 dataset_analyze.bat , \u0438\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0430\u0440\u0445\u0438\u0432 dataset.zip . \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u043f\u043e \u043f\u0430\u043f\u043a\u0430\u043c: 80% \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 dataset/images/train \u0438 \u0438\u0445 \u043f\u0430\u0440\u044b 80% \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 dataset/labels/train 20% \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 dataset/images/val \u0438 \u0438\u0445 \u043f\u0430\u0440\u044b 20% \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 to dataset/labels/val \u0412 yaml \u0444\u0430\u0439\u043b\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0412 train.py \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0432 model = YOLO(\"yolo11n.pt\"), \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u044d\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u043f\u0430\u043f\u043a\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. \u0416\u0434\u0430\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041f\u043e\u0441\u043b\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0432 \u043f\u0430\u043f\u043a\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u043e\u044f\u0432\u0438\u0442\u044c\u0441\u044f \u043f\u0430\u043f\u043a\u0430 runs, \u0432 \u043d\u0435\u0439 \u043d\u0430\u0439\u0442\u0438 \u043f\u0430\u043f\u043a\u0443 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 runs\\detect\\train. \u0412 \u043f\u0430\u043f\u043a\u0435 weight \u0431\u0443\u0434\u0443\u0442 \u043b\u0435\u0436\u0430\u0442\u044c \u043d\u0430\u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 best.pt \u0438 last.pt. \u041e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 best.pt. \u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0432 \u043f\u0430\u043f\u043a\u0435 \u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u043a\u0438 \u0435\u0441\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440 \u0434\u043b\u044f metrics/mAP50(B): \u22650.90 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u043e. 0.80\u20130.90 \u2014 \u0445\u043e\u0440\u043e\u0448\u043e. 0.60\u20130.80 \u2014 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u043e. <0.60 \u2014 \u043e\u0431\u044b\u0447\u043d\u043e \u0441\u043b\u0430\u0431\u043e\u0432\u0430\u0442\u043e. \u041f\u043e mAP50-95 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440 \u0442\u0430\u043a\u043e\u0439: \u22650.70 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u043e 0.60\u20130.70 \u2014 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e 0.40\u20130.60 \u2014 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c 0.30\u20130.40 \u2014 \u0441\u043b\u0430\u0431\u043e\u0432\u0430\u0442\u043e <0.30 \u2014 \u043f\u043b\u043e\u0445\u043e \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b train/box_loss \u2192 \u043e\u0448\u0438\u0431\u043a\u0430 \u0431\u043e\u043a\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438. \u0414\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0434\u0430\u0442\u044c. train/cls_loss \u2192 \u043e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438. \u0414\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0434\u0430\u0442\u044c. train/dfl_loss \u2192 Distribution Focal Loss \u0434\u043b\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442. \u0414\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0434\u0430\u0442\u044c. val/box_loss \u2192 \u043e\u0448\u0438\u0431\u043a\u0430 \u0431\u043e\u043a\u0441\u043e\u0432 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0435\u0451, \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0441\u0442\u0438. val/cls_loss \u2192 \u043e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. val/dfl_loss \u2192 DFL \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. metrics/precision(B) \u2192 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c: \u0434\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439. \u041c\u0435\u043d\u044c\u0448\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0439 \u2014 \u0432\u044b\u0448\u0435. metrics/recall(B) \u2192 \u043f\u043e\u043b\u043d\u043e\u0442\u0430: \u0434\u043e\u043b\u044f \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445. \u041c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u2014 \u0432\u044b\u0448\u0435. metrics/mAP50(B) \u2192 \u0441\u0440\u0435\u0434\u043d\u044f\u044f AP \u043f\u0440\u0438 IoU\u22650.50 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. metrics/mAP50-95(B) \u2192 \u0441\u0440\u0435\u0434\u043d\u044f\u044f AP \u043f\u043e IoU 0.50\u20260.95 (COCO). \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0432\u043e\u0434\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430.","title":"\u041f\u043e\u0448\u0430\u0433\u043e\u0432\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f:"},{"location":"yolo/#_10","text":"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0442 \u0418\u0418 \u043e\u0431\u044b\u0447\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u044f\u0442 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0443 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b X, Y for box in results[0].boxes: x1, y1, x2, y2 = map(int, box.xyxy[0]) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b bbox center_x, center_y = (x1 + x2) // 2, (y1 + y2) // 2 # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0446\u0435\u043d\u0442\u0440 class_id = int(box.cls[0]) #\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c id class_name = model.names[class_id] # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 # Extract tracking ID (if available) track_id = int(box.id[0]) if box.id is not None else -1 print(f\"Object: {class_name} (ID: {track_id}) at X={center_x}, Y={center_y}\")","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442"},{"location":"yolo/#pose","text":"\u0421\u043a\u0430\u0447\u0430\u0442\u044c yolo11n-pose.pt \u0412 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u0437\u044b YOLO11 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u043c\u0435\u0435\u0442\u0441\u044f 17 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0442\u0435\u043b\u0430. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0443\u0441\u0442\u0430\u0432\u0443 \u0442\u0435\u043b\u0430: \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a YOLO11-pose 0. \u041d\u043e\u0441 1. \u041b\u0435\u0432\u044b\u0439 \u0433\u043b\u0430\u0437 2. \u041f\u0440\u0430\u0432\u044b\u0439 \u0433\u043b\u0430\u0437 3. \u041b\u0435\u0432\u043e\u0435 \u0443\u0445\u043e 4. \u041f\u0440\u0430\u0432\u043e\u0435 \u0443\u0445\u043e 5. \u041b\u0435\u0432\u043e\u0435 \u043f\u043b\u0435\u0447\u043e 6. \u041f\u0440\u0430\u0432\u043e\u0435 \u043f\u043b\u0435\u0447\u043e 7. \u041b\u0435\u0432\u044b\u0439 \u043b\u043e\u043a\u043e\u0442\u044c 8. \u041f\u0440\u0430\u0432\u044b\u0439 \u043b\u043e\u043a\u043e\u0442\u044c 9. \u041b\u0435\u0432\u043e\u0435 \u0437\u0430\u043f\u044f\u0441\u0442\u044c\u0435 10. \u041f\u0440\u0430\u0432\u043e\u0435 \u0437\u0430\u043f\u044f\u0441\u0442\u044c\u0435 11. \u041b\u0435\u0432\u043e\u0435 \u0431\u0435\u0434\u0440\u043e 12. \u041f\u0440\u0430\u0432\u043e\u0435 \u0431\u0435\u0434\u0440\u043e 13. \u041b\u0435\u0432\u043e\u0435 \u043a\u043e\u043b\u0435\u043d\u043e 14. \u041f\u0440\u0430\u0432\u043e\u0435 \u043a\u043e\u043b\u0435\u043d\u043e 15. \u041b\u0435\u0432\u0430\u044f \u043b\u043e\u0434\u044b\u0436\u043a\u0430 16. \u041f\u0440\u0430\u0432\u0430\u044f \u043b\u043e\u0434\u044b\u0436\u043a\u0430 \u0414\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u043e\u0434\u043d\u043e\u0439 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u0442\u043e\u0447\u043a\u0438, \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0435\u0451 \u0447\u0435\u0440\u0435\u0437 results[0].keypoints.xy(0, \u043d\u043e\u043c\u0435\u0440 \u0442\u043e\u0447\u043a\u0438 ). \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0430\u0432\u043e\u0435 \u0437\u0430\u043f\u044f\u0441\u0442\u044c\u0435 (\u0442\u043e\u0447\u043a\u0430 10). \u041e\u0434\u043d\u0430 \u0442\u043e\u0447\u043a\u0430 import cv2 from ultralytics import YOLO import torch import time device = 'cuda' if torch.cuda.is_available() else 'cpu' print(f\"Using device: {device}\") model = YOLO('YOLO11n-pose.pt').to(device) print(\"Available classes:\", model.names) webcamera = cv2.VideoCapture(0) j = 10 # \u043f\u0440\u0430\u0432\u043e\u0435 \u0437\u0430\u043f\u044f\u0441\u0442\u044c\u0435 while cv2.waitKey(1) != 27: success, frame = webcamera.read() if not success: break start_time = time.time() results = model.track(frame, conf=0.8, imgsz=640, verbose=False) r = results[0] if r.keypoints is not None and r.keypoints.xy.size(0) > 0: k = r.keypoints.xy[0, j] x, y = int(k[0].item()), int(k[1].item()) cv2.circle(frame, (x, y), 6, (0,255,255), -1) end_time = time.time() fps = 1 / (end_time - start_time) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA) cv2.imshow(\"Live Camera\", frame) webcamera.release() cv2.destroyAllWindows() \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u043e\u0447\u0435\u043a. \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u0435\u043a import cv2 from ultralytics import YOLO import torch import time device = 'cuda' if torch.cuda.is_available() else 'cpu' model = YOLO('YOLO11n-pose.pt').to(device) cap = cv2.VideoCapture(0) points = [0, 1, 2] while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break t0 = time.time() results = model.track(frame, conf=0.8, imgsz=640, verbose=False) r = results[0] if r.keypoints is not None and r.keypoints.xy is not None: kpts = r.keypoints.xy np, nk = kpts.shape[0], kpts.shape[1] for pid in range(np): for idx in points: if idx >= nk: continue x, y = map(int, kpts[pid, idx].tolist()) cv2.circle(frame, (x, y), 6, (0, 255, 255), -1) fps = 1.0 / max(1e-6, time.time() - t0) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2) cv2.imshow(\"Live Camera\", frame) cap.release() cv2.destroyAllWindows() \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u0435\u043a \u0441 \u043b\u0438\u043d\u0438\u044f\u043c\u0438. \u041b\u0438\u043d\u0438\u0438 import cv2 from ultralytics import YOLO import torch import time device = 'cuda' if torch.cuda.is_available() else 'cpu' model = YOLO('YOLO11n-pose.pt').to(device) cap = cv2.VideoCapture(0) pairs = [(1, 2), (5, 7), (7, 9), (6, 8), (8, 10)] # \u0438\u043d\u0434\u0435\u043a\u0441\u044b keypoints, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break t0 = time.time() results = model.track(frame, conf=0.8, imgsz=640, verbose=False) r = results[0] if r.keypoints is not None and r.keypoints.xy is not None: kpts = r.keypoints.xy # shape: (num_persons, num_kpts, 2) num_persons, num_kpts = kpts.shape[0], kpts.shape[1] for pid in range(num_persons): for a, b in pairs: if a >= num_kpts or b >= num_kpts: continue x1, y1 = map(int, kpts[pid, a].tolist()) x2, y2 = map(int, kpts[pid, b].tolist()) cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 255), 2) #\u0442\u043e\u0447\u043a\u0438: cv2.circle(frame, (x1, y1), 4, (0, 255, 255), -1) cv2.circle(frame, (x2, y2), 4, (0, 255, 255), -1) fps = 1.0 / max(1e-6, time.time() - t0) cv2.putText(frame, f\"FPS: {int(fps)}\", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2) cv2.imshow(\"Live Camera\", frame) cap.release() cv2.destroyAllWindows() \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0433\u0440\u044b. \u0418\u0433\u0440\u0430 import cv2, math from ultralytics import YOLO import torch device = 'cuda' if torch.cuda.is_available() else 'cpu' model = YOLO('YOLO11n-pose.pt').to(device) cap = cv2.VideoCapture(0) target = 0 # \u043d\u043e\u0441 alpha = 0.05 # \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u043d\u0438\u044f conf_th = 0.5 # \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 cx = cy = tx = ty = None while cv2.waitKey(1) != 27: ok, frame = cap.read() if not ok: break h, w = frame.shape[:2] if cx is None: cx = tx = w / 2 cy = ty = h / 2 r = model.track(frame, classes=0, conf=0.8, imgsz=640, verbose=False)[0] found = False if r.keypoints is not None and r.keypoints.xy is not None and r.keypoints.xy.size(0) > 0: kxy = r.keypoints.xy kcf = r.keypoints.conf # \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c None num_kp = kxy.shape[1] if target < num_kp: x, y = float(kxy[0, target, 0]), float(kxy[0, target, 1]) ok_conf = True if kcf is None else float(kcf[0, target]) >= conf_th if ok_conf and not (x != x or y != y): # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 NaN tx, ty = x, y found = True # \u0434\u0432\u0438\u0433\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u043d\u043e\u0432\u0443\u044e \u0446\u0435\u043b\u044c if found: cx += (tx - cx) * alpha cy += (ty - cy) * alpha # \u0440\u0438\u0441\u0443\u0435\u043c if found: cv2.circle(frame, (int(tx), int(ty)), 4, (0, 255, 255), -1) # \u0446\u0435\u043b\u044c cv2.circle(frame, (int(cx), int(cy)), 14, (0, 0, 255), 2) # \u0438\u0433\u0440\u043e\u043a # \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f if math.hypot(cx - tx, cy - ty) < 12: fs, thick = 3, 7 (tw, th), _ = cv2.getTextSize(\"GAY\", cv2.FONT_HERSHEY_SIMPLEX, fs, thick) org = ((w - tw) // 2, (h + th) // 2) cv2.putText(frame, \"GAY\", org, cv2.FONT_HERSHEY_SIMPLEX, fs, (0, 0, 255), thick, cv2.LINE_AA) cv2.imshow(\"Live Camera\", frame) cap.release() cv2.destroyAllWindows()","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0441 Pose"}]}